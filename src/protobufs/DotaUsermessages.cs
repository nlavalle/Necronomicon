// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_usermessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Steam.Protos.Dota2 {

  /// <summary>Holder for reflection information generated from dota_usermessages.proto</summary>
  public static partial class DotaUsermessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for dota_usermessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotaUsermessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chdkb3RhX3VzZXJtZXNzYWdlcy5wcm90bxoWbmV0d29ya2Jhc2V0eXBlcy5w",
            "cm90bxoXZG90YV9zaGFyZWRfZW51bXMucHJvdG8aGWRvdGFfY29tbW9ubWVz",
            "c2FnZXMucHJvdG8iKwoYQ0RPVEFVc2VyTXNnX0FJRGVidWdMaW5lEg8KB21l",
            "c3NhZ2UYASABKAkiLwoRQ0RPVEFVc2VyTXNnX1BpbmcSDAoEcGluZxgCIAEo",
            "DRIMCgRsb3NzGAMgASgNIjAKF0NET1RBVXNlck1zZ19Td2FwVmVyaWZ5EhUK",
            "CXBsYXllcl9pZBgBIAEoBToCLTEinQIKFkNET1RBVXNlck1zZ19DaGF0RXZl",
            "bnQSNgoEdHlwZRgBIAIoDjISLkRPVEFfQ0hBVF9NRVNTQUdFOhRDSEFUX01F",
            "U1NBR0VfSU5WQUxJRBINCgV2YWx1ZRgCIAEoDRIWCgpwbGF5ZXJpZF8xGAMg",
            "ASgROgItMRIWCgpwbGF5ZXJpZF8yGAQgASgROgItMRIWCgpwbGF5ZXJpZF8z",
            "GAUgASgROgItMRIWCgpwbGF5ZXJpZF80GAYgASgROgItMRIWCgpwbGF5ZXJp",
            "ZF81GAcgASgROgItMRIWCgpwbGF5ZXJpZF82GAggASgROgItMRIOCgZ2YWx1",
            "ZTIYCSABKA0SDgoGdmFsdWUzGAogASgNEgwKBHRpbWUYCyABKAIiYQoUQ0RP",
            "VEFVc2VyTXNnX0JvdENoYXQSFQoJcGxheWVyX2lkGAEgASgFOgItMRIPCgdt",
            "ZXNzYWdlGAMgASgJEg4KBnRhcmdldBgEIAEoCRIRCgl0ZWFtX29ubHkYBSAB",
            "KAgicQogQ0RPVEFVc2VyTXNnX0NvbWJhdEhlcm9Qb3NpdGlvbnMSDQoFaW5k",
            "ZXgYASABKA0SDAoEdGltZRgCIAEoBRIgCgl3b3JsZF9wb3MYAyABKAsyDS5D",
            "TXNnVmVjdG9yMkQSDgoGaGVhbHRoGAQgASgFIqMBCh5DRE9UQVVzZXJNc2df",
            "Q29tYmF0TG9nQnVsa0RhdGESLwoOY29tYmF0X2VudHJpZXMYASADKAsyFy5D",
            "TXNnRE9UQUNvbWJhdExvZ0VudHJ5EhEKCXRpbWVzdGFtcBgCIAEoAhIQCghk",
            "dXJhdGlvbhgDIAEoAhIVCglwbGF5ZXJfaWQYBCABKAU6Ai0xEhQKDHJlcXVl",
            "c3RfdGltZRgFIAEoAiJbCiVDRE9UQVVzZXJNc2dfUHJvamVjdGlsZVBhcnRp",
            "Y2xlQ1BEYXRhEhUKDWNvbnRyb2xfcG9pbnQYASABKAUSGwoGdmVjdG9yGAIg",
            "ASgLMgsuQ01zZ1ZlY3RvciJvCilDRE9UQVVzZXJNc2dfVXBkYXRlTGluZWFy",
            "UHJvamVjdGlsZUNQRGF0YRIOCgZoYW5kbGUYASABKAUSFQoNY29udHJvbF9w",
            "b2ludBgCIAEoBRIbCgZ2ZWN0b3IYAyABKAsyCy5DTXNnVmVjdG9yIqUCChxD",
            "RE9UQVVzZXJNc2dfTWluaUtpbGxDYW1JbmZvEjkKCWF0dGFja2VycxgBIAMo",
            "CzImLkNET1RBVXNlck1zZ19NaW5pS2lsbENhbUluZm8uQXR0YWNrZXIayQEK",
            "CEF0dGFja2VyEhoKCGF0dGFja2VyGAEgASgNOggxNjc3NzIxNRIUCgx0b3Rh",
            "bF9kYW1hZ2UYAiABKAUSQQoJYWJpbGl0aWVzGAMgAygLMi4uQ0RPVEFVc2Vy",
            "TXNnX01pbmlLaWxsQ2FtSW5mby5BdHRhY2tlci5BYmlsaXR5EhUKDWF0dGFj",
            "a2VyX25hbWUYBCABKAkaMQoHQWJpbGl0eRIWCgphYmlsaXR5X2lkGAEgASgF",
            "OgItMRIOCgZkYW1hZ2UYAiABKAUiQAodQ0RPVEFVc2VyTXNnX0dsb2JhbExp",
            "Z2h0Q29sb3ISDQoFY29sb3IYASABKA0SEAoIZHVyYXRpb24YAiABKAIiVQoh",
            "Q0RPVEFVc2VyTXNnX0dsb2JhbExpZ2h0RGlyZWN0aW9uEh4KCWRpcmVjdGlv",
            "bhgBIAEoCzILLkNNc2dWZWN0b3ISEAoIZHVyYXRpb24YAiABKAIiYQoZQ0RP",
            "VEFVc2VyTXNnX0xvY2F0aW9uUGluZxIVCglwbGF5ZXJfaWQYASABKAU6Ai0x",
            "Ei0KDWxvY2F0aW9uX3BpbmcYAiABKAsyFi5DRE9UQU1zZ19Mb2NhdGlvblBp",
            "bmcikQEKHUNET1RBVXNlck1zZ19QaW5nQ29uZmlybWF0aW9uEigKHHBsYXll",
            "cl9pZF9vZl9vcmlnaW5hbF9waW5nZXIYASABKAU6Ai0xEhQKDGVudGl0eV9p",
            "bmRleBgCIAEoDRIRCglpY29uX3R5cGUYAyABKA0SHQoIbG9jYXRpb24YBCAB",
            "KAsyCy5DTXNnVmVjdG9yIlgKFkNET1RBVXNlck1zZ19JdGVtQWxlcnQSFQoJ",
            "cGxheWVyX2lkGAEgASgFOgItMRInCgppdGVtX2FsZXJ0GAIgASgLMhMuQ0RP",
            "VEFNc2dfSXRlbUFsZXJ0Iu0BChtDRE9UQVVzZXJNc2dfRW5lbXlJdGVtQWxl",
            "cnQSFQoJcGxheWVyX2lkGAEgASgFOgItMRIcChB0YXJnZXRfcGxheWVyX2lk",
            "GAIgASgFOgItMRIbCg9pdGVtX2FiaWxpdHlfaWQYAyABKAU6Ai0xEhUKCXJ1",
            "bmVfdHlwZRgEIAEoBToCLTESEQoJZW50aXR5X2lkGAUgASgFEhYKCml0ZW1f",
            "bGV2ZWwYBiABKAU6Ai0xEhsKD3ByaW1hcnlfY2hhcmdlcxgHIAEoBToCLTES",
            "HQoRc2Vjb25kYXJ5X2NoYXJnZXMYCCABKAU6Ai0xIqcBChpDRE9UQVVzZXJN",
            "c2dfTW9kaWZpZXJBbGVydBIVCglwbGF5ZXJfaWQYASABKAU6Ai0xEhIKCmNs",
            "YXNzX25hbWUYAiABKAkSEwoLc3RhY2tfY291bnQYAyABKA0SEQoJaXNfZGVi",
            "dWZmGAQgASgIEhsKD3RhcmdldF9lbnRpbmRleBgFIAEoBToCLTESGQoRc2Vj",
            "b25kc19yZW1haW5pbmcYBiABKAIiZwoYQ0RPVEFVc2VyTXNnX0hQTWFuYUFs",
            "ZXJ0EhUKCXBsYXllcl9pZBgBIAEoBToCLTESGwoPdGFyZ2V0X2VudGluZGV4",
            "GAIgASgFOgItMRIXCg9zaG93X3Jhd192YWx1ZXMYAyABKAgixwEKHUNET1RB",
            "VXNlck1zZ19OZXV0cmFsQ2FtcEFsZXJ0EhUKCXBsYXllcl9pZBgBIAEoBToC",
            "LTESHAoQc3Bhd25lcl9lbnRpbmRleBgCIAEoBToCLTESGQoNdW5pdF9lbnRp",
            "bmRleBgDIAEoBToCLTESEwoLc3RhY2tfY291bnQYBCABKAUSEQoJY2FtcF90",
            "eXBlGAUgASgFEhUKDXN0YWNrX3JlcXVlc3QYBiABKAgSFwoPc3RhY2tfaW50",
            "ZW50aW9uGAcgASgIIkIKF0NET1RBVXNlck1zZ19HbHlwaEFsZXJ0EhUKCXBs",
            "YXllcl9pZBgBIAEoBToCLTESEAoIbmVnYXRpdmUYAiABKAgiQgoXQ0RPVEFV",
            "c2VyTXNnX1JhZGFyQWxlcnQSFQoJcGxheWVyX2lkGAEgASgFOgItMRIQCghu",
            "ZWdhdGl2ZRgCIAEoCCJDChhDRE9UQVVzZXJNc2dfUm9zaGFuVGltZXISFQoJ",
            "cGxheWVyX2lkGAEgASgFOgItMRIQCghuZWdhdGl2ZRgCIAEoCCKOAQoeQ0RP",
            "VEFVc2VyTXNnX1dpbGxQdXJjaGFzZUFsZXJ0EhsKD2l0ZW1fYWJpbGl0eV9p",
            "ZBgBIAEoBToCLTESFQoJcGxheWVyX2lkGAIgASgFOgItMRIWCg5nb2xkX3Jl",
            "bWFpbmluZxgDIAEoDRIgChRzdWdnZXN0aW9uX3BsYXllcl9pZBgEIAEoBToC",
            "LTEidwofQ0RPVEFVc2VyTXNnX0VtcHR5VGVsZXBvcnRBbGVydBIcChBzb3Vy",
            "Y2VfcGxheWVyX2lkGAEgASgFOgItMRIcChB0YXJnZXRfcGxheWVyX2lkGAIg",
            "ASgFOgItMRIYChBjb29sZG93bl9zZWNvbmRzGAMgASgFIoABCiNDRE9UQVVz",
            "ZXJNc2dfTWFyc0FyZW5hT2ZCbG9vZEF0dGFjaxIgCg5zb3VyY2VfZWhhbmRs",
            "ZRgBIAEoDToIMTY3NzcyMTUSIAoOdGFyZ2V0X2VoYW5kbGUYAiABKA06CDE2",
            "Nzc3MjE1EhUKDXdhcnJpb3JfaW5kZXgYAyABKAUiNwoeQ0RPVEFVc2VyTXNn",
            "X0J1eUJhY2tTdGF0ZUFsZXJ0EhUKCXBsYXllcl9pZBgBIAEoBToCLTEimAEK",
            "GkNET1RBVXNlck1zZ19RdWlja0J1eUFsZXJ0EhUKCXBsYXllcl9pZBgBIAEo",
            "BToCLTESGwoPaXRlbV9hYmlsaXR5X2lkGAIgASgFOgItMRIRCglnb2xkX2Nv",
            "c3QYAyABKAUSHQoVaXRlbV9jb29sZG93bl9zZWNvbmRzGAQgASgFEhQKDHNo",
            "b3dfYnV5YmFjaxgFIAEoCCKtAgofQ0RPVEFVc2VyTXNnX0NvdXJpZXJLaWxs",
            "ZWRBbGVydBIMCgR0ZWFtGAEgASgNEhIKCmdvbGRfdmFsdWUYAiABKA0SHwoN",
            "ZW50aXR5X2hhbmRsZRgDIAEoDToIMTY3NzcyMTUSEQoJdGltZXN0YW1wGAQg",
            "ASgFEj0KCmxvc3RfaXRlbXMYBSADKAsyKS5DRE9UQVVzZXJNc2dfQ291cmll",
            "cktpbGxlZEFsZXJ0Lkxvc3RJdGVtEhwKEGtpbGxlcl9wbGF5ZXJfaWQYBiAB",
            "KAU6Ai0xEhwKEG93bmluZ19wbGF5ZXJfaWQYByABKAU6Ai0xGjkKCExvc3RJ",
            "dGVtEhsKD2l0ZW1fYWJpbGl0eV9pZBgBIAEoBToCLTESEAoIcXVhbnRpdHkY",
            "AiABKA0ioAEKGUNET1RBVXNlck1zZ19NaW5pbWFwRXZlbnQSEgoKZXZlbnRf",
            "dHlwZRgBIAEoBRIfCg1lbnRpdHlfaGFuZGxlGAIgASgNOggxNjc3NzIxNRIJ",
            "CgF4GAMgASgFEgkKAXkYBCABKAUSEAoIZHVyYXRpb24YBSABKAUSJgoUdGFy",
            "Z2V0X2VudGl0eV9oYW5kbGUYBiABKA06CDE2Nzc3MjE1IlEKFENET1RBVXNl",
            "ck1zZ19NYXBMaW5lEhUKCXBsYXllcl9pZBgBIAEoBToCLTESIgoHbWFwbGlu",
            "ZRgCIAEoCzIRLkNET1RBTXNnX01hcExpbmUifQoeQ0RPVEFVc2VyTXNnX01p",
            "bmltYXBEZWJ1Z1BvaW50Eh0KCGxvY2F0aW9uGAEgASgLMgsuQ01zZ1ZlY3Rv",
            "chINCgVjb2xvchgCIAEoDRIMCgRzaXplGAMgASgFEhAKCGR1cmF0aW9uGAQg",
            "ASgCEg0KBWluZGV4GAUgASgFIvMCCiNDRE9UQVVzZXJNc2dfQ3JlYXRlTGlu",
            "ZWFyUHJvamVjdGlsZRIbCgZvcmlnaW4YASABKAsyCy5DTXNnVmVjdG9yEh8K",
            "CHZlbG9jaXR5GAIgASgLMg0uQ01zZ1ZlY3RvcjJEEhQKCGVudGluZGV4GAQg",
            "ASgFOgItMRIWCg5wYXJ0aWNsZV9pbmRleBgFIAEoBBIOCgZoYW5kbGUYBiAB",
            "KAUSIwoMYWNjZWxlcmF0aW9uGAcgASgLMg0uQ01zZ1ZlY3RvcjJEEhEKCW1h",
            "eF9zcGVlZBgIIAEoAhISCgpmb3dfcmFkaXVzGAkgASgCEhkKEXN0aWNreV9m",
            "b3dfcmV2ZWFsGAogASgIEhAKCGRpc3RhbmNlGAsgASgCEhUKDWNvbG9yZ2Vt",
            "Y29sb3IYDCABKAcSQAoQcGFydGljbGVfY3BfZGF0YRgNIAMoCzImLkNET1RB",
            "VXNlck1zZ19Qcm9qZWN0aWxlUGFydGljbGVDUERhdGEiNgokQ0RPVEFVc2Vy",
            "TXNnX0Rlc3Ryb3lMaW5lYXJQcm9qZWN0aWxlEg4KBmhhbmRsZRgBIAEoBSJT",
            "CiVDRE9UQVVzZXJNc2dfRG9kZ2VUcmFja2luZ1Byb2plY3RpbGVzEhQKCGVu",
            "dGluZGV4GAEgAigFOgItMRIUCgxhdHRhY2tzX29ubHkYAiABKAgiZgohQ0RP",
            "VEFVc2VyTXNnX1NwZWN0YXRvclBsYXllckNsaWNrEhQKCGVudGluZGV4GAEg",
            "AigFOgItMRISCgpvcmRlcl90eXBlGAIgASgFEhcKDHRhcmdldF9pbmRleBgD",
            "IAEoBToBMCKSAgomQ0RPVEFVc2VyTXNnX1NwZWN0YXRvclBsYXllclVuaXRP",
            "cmRlcnMSFAoIZW50aW5kZXgYASABKAU6Ai0xEhIKCm9yZGVyX3R5cGUYAiAB",
            "KAUSDQoFdW5pdHMYAyADKAUSFwoMdGFyZ2V0X2luZGV4GAQgASgFOgEwEhYK",
            "CmFiaWxpdHlfaWQYBSABKAU6Ai0xEh0KCHBvc2l0aW9uGAYgASgLMgsuQ01z",
            "Z1ZlY3RvchINCgVxdWV1ZRgHIAEoCBIXCg9zZXF1ZW5jZV9udW1iZXIYCCAB",
            "KAUSDQoFZmxhZ3MYCSABKA0SGgoSbGFzdF9vcmRlcl9sYXRlbmN5GAogASgN",
            "EgwKBHBpbmcYCyABKA0ifQodQ0RPVEFVc2VyTXNnX05ldmVybW9yZVJlcXVp",
            "ZW0SHwoNZW50aXR5X2hhbmRsZRgBIAEoDToIMTY3NzcyMTUSDQoFbGluZXMY",
            "AiABKAUSGwoGb3JpZ2luGAMgASgLMgsuQ01zZ1ZlY3RvchIPCgdyZXZlcnNl",
            "GAQgASgIIkcKG0NET1RBVXNlck1zZ19JbnZhbGlkQ29tbWFuZBIPCgdtZXNz",
            "YWdlGAEgASgJEhcKD3NlcXVlbmNlX251bWJlchgCIAEoBSJCChVDRE9UQVVz",
            "ZXJNc2dfSHVkRXJyb3ISEAoIb3JkZXJfaWQYASABKAUSFwoPc2VxdWVuY2Vf",
            "bnVtYmVyGAIgASgFImcKG0NET1RBVXNlck1zZ19TaGFyZWRDb29sZG93bhIU",
            "CghlbnRpbmRleBgBIAEoBToCLTESDAoEbmFtZRgCIAEoCRIQCghjb29sZG93",
            "bhgDIAEoAhISCgpuYW1lX2luZGV4GAQgASgFIi8KH0NET1RBVXNlck1zZ19T",
            "ZXROZXh0QXV0b2J1eUl0ZW0SDAoEbmFtZRgBIAEoCSJYChtDRE9UQVVzZXJN",
            "c2dfSGFsbG93ZWVuRHJvcHMSEQoJaXRlbV9kZWZzGAEgAygNEhIKCnBsYXll",
            "cl9pZHMYAiADKAUSEgoKcHJpemVfbGlzdBgDIAEoDSJFCiVDRE9UQVVzZXJN",
            "c2dfQ291cmllckxlZnRGb3VudGFpbkFsZXJ0EhwKEG93bmluZ19wbGF5ZXJf",
            "aWQYASABKAU6Ai0xIt4CChxDRE9UQVJlc3BvbnNlUXVlcnlTZXJpYWxpemVk",
            "EjEKBWZhY3RzGAEgAygLMiIuQ0RPVEFSZXNwb25zZVF1ZXJ5U2VyaWFsaXpl",
            "ZC5GYWN0GooCCgRGYWN0EgsKA2tleRgBIAIoBRJGCgd2YWx0eXBlGAIgAigO",
            "MiwuQ0RPVEFSZXNwb25zZVF1ZXJ5U2VyaWFsaXplZC5GYWN0LlZhbHVlVHlw",
            "ZToHTlVNRVJJQxITCgt2YWxfbnVtZXJpYxgDIAEoAhISCgp2YWxfc3RyaW5n",
            "GAQgASgJEh0KFXZhbF9zdHJpbmd0YWJsZV9pbmRleBgFIAEoBRIXCg92YWxf",
            "aW50X251bWVyaWMYBiABKBEiTAoJVmFsdWVUeXBlEgsKB05VTUVSSUMQARIK",
            "CgZTVFJJTkcQAhIVChFTVFJJTkdUQUJMRV9JTkRFWBADEg8KC0lOVF9OVU1F",
            "UklDEAQilwEKGENET1RBU3BlZWNoTWF0Y2hPbkNsaWVudBIWCg5zcGVlY2hf",
            "Y29uY2VwdBgBIAEoBRIWCg5yZWNpcGllbnRfdHlwZRgCIAEoBRI0Cg1yZXNw",
            "b25zZXF1ZXJ5GAMgASgLMh0uQ0RPVEFSZXNwb25zZVF1ZXJ5U2VyaWFsaXpl",
            "ZBIVCgpyYW5kb21zZWVkGAQgASgPOgEwIpoIChZDRE9UQVVzZXJNc2dfVW5p",
            "dEV2ZW50EjgKCG1zZ190eXBlGAEgAigOMhQuRURvdGFFbnRpdHlNZXNzYWdl",
            "czoQRE9UQV9VTklUX1NQRUVDSBIUCgxlbnRpdHlfaW5kZXgYAiACKAUSLgoG",
            "c3BlZWNoGAMgASgLMh4uQ0RPVEFVc2VyTXNnX1VuaXRFdmVudC5TcGVlY2gS",
            "NwoLc3BlZWNoX211dGUYBCABKAsyIi5DRE9UQVVzZXJNc2dfVW5pdEV2ZW50",
            "LlNwZWVjaE11dGUSNwoLYWRkX2dlc3R1cmUYBSABKAsyIi5DRE9UQVVzZXJN",
            "c2dfVW5pdEV2ZW50LkFkZEdlc3R1cmUSPQoOcmVtb3ZlX2dlc3R1cmUYBiAB",
            "KAsyJS5DRE9UQVVzZXJNc2dfVW5pdEV2ZW50LlJlbW92ZUdlc3R1cmUSOQoM",
            "Ymxvb2RfaW1wYWN0GAcgASgLMiMuQ0RPVEFVc2VyTXNnX1VuaXRFdmVudC5C",
            "bG9vZEltcGFjdBI5CgxmYWRlX2dlc3R1cmUYCCABKAsyIy5DRE9UQVVzZXJN",
            "c2dfVW5pdEV2ZW50LkZhZGVHZXN0dXJlEjkKFnNwZWVjaF9tYXRjaF9vbl9j",
            "bGllbnQYCSABKAsyGS5DRE9UQVNwZWVjaE1hdGNoT25DbGllbnQaKAoISW50",
            "ZXJ2YWwSDQoFc3RhcnQYASABKAISDQoFcmFuZ2UYAiABKAIavQEKBlNwZWVj",
            "aBIWCg5zcGVlY2hfY29uY2VwdBgBIAEoBRIQCghyZXNwb25zZRgCIAEoCRIW",
            "Cg5yZWNpcGllbnRfdHlwZRgDIAEoBRIXCghtdXRlYWJsZRgFIAEoCDoFZmFs",
            "c2USMgoIcHJlZGVsYXkYBiABKAsyIC5DRE9UQVVzZXJNc2dfVW5pdEV2ZW50",
            "LkludGVydmFsEg0KBWZsYWdzGAcgASgNEhUKDXJlc3BvbnNlX3R5cGUYCCAB",
            "KAUaIAoKU3BlZWNoTXV0ZRISCgVkZWxheRgBIAEoAjoDMC41GosBCgpBZGRH",
            "ZXN0dXJlEhAKCGFjdGl2aXR5GAEgASgFEgwKBHNsb3QYAiABKAUSEgoHZmFk",
            "ZV9pbhgDIAEoAjoBMBIVCghmYWRlX291dBgEIAEoAjoDMC4xEhgKDXBsYXli",
            "YWNrX3JhdGUYBSABKAI6ATESGAoQc2VxdWVuY2VfdmFyaWFudBgGIAEoBRoh",
            "Cg1SZW1vdmVHZXN0dXJlEhAKCGFjdGl2aXR5GAEgASgFGkAKC0Jsb29kSW1w",
            "YWN0Eg0KBXNjYWxlGAEgASgFEhAKCHhfbm9ybWFsGAIgASgFEhAKCHlfbm9y",
            "bWFsGAMgASgFGh8KC0ZhZGVHZXN0dXJlEhAKCGFjdGl2aXR5GAEgASgFIk8K",
            "GkNET1RBVXNlck1zZ19JdGVtUHVyY2hhc2VkEhsKD2l0ZW1fYWJpbGl0eV9p",
            "ZBgBIAEoBToCLTESFAoMZnJvbV9jb21iaW5lGAIgASgIIjQKFUNET1RBVXNl",
            "ck1zZ19JdGVtU29sZBIbCg9pdGVtX2FiaWxpdHlfaWQYASABKAU6Ai0xIm4K",
            "FkNET1RBVXNlck1zZ19JdGVtRm91bmQSEgoGcGxheWVyGAEgASgFOgItMRIP",
            "CgdxdWFsaXR5GAIgASgFEg4KBnJhcml0eRgDIAEoBRIOCgZtZXRob2QYBCAB",
            "KAUSDwoHaXRlbWRlZhgFIAEoDSLRAQoaQ0RPVEFVc2VyTXNnX092ZXJoZWFk",
            "RXZlbnQSPwoMbWVzc2FnZV90eXBlGAEgAigOMhQuRE9UQV9PVkVSSEVBRF9B",
            "TEVSVDoTT1ZFUkhFQURfQUxFUlRfR09MRBINCgV2YWx1ZRgCIAEoBRIiChZ0",
            "YXJnZXRfcGxheWVyX2VudGluZGV4GAMgASgFOgItMRIbCg90YXJnZXRfZW50",
            "aW5kZXgYBCABKAU6Ai0xEiIKFnNvdXJjZV9wbGF5ZXJfZW50aW5kZXgYBSAB",
            "KAU6Ai0xIj4KHENET1RBVXNlck1zZ19UdXRvcmlhbFRpcEluZm8SDAoEbmFt",
            "ZRgBIAEoCRIQCghwcm9ncmVzcxgCIAEoBSJdChtDRE9UQVVzZXJNc2dfVHV0",
            "b3JpYWxGaW5pc2gSDwoHaGVhZGluZxgBIAEoCRIOCgZlbWJsZW0YAiABKAkS",
            "DAoEYm9keRgDIAEoCRIPCgdzdWNjZXNzGAQgASgIIiYKJENET1RBVXNlck1z",
            "Z19UdXRvcmlhbE1pbmltYXBQb3NpdGlvbiJfCh9DRE9UQVVzZXJNc2dfU2Vu",
            "ZEdlbmVyaWNUb29sVGlwEg0KBXRpdGxlGAEgASgJEgwKBHRleHQYAiABKAkS",
            "EAoIZW50aW5kZXgYAyABKAUSDQoFY2xvc2UYBCABKAgiVwoWQ0RPVEFVc2Vy",
            "TXNnX1dvcmxkTGluZRIVCglwbGF5ZXJfaWQYASABKAU6Ai0xEiYKCXdvcmxk",
            "bGluZRgCIAEoCzITLkNET1RBTXNnX1dvcmxkTGluZSKUAQoWQ0RPVEFVc2Vy",
            "TXNnX0NoYXRXaGVlbBIjCg9jaGF0X21lc3NhZ2VfaWQYASABKA06CjQyOTQ5",
            "NjcyOTUSFQoJcGxheWVyX2lkGAIgASgFOgItMRISCgphY2NvdW50X2lkGAMg",
            "ASgNEhUKDXBhcmFtX2hlcm9faWQYBCABKAUSEwoLZW1vdGljb25faWQYBSAB",
            "KA0iYQodQ0RPVEFVc2VyTXNnX1JlY2VpdmVkWG1hc0dpZnQSFQoJcGxheWVy",
            "X2lkGAEgASgFOgItMRIRCglpdGVtX25hbWUYAiABKAkSFgoOaW52ZW50b3J5",
            "X3Nsb3QYAyABKAUipAEKF0NET1RBVXNlck1zZ19TaG93U3VydmV5EhEKCXN1",
            "cnZleV9pZBgBIAEoBRIQCghtYXRjaF9pZBgCIAEoBBIWCg5yZXNwb25zZV9z",
            "dHlsZRgDIAEoCRIYChB0ZWFtbWF0ZV9oZXJvX2lkGAQgASgFEhUKDXRlYW1t",
            "YXRlX25hbWUYBSABKAkSGwoTdGVhbW1hdGVfYWNjb3VudF9pZBgGIAEoDSI1",
            "CiBDRE9UQVVzZXJNc2dfVXBkYXRlU2hhcmVkQ29udGVudBIRCglzbG90X3R5",
            "cGUYASABKAUiIQofQ0RPVEFVc2VyTXNnX1R1dG9yaWFsUmVxdWVzdEV4cCIu",
            "ChlDRE9UQVVzZXJNc2dfVHV0b3JpYWxGYWRlEhEKCXRndF9hbHBoYRgBIAEo",
            "BSJ8CiBDRE9UQVVzZXJNc2dfVHV0b3JpYWxQaW5nTWluaW1hcBIVCglwbGF5",
            "ZXJfaWQYASABKAU6Ai0xEg0KBXBvc194GAIgASgCEg0KBXBvc195GAMgASgC",
            "Eg0KBXBvc196GAQgASgCEhQKDGVudGl0eV9pbmRleBgFIAEoBSIzCiJDRE9U",
            "QVVzZXJNc2dfR2FtZXJ1bGVzU3RhdGVDaGFuZ2VkEg0KBXN0YXRlGAEgASgN",
            "IkUKHUNET1RBVXNlck1zZ19BZGRRdWVzdExvZ0VudHJ5EhAKCG5wY19uYW1l",
            "GAEgASgJEhIKCm5wY19kaWFsb2cYAiABKAkiXwoaQ0RPVEFVc2VyTXNnX1Nl",
            "bmRTdGF0UG9wdXASFQoJcGxheWVyX2lkGAEgASgFOgItMRIqCglzdGF0cG9w",
            "dXAYAiABKAsyFy5DRE9UQU1zZ19TZW5kU3RhdFBvcHVwIloKIUNET1RBVXNl",
            "ck1zZ19EaXNtaXNzQWxsU3RhdFBvcHVwcxI1Cg1kaXNtaXNzYWxsbXNnGAEg",
            "ASgLMh4uQ0RPVEFNc2dfRGlzbWlzc0FsbFN0YXRQb3B1cHMijwEKJUNET1RB",
            "VXNlck1zZ19TZW5kUm9zaGFuU3BlY3RhdG9yUGhhc2USNgoFcGhhc2UYASAB",
            "KA4yEi5ET1RBX1JPU0hBTl9QSEFTRToTa19TUlNQX1JPU0hBTl9BTElWRRIY",
            "ChBwaGFzZV9zdGFydF90aW1lGAIgASgFEhQKDHBoYXNlX2xlbmd0aBgDIAEo",
            "BSJDChxDRE9UQVVzZXJNc2dfU2VuZFJvc2hhblBvcHVwEhEKCXJlY2xhaW1l",
            "ZBgBIAEoCBIQCghnYW1ldGltZRgCIAEoBSJMChpDRE9UQVVzZXJNc2dfU2Vu",
            "ZEZpbmFsR29sZBIVCg1yZWxpYWJsZV9nb2xkGAEgAygNEhcKD3VucmVsaWFi",
            "bGVfZ29sZBgCIAMoDSJPChZDRE9UQVVzZXJNc2dfQ3VzdG9tTXNnEg8KB21l",
            "c3NhZ2UYASABKAkSFQoJcGxheWVyX2lkGAIgASgFOgItMRINCgV2YWx1ZRgD",
            "IAEoBSJcChlDRE9UQVVzZXJNc2dfQ29hY2hIVURQaW5nEhUKCXBsYXllcl9p",
            "ZBgBIAEoBToCLTESKAoIaHVkX3BpbmcYAiABKAsyFi5DRE9UQU1zZ19Db2Fj",
            "aEhVRFBpbmciIAoeQ0RPVEFVc2VyTXNnX0NsaWVudExvYWRHcmlkTmF2IvMD",
            "ChpDRE9UQVVzZXJNc2dfVEVfUHJvamVjdGlsZRIYCgZzb3VyY2UYASABKA06",
            "CDE2Nzc3MjE1EhgKBnRhcmdldBgCIAEoDToIMTY3NzcyMTUSEgoKbW92ZV9z",
            "cGVlZBgDIAEoBRIZChFzb3VyY2VfYXR0YWNobWVudBgEIAEoBRIeChZwYXJ0",
            "aWNsZV9zeXN0ZW1faGFuZGxlGAUgASgDEhEKCWRvZGdlYWJsZRgGIAEoCBIR",
            "Cglpc19hdHRhY2sYByABKAgSEwoLZXhwaXJlX3RpbWUYCSABKAISFQoNbWF4",
            "aW1wYWN0dGltZRgKIAEoAhIVCg1jb2xvcmdlbWNvbG9yGAsgASgHEhMKC2xh",
            "dW5jaF90aWNrGAwgASgFEg4KBmhhbmRsZRgNIAEoBRIfCgp0YXJnZXRfbG9j",
            "GA4gASgLMgsuQ01zZ1ZlY3RvchJAChBwYXJ0aWNsZV9jcF9kYXRhGA8gAygL",
            "MiYuQ0RPVEFVc2VyTXNnX1Byb2plY3RpbGVQYXJ0aWNsZUNQRGF0YRIpCiFh",
            "ZGRpdGlvbmFsX3BhcnRpY2xlX3N5c3RlbV9oYW5kbGUYECABKAMSGwoTb3Jp",
            "Z2luYWxfbW92ZV9zcGVlZBgRIAEoBRIZCgdhYmlsaXR5GBIgASgNOggxNjc3",
            "NzIxNSLlAwodQ0RPVEFVc2VyTXNnX1RFX1Byb2plY3RpbGVMb2MSHwoKc291",
            "cmNlX2xvYxgBIAEoCzILLkNNc2dWZWN0b3ISGAoGdGFyZ2V0GAIgASgNOggx",
            "Njc3NzIxNRISCgptb3ZlX3NwZWVkGAMgASgFEh4KFnBhcnRpY2xlX3N5c3Rl",
            "bV9oYW5kbGUYBCABKAMSEQoJZG9kZ2VhYmxlGAUgASgIEhEKCWlzX2F0dGFj",
            "axgGIAEoCBITCgtleHBpcmVfdGltZRgJIAEoAhIfCgp0YXJnZXRfbG9jGAog",
            "ASgLMgsuQ01zZ1ZlY3RvchIVCg1jb2xvcmdlbWNvbG9yGAsgASgHEhMKC2xh",
            "dW5jaF90aWNrGAwgASgFEg4KBmhhbmRsZRgNIAEoBRIYCgZzb3VyY2UYDiAB",
            "KA06CDE2Nzc3MjE1EhkKEXNvdXJjZV9hdHRhY2htZW50GA8gASgFEkAKEHBh",
            "cnRpY2xlX2NwX2RhdGEYECADKAsyJi5DRE9UQVVzZXJNc2dfUHJvamVjdGls",
            "ZVBhcnRpY2xlQ1BEYXRhEikKIWFkZGl0aW9uYWxfcGFydGljbGVfc3lzdGVt",
            "X2hhbmRsZRgRIAEoAxIbChNvcmlnaW5hbF9tb3ZlX3NwZWVkGBIgASgFIjMK",
            "IUNET1RBVXNlck1zZ19URV9EZXN0cm95UHJvamVjdGlsZRIOCgZoYW5kbGUY",
            "ASABKAUibAofQ0RPVEFVc2VyTXNnX1RFX0RvdGFCbG9vZEltcGFjdBIYCgZl",
            "bnRpdHkYASABKA06CDE2Nzc3MjE1Eg0KBXNjYWxlGAIgASgCEg8KB3hub3Jt",
            "YWwYAyABKAISDwoHeW5vcm1hbBgEIAEoAiLdAgoYQ0RPVEFVc2VyTXNnX0Fi",
            "aWxpdHlQaW5nEhUKCXBsYXllcl9pZBgBIAEoBToCLTESFgoKYWJpbGl0eV9p",
            "ZBgCIAEoBToCLTESOQoEdHlwZRgDIAEoDjIXLkRPVEFfQUJJTElUWV9QSU5H",
            "X1RZUEU6EkFCSUxJVFlfUElOR19SRUFEWRIYChBjb29sZG93bl9zZWNvbmRz",
            "GAQgASgNEg0KBWxldmVsGAUgASgNEg8KB3Bhc3NpdmUYBiABKAgSEwoLbWFu",
            "YV9uZWVkZWQYByABKA0SEQoJZW50aXR5X2lkGAggASgNEhcKD3ByaW1hcnlf",
            "Y2hhcmdlcxgJIAEoBRIZChFzZWNvbmRhcnlfY2hhcmdlcxgKIAEoBRIRCglj",
            "dHJsX2hlbGQYDCABKAgSFAoMcmVjbGFpbV90aW1lGA0gASgCEhgKDG93bmVy",
            "X2VudGl0eRgOIAEoBToCLTEiuwEKHUNET1RBVXNlck1zZ19URV9Vbml0QW5p",
            "bWF0aW9uEhgKBmVudGl0eRgBIAEoDToIMTY3NzcyMTUSGAoQc2VxdWVuY2Vf",
            "dmFyaWFudBgCIAEoBRIUCgxwbGF5YmFja3JhdGUYAyABKAISEQoJY2FzdHBv",
            "aW50GAQgASgCEgwKBHR5cGUYBSABKAUSEAoIYWN0aXZpdHkYBiABKAUSHQoV",
            "bGFnX2NvbXBlbnNhdGlvbl90aW1lGAcgASgCIkoKIENET1RBVXNlck1zZ19U",
            "RV9Vbml0QW5pbWF0aW9uRW5kEhgKBmVudGl0eRgBIAEoDToIMTY3NzcyMTUS",
            "DAoEc25hcBgCIAEoCCKRAQodQ0RPVEFVc2VyTXNnX1Nob3dHZW5lcmljUG9w",
            "dXASDgoGaGVhZGVyGAEgAigJEgwKBGJvZHkYAiACKAkSDgoGcGFyYW0xGAMg",
            "ASgJEg4KBnBhcmFtMhgEIAEoCRITCgt0aW50X3NjcmVlbhgFIAEoCBIdChVz",
            "aG93X25vX290aGVyX2RpYWxvZ3MYBiABKAgiYAoWQ0RPVEFVc2VyTXNnX1Zv",
            "dGVTdGFydBINCgV0aXRsZRgBIAEoCRIQCghkdXJhdGlvbhgCIAEoAhIUCgxj",
            "aG9pY2VfY291bnQYAyABKAUSDwoHY2hvaWNlcxgEIAMoCSIwChdDRE9UQVVz",
            "ZXJNc2dfVm90ZVVwZGF0ZRIVCg1jaG9pY2VfY291bnRzGAEgAygFIi8KFENE",
            "T1RBVXNlck1zZ19Wb3RlRW5kEhcKD3NlbGVjdGVkX2Nob2ljZRgBIAEoBSKQ",
            "AQofQ0RPVEFVc2VyTXNnX0Jvb3N0ZXJTdGF0ZVBsYXllchIVCglwbGF5ZXJf",
            "aWQYASABKAU6Ai0xEg0KBWJvbnVzGAIgASgCEhMKC2V2ZW50X2JvbnVzGAMg",
            "ASgCEhUKDWJvbnVzX2l0ZW1faWQYBCABKA0SGwoTZXZlbnRfYm9udXNfaXRl",
            "bV9pZBgFIAEoDSJWChlDRE9UQVVzZXJNc2dfQm9vc3RlclN0YXRlEjkKD2Jv",
            "b3N0ZWRfcGxheWVycxgBIAMoCzIgLkNET1RBVXNlck1zZ19Cb29zdGVyU3Rh",
            "dGVQbGF5ZXIiYQoZQ0RPVEFVc2VyTXNnX0FiaWxpdHlTdGVhbBIVCglwbGF5",
            "ZXJfaWQYASABKAU6Ai0xEhYKCmFiaWxpdHlfaWQYAiABKAU6Ai0xEhUKDWFi",
            "aWxpdHlfbGV2ZWwYAyABKA0iagocQ0RPVEFVc2VyTXNnX1N0YXRzSGVyb0xv",
            "b2t1cBIVCglwbGF5ZXJfaWQYASABKAU6Ai0xEg8KB2hlcm9faWQYAiABKAUS",
            "EQoJaGVyb19uYW1lGAMgASgJEg8KB3BlcnNvbmEYBCABKAki+gEKIkNET1RB",
            "VXNlck1zZ19TdGF0c0hlcm9Qb3NpdGlvbkluZm8SGAoQYXZlcmFnZV9wb3Np",
            "dGlvbhgBIAEoAhJKChBwb3NpdGlvbl9kZXRhaWxzGAIgAygLMjAuQ0RPVEFV",
            "c2VyTXNnX1N0YXRzSGVyb1Bvc2l0aW9uSW5mby5Qb3NpdGlvblBhaXIabgoM",
            "UG9zaXRpb25QYWlyEkYKEXBvc2l0aW9uX2NhdGVnb3J5GAEgASgOMhcuRE9U",
            "QV9QT1NJVElPTl9DQVRFR09SWToSRE9UQV9QT1NJVElPTl9OT05FEhYKDnBv",
            "c2l0aW9uX2NvdW50GAIgASgNIo8DCiNDRE9UQVVzZXJNc2dfU3RhdHNIZXJv",
            "TWludXRlRGV0YWlscxIRCglsYXN0X2hpdHMYASABKA0SEgoKaGVyb19raWxs",
            "cxgCIAEoDRITCgtoZXJvX2RhbWFnZRgDIAEoDRIUCgx0b3dlcl9kYW1hZ2UY",
            "BCABKA0SOgoNcG9zaXRpb25faW5mbxgFIAEoCzIjLkNET1RBVXNlck1zZ19T",
            "dGF0c0hlcm9Qb3NpdGlvbkluZm8SEAoIdG90YWxfeHAYBiABKA0SEQoJbmV0",
            "X3dvcnRoGAcgASgNEhwKFGhhcnZlc3RlZF9jcmVlcF9nb2xkGAggASgNEhQK",
            "DGNsYWltZWRfZmFybRgJIAEoDRIUCgx3YXJkc19wbGFjZWQYCiABKA0SFwoP",
            "cnVuZXNfY29sbGVjdGVkGAsgASgNEhAKCHRwc191c2VkGAwgASgNEhIKCm1h",
            "bmFfc3BlbnQYDSADKA0SFwoPZGFtYWdlX2Fic29yYmVkGA4gAygNEhMKC2Rh",
            "bWFnZV9kb25lGA8gAygNIucDCiNDRE9UQVVzZXJNc2dfU3RhdHNUZWFtTWlu",
            "dXRlRGV0YWlscxI6CgxwbGF5ZXJfc3RhdHMYASADKAsyJC5DRE9UQVVzZXJN",
            "c2dfU3RhdHNIZXJvTWludXRlRGV0YWlscxITCgt0b3dlcl9raWxscxgCIAEo",
            "DRIVCg1iYXJyYWNrX2tpbGxzGAMgASgNEiEKGWF2YWlsYWJsZV9sYW5lX2Ny",
            "ZWVwX2dvbGQYBCABKA0SGgoSYmFsYW5jZV9raWxsX3ZhbHVlGAUgASgNEhsK",
            "E2JhbGFuY2VfdG93ZXJfdmFsdWUYBiABKA0SHgoWYmFsYW5jZV9iYXJyYWNr",
            "c192YWx1ZRgHIAEoDRIaChJiYWxhbmNlX2dvbGRfdmFsdWUYCCABKA0SGAoQ",
            "YmFsYW5jZV94cF92YWx1ZRgJIAEoDRJSChBsYW5lX3BlcmZvcm1hbmNlGAog",
            "AygLMjguQ0RPVEFVc2VyTXNnX1N0YXRzVGVhbU1pbnV0ZURldGFpbHMuTG9j",
            "YXRpb25QZXJmb3JtYW5jZRpSChNMb2NhdGlvblBlcmZvcm1hbmNlEhkKEWxv",
            "Y2F0aW9uX2NhdGVnb3J5GAEgASgNEhEKCXN0YXRfdHlwZRgCIAEoDRINCgV2",
            "YWx1ZRgDIAEoDSKwAQohQ0RPVEFVc2VyTXNnX1N0YXRzUGxheWVyS2lsbFNo",
            "YXJlEhUKCXBsYXllcl9pZBgBIAEoBToCLTESGgoSa2lsbF9zaGFyZV9wZXJj",
            "ZW50GAIgASgCEhQKDHBsYXllcl9sb2NfeBgDIAEoAhIUCgxwbGF5ZXJfbG9j",
            "X3kYBCABKAISFgoOaGVhbHRoX3BlcmNlbnQYBSABKAISFAoMbWFuYV9wZXJj",
            "ZW50GAYgASgCIswBCh1DRE9UQVVzZXJNc2dfU3RhdHNLaWxsRGV0YWlscxIV",
            "Cgl2aWN0aW1faWQYASABKAU6Ai0xEjcKC2tpbGxfc2hhcmVzGAIgAygLMiIu",
            "Q0RPVEFVc2VyTXNnX1N0YXRzUGxheWVyS2lsbFNoYXJlEhYKDmRhbWFnZV90",
            "b19raWxsGAMgASgNEhgKEGVmZmVjdGl2ZV9oZWFsdGgYBCABKA0SEgoKZGVh",
            "dGhfdGltZRgFIAEoAhIVCglraWxsZXJfaWQYBiABKAU6Ai0xIosGCh5DRE9U",
            "QVVzZXJNc2dfU3RhdHNNYXRjaERldGFpbHMSMgoLaGVyb19sb29rdXAYASAD",
            "KAsyHS5DRE9UQVVzZXJNc2dfU3RhdHNIZXJvTG9va3VwEjsKDXJhZGlhbnRf",
            "c3RhdHMYAiADKAsyJC5DRE9UQVVzZXJNc2dfU3RhdHNUZWFtTWludXRlRGV0",
            "YWlscxI4CgpkaXJlX3N0YXRzGAMgAygLMiQuQ0RPVEFVc2VyTXNnX1N0YXRz",
            "VGVhbU1pbnV0ZURldGFpbHMSNQoNcmFkaWFudF9raWxscxgEIAMoCzIeLkNE",
            "T1RBVXNlck1zZ19TdGF0c0tpbGxEZXRhaWxzEjIKCmRpcmVfa2lsbHMYBSAD",
            "KAsyHi5DRE9UQVVzZXJNc2dfU3RhdHNLaWxsRGV0YWlscxJVCg1maWdodF9k",
            "ZXRhaWxzGAYgAygLMj4uQ0RPVEFVc2VyTXNnX1N0YXRzTWF0Y2hEZXRhaWxz",
            "LkNET1RBVXNlck1zZ19TdGF0c0ZpZ2h0RGV0YWlscxpwCiJDRE9UQVVzZXJN",
            "c2dfU3RhdHNGaWdodFRlYW1EZXRhaWxzEhQKDHBhcnRpY2lwYW50cxgBIAMo",
            "BRIOCgZkZWF0aHMYAiADKAUSEgoKZ29sZF9kZWx0YRgDIAEoDRIQCgh4cF9k",
            "ZWx0YRgEIAEoDRqJAgoeQ0RPVEFVc2VyTXNnX1N0YXRzRmlnaHREZXRhaWxz",
            "EhIKCnN0YXJ0X3RpbWUYASABKAISEAoIZW5kX3RpbWUYAiABKAISYQoVcmFk",
            "aWFudF9maWdodF9kZXRhaWxzGAMgASgLMkIuQ0RPVEFVc2VyTXNnX1N0YXRz",
            "TWF0Y2hEZXRhaWxzLkNET1RBVXNlck1zZ19TdGF0c0ZpZ2h0VGVhbURldGFp",
            "bHMSXgoSZGlyZV9maWdodF9kZXRhaWxzGAQgASgLMkIuQ0RPVEFVc2VyTXNn",
            "X1N0YXRzTWF0Y2hEZXRhaWxzLkNET1RBVXNlck1zZ19TdGF0c0ZpZ2h0VGVh",
            "bURldGFpbHMiOAoWQ0RPVEFVc2VyTXNnX01pbmlUYXVudBIeChJ0YXVudGlu",
            "Z19wbGF5ZXJfaWQYASABKAU6Ai0xIjAKGUNET1RBVXNlck1zZ19TcGVlY2hC",
            "dWJibGUSEwoLZGVzdHJveV9hbGwYASABKAgiawogQ0RPVEFVc2VyTXNnX0N1",
            "c3RvbUhlYWRlck1lc3NhZ2USFQoJcGxheWVyX2lkGAEgASgFOgItMRIQCghk",
            "dXJhdGlvbhgCIAEoAhIPCgdtZXNzYWdlGAMgASgJEg0KBXZhbHVlGAQgASgF",
            "InYKE0NNc2dIZXJvQWJpbGl0eVN0YXQSNwoJc3RhdF90eXBlGAEgASgOMg4u",
            "RUhlcm9TdGF0VHlwZToUa19FSGVyb1N0YXRUeXBlX05vbmUSEQoJaW50X3Zh",
            "bHVlGAIgASgFEhMKC2Zsb2F0X3ZhbHVlGAMgASgCImQKHENNc2dDb21iYXRB",
            "bmFseXplclBsYXllclN0YXQSEgoKYWNjb3VudF9pZBgBIAEoDRIwChJoZXJv",
            "X2FiaWxpdHlfc3RhdHMYAiADKAsyFC5DTXNnSGVyb0FiaWxpdHlTdGF0ImAK",
            "F0NNc2dDb21iYXRBbmFseXplclN0YXRzEhAKCG1hdGNoX2lkGAEgASgEEjMK",
            "DHBsYXllcl9zdGF0cxgCIAMoCzIdLkNNc2dDb21iYXRBbmFseXplclBsYXll",
            "clN0YXQiVwoWQ0RPVEFVc2VyTXNnX0JlYXN0Q2hhdBIMCgR0ZWFtGAEgASgN",
            "Eg4KBmZvcm1hdBgCIAEoCRIPCgdtZXNzYWdlGAMgASgJEg4KBnRhcmdldBgE",
            "IAEoCSJhCiRDRE9UQVVzZXJNc2dfQ3VzdG9tSHVkRWxlbWVudF9DcmVhdGUS",
            "EgoKZWxlbWVudF9pZBgBIAEoCRIXCg9sYXlvdXRfZmlsZW5hbWUYAiABKAkS",
            "DAoEZGF0YRgDIAEoDCJgCiRDRE9UQVVzZXJNc2dfQ3VzdG9tSHVkRWxlbWVu",
            "dF9Nb2RpZnkSEgoKZWxlbWVudF9pZBgBIAEoCRIWCg5tb2RpZnlfdmlzaWJs",
            "ZRgCIAEoCBIMCgRkYXRhGAMgASgMIjsKJUNET1RBVXNlck1zZ19DdXN0b21I",
            "dWRFbGVtZW50X0Rlc3Ryb3kSEgoKZWxlbWVudF9pZBgBIAEoCSJKCiJDRE9U",
            "QVVzZXJNc2dfQ29tcGVuZGl1bVN0YXRlUGxheWVyEhUKCXBsYXllcl9pZBgB",
            "IAEoBToCLTESDQoFbGV2ZWwYAiABKA0iXwocQ0RPVEFVc2VyTXNnX0NvbXBl",
            "bmRpdW1TdGF0ZRI/ChJjb21wZW5kaXVtX3BsYXllcnMYASADKAsyIy5DRE9U",
            "QVVzZXJNc2dfQ29tcGVuZGl1bVN0YXRlUGxheWVyIugBCh5DRE9UQVVzZXJN",
            "c2dfUHJvamVjdGlvbkFiaWxpdHkSFgoKYWJpbGl0eV9pZBgBIAEoBToCLTES",
            "HAoQY2FzdGVyX2VudF9pbmRleBgCIAEoBToCLTESEwoLY2FzdGVyX3RlYW0Y",
            "AyABKAUSEwoLY2hhbm5lbF9lbmQYBCABKAgSGwoGb3JpZ2luGAUgASgLMgsu",
            "Q01zZ1ZlY3RvchIZChF0cmFja19jYXN0ZXJfb25seRgGIAEoCBIQCghlbmRf",
            "dGltZRgHIAEoAhIcChB2aWN0aW1fZW50X2luZGV4GAggASgFOgItMSJhChxD",
            "RE9UQVVzZXJNc2dfUHJvamVjdGlvbkV2ZW50EjMKCGV2ZW50X2lkGAEgASgO",
            "MhEuRVByb2plY3Rpb25FdmVudDoOZVBFX0ZpcnN0Qmxvb2QSDAoEdGVhbRgC",
            "IAEoDSJKChRDRE9UQVVzZXJNc2dfWFBBbGVydBIVCglwbGF5ZXJfaWQYASAB",
            "KAU6Ai0xEhsKD3RhcmdldF9lbnRpbmRleBgCIAEoBToCLTEiiQEKHENET1RB",
            "VXNlck1zZ19UYWxlbnRUcmVlQWxlcnQSFQoJcGxheWVyX2lkGAEgASgFOgIt",
            "MRIbCg90YXJnZXRfZW50aW5kZXgYAiABKAU6Ai0xEhYKCmFiaWxpdHlfaWQY",
            "AyABKAU6Ai0xEgwKBHNsb3QYBCABKAUSDwoHbGVhcm5lZBgFIAEoCCIiCiBD",
            "RE9UQVVzZXJNc2dfVXBkYXRlUXVlc3RQcm9ncmVzcyK8AQoYQ0RPVEFVc2Vy",
            "TXNnX1F1ZXN0U3RhdHVzEhUKCXBsYXllcl9pZBgBIAIoBToCLTESEAoIcXVl",
            "c3RfaWQYAiABKA0SFAoMY2hhbGxlbmdlX2lkGAMgASgNEhAKCHByb2dyZXNz",
            "GAQgASgNEgwKBGdvYWwYBSABKA0SDQoFcXVlcnkYBiABKA0SFQoNZmFpbF9n",
            "YW1ldGltZRgHIAEoAhIbCg9pdGVtX2FiaWxpdHlfaWQYCCABKAU6Ai0xImUK",
            "HENET1RBVXNlck1zZ19TdWdnZXN0SGVyb1BpY2sSFQoJcGxheWVyX2lkGAEg",
            "AigFOgItMRIPCgdoZXJvX2lkGAIgASgFEgsKA2JhbhgDIAEoCBIQCghmYWNl",
            "dF9pZBgEIAEoDSJIChxDRE9UQVVzZXJNc2dfU3VnZ2VzdEhlcm9Sb2xlEhUK",
            "CXBsYXllcl9pZBgBIAIoBToCLTESEQoJaGVyb19yb2xlGAIgASgJIqcBCh9D",
            "RE9UQVVzZXJNc2dfS2lsbGNhbURhbWFnZVRha2VuEhUKCXBsYXllcl9pZBgB",
            "IAIoBToCLTESFAoMZGFtYWdlX3Rha2VuGAIgASgNEhEKCWl0ZW1fdHlwZRgD",
            "IAEoDRIbCg9pdGVtX2FiaWxpdHlfaWQYBCABKAU6Ai0xEhEKCWhlcm9fbmFt",
            "ZRgFIAEoCRIUCgxkYW1hZ2VfY29sb3IYBiABKAkiRQoeQ0RPVEFVc2VyTXNn",
            "X1NlbGVjdFBlbmFsdHlHb2xkEhUKCXBsYXllcl9pZBgBIAIoBToCLTESDAoE",
            "Y29zdBgCIAEoESJ+ChtDRE9UQVVzZXJNc2dfUm9sbERpY2VSZXN1bHQSFQoJ",
            "cGxheWVyX2lkGAEgASgFOgItMRIUCgxjaGFubmVsX3R5cGUYAiABKA0SEAoI",
            "cm9sbF9taW4YAyABKA0SEAoIcm9sbF9tYXgYBCABKA0SDgoGcmVzdWx0GAUg",
            "ASgNIloKG0NET1RBVXNlck1zZ19GbGlwQ29pblJlc3VsdBIVCglwbGF5ZXJf",
            "aWQYASABKAU6Ai0xEhQKDGNoYW5uZWxfdHlwZRgCIAEoDRIOCgZyZXN1bHQY",
            "AyABKAgiQAonQ0RPVEFVc2VyTWVzc2FnZV9SZXF1ZXN0SXRlbVN1Z2dlc3Rp",
            "b25zEhUKCXBsYXllcl9pZBgBIAEoBToCLTEiUgojQ0RPVEFVc2VyTWVzc2Fn",
            "ZV9UZWFtQ2FwdGFpbkNoYW5nZWQSDAoEdGVhbRgBIAEoDRIdChFjYXB0YWlu",
            "X3BsYXllcl9pZBgCIAEoBToCLTEiXAoeQ0RPVEFVc2VyTXNnX0NoYXRXaGVl",
            "bENvb2xkb3duEh4KCm1lc3NhZ2VfaWQYASABKA06CjQyOTQ5NjcyOTUSGgoS",
            "Y29vbGRvd25fcmVtYWluaW5nGAIgASgCIowBCh5DRE9UQVVzZXJNc2dfSGVy",
            "b1JlbGljUHJvZ3Jlc3MSFwoPaGVyb19yZWxpY190eXBlGAEgASgNEg0KBXZh",
            "bHVlGAIgASgNEhkKB2VoYW5kbGUYAyABKA06CDE2Nzc3MjE1EhAKCGV2ZW50",
            "X2lkGAQgASgNEhUKDXZhbHVlX2Rpc3BsYXkYBSABKAIisAEKJ0NET1RBVXNl",
            "ck1zZ19BYmlsaXR5RHJhZnRSZXF1ZXN0QWJpbGl0eRIVCglwbGF5ZXJfaWQY",
            "ASABKAU6Ai0xEiAKFHJlcXVlc3RlZF9hYmlsaXR5X2lkGAIgASgFOgItMRIU",
            "CgxjdHJsX2lzX2Rvd24YAyABKAgSGQoRcmVxdWVzdGVkX2hlcm9faWQYBCAB",
            "KAUSGwoTcmVxdWVzdGVkX2ZhY2V0X2tleRgFIAEoBCKMAQoZQ0RPVEFVc2Vy",
            "TXNnX0RhbWFnZVJlcG9ydBIVCglwbGF5ZXJfaWQYASABKAU6Ai0xEhYKDnRh",
            "cmdldF9oZXJvX2lkGAIgASgFEhYKDnNvdXJjZV9oZXJvX2lkGAMgASgFEhUK",
            "DWRhbWFnZV9hbW91bnQYBCABKAUSEQoJYnJvYWRjYXN0GAUgASgIIrABChlD",
            "RE9UQVVzZXJNc2dfU2FsdXRlUGxheWVyEhwKEHNvdXJjZV9wbGF5ZXJfaWQY",
            "ASABKAU6Ai0xEhwKEHRhcmdldF9wbGF5ZXJfaWQYAiABKAU6Ai0xEhIKCnRp",
            "cF9hbW91bnQYAyABKA0SEAoIZXZlbnRfaWQYBCABKA0SGAoQY3VzdG9tX3Rp",
            "cF9zdHlsZRgFIAEoCRIXCg9udW1fcmVjZW50X3RpcHMYBiABKA0icgoXQ0RP",
            "VEFVc2VyTXNnX0dpZnRQbGF5ZXISHAoQc291cmNlX3BsYXllcl9pZBgBIAEo",
            "BToCLTESHAoQdGFyZ2V0X3BsYXllcl9pZBgCIAEoBToCLTESGwoTZ2lmdF9p",
            "dGVtX2RlZl9pbmRleBgDIAEoDSJAChVDRE9UQVVzZXJNc2dfVGlwQWxlcnQS",
            "FQoJcGxheWVyX2lkGAEgASgFOgItMRIQCgh0aXBfdGV4dBgCIAEoCSJwCh1D",
            "RE9UQVVzZXJNc2dfUmVwbGFjZVF1ZXJ5VW5pdBIVCglwbGF5ZXJfaWQYASAC",
            "KAU6Ai0xEhsKD3NvdXJjZV9lbnRpbmRleBgCIAEoBToCLTESGwoPdGFyZ2V0",
            "X2VudGluZGV4GAMgASgFOgItMSJiChpDRE9UQVVzZXJNc2dfRVNBcmNhbmFD",
            "b21ibxIZCgdlaGFuZGxlGAEgASgNOggxNjc3NzIxNRITCgtjb21ib19jb3Vu",
            "dBgCIAEoDRIUCgxhcmNhbmFfbGV2ZWwYAyABKA0iagohQ0RPVEFVc2VyTXNn",
            "X0VTQXJjYW5hQ29tYm9TdW1tYXJ5EhkKB2VoYW5kbGUYASABKA06CDE2Nzc3",
            "MjE1EhMKC2NvbWJvX2NvdW50GAIgASgNEhUKDWRhbWFnZV9hbW91bnQYAyAB",
            "KA0igQEKGkNET1RBVXNlck1zZ19PTUFyY2FuYUNvbWJvEhkKB2VoYW5kbGUY",
            "ASABKA06CDE2Nzc3MjE1EhgKEG11bHRpY2FzdF9hbW91bnQYAiABKA0SFAoM",
            "YXJjYW5hX2xldmVsGAMgASgNEhgKEG11bHRpY2FzdF9jaGFuY2UYBCABKA0i",
            "iwEKHkNET1RBVXNlck1zZ19IaWdoRml2ZUNvbXBsZXRlZBIXCgtwbGF5ZXJf",
            "aWRfMRgBIAEoBToCLTESFwoLcGxheWVyX2lkXzIYAiABKAU6Ai0xEhkKEXNw",
            "ZWNpYWxfaGlnaF9maXZlGAMgASgIEhwKEHNwZWNpYWxfZW50aW5kZXgYBCAB",
            "KAU6Ai0xIjkKIENET1RBVXNlck1zZ19IaWdoRml2ZUxlZnRIYW5naW5nEhUK",
            "CXBsYXllcl9pZBgBIAEoBToCLTEiagoaQ0RPVEFVc2VyTXNnX1Nob3ZlbFVu",
            "ZWFydGgSFQoJcGxheWVyX2lkGAEgASgFOgItMRIQCghhbGxfY2hhdBgCIAEo",
            "CBIRCglsb2NzdHJpbmcYAyABKAkSEAoIcXVhbnRpdHkYBCABKA0i/AEKGUNE",
            "T1RBVXNlck1zZ19BbGxTdGFyRXZlbnQSHAoQc291cmNlX3BsYXllcl9pZBgB",
            "IAEoBToCLTESHAoQdGFyZ2V0X3BsYXllcl9pZBgCIAEoBToCLTESFAoMcG9p",
            "bnRfYW1vdW50GAMgASgNEhAKCGV2ZW50X2lkGAQgASgNEj0KDXBsYXllcl9z",
            "Y29yZXMYBSADKAsyJi5DRE9UQVVzZXJNc2dfQWxsU3RhckV2ZW50LlBsYXll",
            "clNjb3JlGjwKC1BsYXllclNjb3JlEhUKCXBsYXllcl9pZBgBIAEoBToCLTES",
            "FgoOc2NvcmVfc2Fuc19rZGEYAiABKA0iPgofQ0RPVEFVc2VyTXNnX1F1ZXVl",
            "ZE9yZGVyUmVtb3ZlZBIbChN1bml0X29yZGVyX3NlcXVlbmNlGAEgAygNIsYB",
            "ChtDRE9UQVVzZXJNc2dfRGVidWdDaGFsbGVuZ2USFgoOY2hhbGxlbmdlX3R5",
            "cGUYASACKA0SGgoSY2hhbGxlbmdlX3F1ZXJ5X2lkGAIgAigNEhAKCGV2ZW50",
            "X2lkGAMgAigNEhMKC2luc3RhbmNlX2lkGAQgASgNEhcKD2NoYWxsZW5nZV92",
            "YXJfMBgFIAEoDRIXCg9jaGFsbGVuZ2VfdmFyXzEYBiABKA0SGgoSY2hhbGxl",
            "bmdlX21heF9yYW5rGAcgASgNItUBCh1DRE9UQVVzZXJNc2dfRm91bmROZXV0",
            "cmFsSXRlbRIVCglwbGF5ZXJfaWQYASABKAU6Ai0xEhsKD2l0ZW1fYWJpbGl0",
            "eV9pZBgCIAEoBToCLTESEQoJaXRlbV90aWVyGAMgASgNEhcKD3RpZXJfaXRl",
            "bV9jb3VudBgEIAEoDRIiChZlbmhhbmNlbWVudF9hYmlsaXR5X2lkGAUgASgF",
            "OgItMRIZChFlbmhhbmNlbWVudF9sZXZlbBgGIAEoBRIVCg10cmlua2V0X2xl",
            "dmVsGAcgASgFIk0KHENET1RBVXNlck1zZ19PdXRwb3N0Q2FwdHVyZWQSHAoQ",
            "b3V0cG9zdF9lbnRpbmRleBgBIAEoBToCLTESDwoHdGVhbV9pZBgCIAEoDSJD",
            "Ch1DRE9UQVVzZXJNc2dfT3V0cG9zdEdyYW50ZWRYUBIPCgd0ZWFtX2lkGAEg",
            "ASgNEhEKCXhwX2Ftb3VudBgCIAEoDSI/Ch1DRE9UQVVzZXJNc2dfTW92ZUNh",
            "bWVyYVRvVW5pdBIeCgx1bml0X2VoYW5kbGUYASABKA06CDE2Nzc3MjE1IpgB",
            "Ch5DRE9UQVVzZXJNc2dfUGF1c2VNaW5pZ2FtZURhdGESOgoJZGF0YV9iaXRz",
            "GAEgAygLMicuQ0RPVEFVc2VyTXNnX1BhdXNlTWluaWdhbWVEYXRhLkRhdGFC",
            "aXQaOgoHRGF0YUJpdBINCgVpbmRleBgBIAEoDRIMCgRkYXRhGAIgASgFEhIK",
            "CmRhdGFfZXh0cmEYAyABKAMipQIKJ0NET1RBVXNlck1zZ19WZXJzdXNTY2Vu",
            "ZV9QbGF5ZXJCZWhhdmlvchIVCglwbGF5ZXJfaWQYASABKAU6Ai0xElMKCGJl",
            "aGF2aW9yGAIgASgOMh8uRURPVEFWZXJzdXNTY2VuZVBsYXllckJlaGF2aW9y",
            "OiBWU19QTEFZRVJfQkVIQVZJT1JfUExBWV9BQ1RJVklUWRIwCg1wbGF5X2Fj",
            "dGl2aXR5GAMgASgLMhkuVmVyc3VzU2NlbmVfUGxheUFjdGl2aXR5EioKCmNo",
            "YXRfd2hlZWwYBCABKAsyFi5WZXJzdXNTY2VuZV9DaGF0V2hlZWwSMAoNcGxh",
            "eWJhY2tfcmF0ZRgFIAEoCzIZLlZlcnN1c1NjZW5lX1BsYXliYWNrUmF0ZSJ+",
            "Ch5DRE9UQVVzZXJNc2dfUW9QX0FyY2FuYVN1bW1hcnkSGQoHZWhhbmRsZRgB",
            "IAEoDToIMTY3NzcyMTUSFAoMYXJjYW5hX2xldmVsGAIgASgNEhMKC3BsYXll",
            "cnNfaGl0GAMgASgNEhYKDnBsYXllcnNfa2lsbGVkGAQgASgNIlIKHkNET1RB",
            "VXNlck1zZ19Ib3RQb3RhdG9fQ3JlYXRlZBIXCgtwbGF5ZXJfaWRfMRgBIAEo",
            "BToCLTESFwoLcGxheWVyX2lkXzIYAiABKAU6Ai0xIjgKH0NET1RBVXNlck1z",
            "Z19Ib3RQb3RhdG9fRXhwbG9kZWQSFQoJcGxheWVyX2lkGAEgASgFOgItMSJj",
            "Ch9DRE9UQVVzZXJNc2dfV0tfQXJjYW5hX1Byb2dyZXNzEhkKB2VoYW5kbGUY",
            "ASABKA06CDE2Nzc3MjE1EhQKDGFyY2FuYV9sZXZlbBgCIAEoDRIPCgdoZXJv",
            "X2lkGAMgASgFIo4ECiRDRE9UQVVzZXJNc2dfR3VpbGRDaGFsbGVuZ2VfUHJv",
            "Z3Jlc3MSTQoPcGxheWVyX3Byb2dyZXNzGAEgAygLMjQuQ0RPVEFVc2VyTXNn",
            "X0d1aWxkQ2hhbGxlbmdlX1Byb2dyZXNzLlBsYXllclByb2dyZXNzEhAKCGd1",
            "aWxkX2lkGAIgASgNEh0KFWNoYWxsZW5nZV9pbnN0YW5jZV9pZBgDIAEoDRIb",
            "ChNjaGFsbGVuZ2VfcGFyYW1ldGVyGAQgASgNEmYKDmNoYWxsZW5nZV90eXBl",
            "GAUgASgOMjQuQ0RPVEFVc2VyTXNnX0d1aWxkQ2hhbGxlbmdlX1Byb2dyZXNz",
            "LkVDaGFsbGVuZ2VUeXBlOhhrX0VDaGFsbGVuZ2VUeXBlX0ludmFsaWQSIwob",
            "Y2hhbGxlbmdlX3Byb2dyZXNzX2F0X3N0YXJ0GAcgASgNEhAKCGNvbXBsZXRl",
            "GAggASgIGjkKDlBsYXllclByb2dyZXNzEhUKCXBsYXllcl9pZBgBIAEoBToC",
            "LTESEAoIcHJvZ3Jlc3MYBiABKA0ibwoORUNoYWxsZW5nZVR5cGUSHAoYa19F",
            "Q2hhbGxlbmdlVHlwZV9JbnZhbGlkEAASIAoca19FQ2hhbGxlbmdlVHlwZV9D",
            "b29wZXJhdGl2ZRABEh0KGWtfRUNoYWxsZW5nZVR5cGVfQ29udHJhY3QQAiLJ",
            "AQodQ0RPVEFVc2VyTXNnX1dSQXJjYW5hUHJvZ3Jlc3MSGQoHZWhhbmRsZRgB",
            "IAEoDToIMTY3NzcyMTUSIAoOdGFyZ2V0X2VoYW5kbGUYAiABKA06CDE2Nzc3",
            "MjE1EhUKDWFycm93c19sYW5kZWQYAyABKA0SFAoMZGFtYWdlX2RlYWx0GAQg",
            "ASgNEhEKCXRhcmdldF9ocBgFIAEoDRIVCg10YXJnZXRfbWF4X2hwGAYgASgN",
            "EhQKDGFyY2FuYV9sZXZlbBgHIAEoDSLZAQocQ0RPVEFVc2VyTXNnX1dSQXJj",
            "YW5hU3VtbWFyeRIZCgdlaGFuZGxlGAEgASgNOggxNjc3NzIxNRIgCg50YXJn",
            "ZXRfZWhhbmRsZRgCIAEoDToIMTY3NzcyMTUSFQoNYXJyb3dzX2xhbmRlZBgD",
            "IAEoDRIUCgxkYW1hZ2VfZGVhbHQYBCABKA0SEQoJdGFyZ2V0X2hwGAUgASgN",
            "EhUKDXRhcmdldF9tYXhfaHAYBiABKA0SFAoMYXJjYW5hX2xldmVsGAcgASgN",
            "Eg8KB3N1Y2Nlc3MYCCABKAgiiwEKH0NET1RBVXNlck1zZ19FbXB0eUl0ZW1T",
            "bG90QWxlcnQSHAoQc291cmNlX3BsYXllcl9pZBgBIAEoBToCLTESHAoQdGFy",
            "Z2V0X3BsYXllcl9pZBgCIAEoBToCLTESEgoKc2xvdF9pbmRleBgDIAEoBRIY",
            "ChBjb29sZG93bl9zZWNvbmRzGAQgASgFIrMBChxDRE9UQVVzZXJNc2dfQWdo",
            "c1N0YXR1c0FsZXJ0EhwKEHNvdXJjZV9wbGF5ZXJfaWQYASABKAU6Ai0xEhwK",
            "EHRhcmdldF9wbGF5ZXJfaWQYAiABKAU6Ai0xEhsKD3RhcmdldF9lbnRpbmRl",
            "eBgDIAEoBToCLTESEgoKYWxlcnRfdHlwZRgEIAEoDRITCgtoYXNfc2NlcHRl",
            "chgFIAEoCBIRCgloYXNfc2hhcmQYBiABKAgiWgoZQ0RPVEFVc2VyTXNnX011",
            "dGVkUGxheWVycxIdChV0ZXh0X211dGVkX3BsYXllcl9pZHMYASADKAUSHgoW",
            "dm9pY2VfbXV0ZWRfcGxheWVyX2lkcxgCIAMoBSL+AgoaQ0RPVEFVc2VyTXNn",
            "X0NvbnRleHR1YWxUaXASDgoGdGlwX2lkGAEgASgFEhwKFHJlZmVyZW5jZWRf",
            "YWJpbGl0aWVzGAIgAygJEhgKEHJlZmVyZW5jZWRfdW5pdHMYAyADKAkSGAoQ",
            "cGFub3JhbWFfY2xhc3NlcxgEIAMoCRIYChBmb3JjZV9hbm5vdGF0aW9uGAUg",
            "ASgIEg8KB3ZhcmlhbnQYBiABKAUSEQoJaW50X3BhcmFtGAcgASgFEhIKCmlu",
            "dF9wYXJhbTIYCCABKAUSEwoLZmxvYXRfcGFyYW0YCSABKAISFAoMZmxvYXRf",
            "cGFyYW0yGAogASgCEhQKDHN0cmluZ19wYXJhbRgLIAEoCRIVCg1zdHJpbmdf",
            "cGFyYW0yGAwgASgJEhkKEXRpcF90ZXh0X292ZXJyaWRlGA0gASgJEh8KF3Rp",
            "cF9hbm5vdGF0aW9uX292ZXJyaWRlGA4gASgJEhgKEHBhbm9yYW1hX3NuaXBw",
            "ZXQYDyABKAkiZAoYQ0RPVEFVc2VyTXNnX0NoYXRNZXNzYWdlEhwKEHNvdXJj",
            "ZV9wbGF5ZXJfaWQYASABKAU6Ai0xEhQKDGNoYW5uZWxfdHlwZRgCIAEoDRIU",
            "CgxtZXNzYWdlX3RleHQYAyABKAkiYwolQ0RPVEFVc2VyTXNnX1JvY2tQYXBl",
            "clNjaXNzb3JzU3RhcnRlZBIcChBwbGF5ZXJfaWRfc291cmNlGAEgASgFOgIt",
            "MRIcChBwbGF5ZXJfaWRfdGFyZ2V0GAIgASgFOgItMSKMAQomQ0RPVEFVc2Vy",
            "TXNnX1JvY2tQYXBlclNjaXNzb3JzRmluaXNoZWQSFwoLcGxheWVyX2lkXzEY",
            "ASABKAU6Ai0xEhcKC3BsYXllcl9pZF8yGAIgASgFOgItMRIXCg9wbGF5ZXJf",
            "MV9jaG9pY2UYAyABKAUSFwoPcGxheWVyXzJfY2hvaWNlGAQgASgFIlQKH0NE",
            "T1RBVXNlck1zZ19EdWVsT3Bwb25lbnRLaWxsZWQSGAoQcGxheWVyX2lkX3dp",
            "bm5lchgBIAEoBRIXCg9wbGF5ZXJfaWRfbG9zZXIYAiABKAUiRQoZQ0RPVEFV",
            "c2VyTXNnX0R1ZWxBY2NlcHRlZBITCgtwbGF5ZXJfaWRfMRgBIAEoBRITCgtw",
            "bGF5ZXJfaWRfMhgCIAEoBSI9ChpDRE9UQVVzZXJNc2dfRHVlbFJlcXVlc3Rl",
            "ZBIfChNwbGF5ZXJfaWRfcmVxdWVzdG9yGAEgASgFOgItMSKqAQo0Q0RPVEFV",
            "c2VyTXNnX011ZXJ0YVJlbGVhc2VFdmVudF9Bc3NpZ25lZFRhcmdldEtpbGxl",
            "ZBIcChBwbGF5ZXJfaWRfa2lsbGVyGAEgAigFOgItMRIcChBwbGF5ZXJfaWRf",
            "dGFyZ2V0GAIgAigFOgItMRIOCgZwb2ludHMYAyACKAUSFAoMcG9pbnRzX3Rv",
            "dGFsGAQgAigFEhAKCGxhc3RfaGl0GAUgAigIIl4KI0NET1RBVXNlck1zZ19Q",
            "bGF5ZXJEcmFmdFN1Z2dlc3RQaWNrEhUKCXBsYXllcl9pZBgBIAEoBToCLTES",
            "IAoUc3VnZ2VzdGlvbl9wbGF5ZXJfaWQYAiABKAU6Ai0xImkKHENET1RBVXNl",
            "ck1zZ19QbGF5ZXJEcmFmdFBpY2sSHQoRcGxheWVyX2lkX2NhcHRhaW4YASAB",
            "KAU6Ai0xEhwKEHBsYXllcl9pZF90YXJnZXQYAiABKAU6Ai0xEgwKBHRlYW0Y",
            "AyABKAUiawoWQ0RPVEFVc2VyTXNnX0ZhY2V0UGluZxIVCglwbGF5ZXJfaWQY",
            "ASABKAU6Ai0xEhUKDWZhY2V0X3N0cmhhc2gYAiABKA0SEQoJZW50aXR5X2lk",
            "GAMgASgNEhAKCGFsbF9jaGF0GAQgASgIIlUKF0NET1RBVXNlck1zZ19Jbm5h",
            "dGVQaW5nEhUKCXBsYXllcl9pZBgBIAEoBToCLTESEQoJZW50aXR5X2lkGAIg",
            "ASgNEhAKCGFsbF9jaGF0GAMgASgIIiQKIkNET1RBVXNlck1zZ19OZXV0cmFs",
            "Q3JhZnRBdmFpbGFibGUieAoXQ0RPVEFVc2VyTXNnX1RpbWVyQWxlcnQSFQoJ",
            "cGxheWVyX2lkGAEgASgFOgItMRJGChB0aW1lcl9hbGVydF90eXBlGAIgASgO",
            "MhAuRVRpbWVyQWxlcnRUeXBlOhprX1RpbWVyQWxlcnRUeXBlX1Bvd2VyUnVu",
            "ZSKeAgoaQ0RPVEFVc2VyTXNnX01hZHN0b25lQWxlcnQSFQoJcGxheWVyX2lk",
            "GAEgASgFOgItMRIbCg90YXJnZXRfZW50aW5kZXgYAiABKAU6Ai0xEgwKBHRp",
            "ZXIYAyABKAUSWwoTbWFkc3RvbmVfYWxlcnRfdHlwZRgEIAEoDjIuLkNET1RB",
            "VXNlck1zZ19NYWRzdG9uZUFsZXJ0LkVNYWRzdG9uZUFsZXJ0VHlwZToOQ3Jh",
            "ZnRBdmFpbGFibGUSDQoFdmFsdWUYBSABKAUiUgoSRU1hZHN0b25lQWxlcnRU",
            "eXBlEhIKDkNyYWZ0QXZhaWxhYmxlEAASEAoMTmVlZE1hZHN0b25lEAESFgoS",
            "V2FpdGluZ0Zvck5leHRUaWVyEAIq/CYKEUVEb3RhVXNlck1lc3NhZ2VzEh8K",
            "GkRPVEFfVU1fQWRkVW5pdFRvU2VsZWN0aW9uENADEhgKE0RPVEFfVU1fQUlE",
            "ZWJ1Z0xpbmUQ0QMSFgoRRE9UQV9VTV9DaGF0RXZlbnQQ0gMSIAobRE9UQV9V",
            "TV9Db21iYXRIZXJvUG9zaXRpb25zENMDEhoKFURPVEFfVU1fQ29tYmF0TG9n",
            "RGF0YRDUAxIeChlET1RBX1VNX0NvbWJhdExvZ0J1bGtEYXRhENYDEiMKHkRP",
            "VEFfVU1fQ3JlYXRlTGluZWFyUHJvamVjdGlsZRDXAxIkCh9ET1RBX1VNX0Rl",
            "c3Ryb3lMaW5lYXJQcm9qZWN0aWxlENgDEiUKIERPVEFfVU1fRG9kZ2VUcmFj",
            "a2luZ1Byb2plY3RpbGVzENkDEh0KGERPVEFfVU1fR2xvYmFsTGlnaHRDb2xv",
            "chDaAxIhChxET1RBX1VNX0dsb2JhbExpZ2h0RGlyZWN0aW9uENsDEhsKFkRP",
            "VEFfVU1fSW52YWxpZENvbW1hbmQQ3AMSGQoURE9UQV9VTV9Mb2NhdGlvblBp",
            "bmcQ3QMSFAoPRE9UQV9VTV9NYXBMaW5lEN4DEhwKF0RPVEFfVU1fTWluaUtp",
            "bGxDYW1JbmZvEN8DEh4KGURPVEFfVU1fTWluaW1hcERlYnVnUG9pbnQQ4AMS",
            "GQoURE9UQV9VTV9NaW5pbWFwRXZlbnQQ4QMSHQoYRE9UQV9VTV9OZXZlcm1v",
            "cmVSZXF1aWVtEOIDEhoKFURPVEFfVU1fT3ZlcmhlYWRFdmVudBDjAxIfChpE",
            "T1RBX1VNX1NldE5leHRBdXRvYnV5SXRlbRDkAxIbChZET1RBX1VNX1NoYXJl",
            "ZENvb2xkb3duEOUDEiEKHERPVEFfVU1fU3BlY3RhdG9yUGxheWVyQ2xpY2sQ",
            "5gMSHAoXRE9UQV9VTV9UdXRvcmlhbFRpcEluZm8Q5wMSFgoRRE9UQV9VTV9V",
            "bml0RXZlbnQQ6AMSHAoXRE9UQV9VTV9QYXJ0aWNsZU1hbmFnZXIQ6QMSFAoP",
            "RE9UQV9VTV9Cb3RDaGF0EOoDEhUKEERPVEFfVU1fSHVkRXJyb3IQ6wMSGgoV",
            "RE9UQV9VTV9JdGVtUHVyY2hhc2VkEOwDEhEKDERPVEFfVU1fUGluZxDtAxIW",
            "ChFET1RBX1VNX0l0ZW1Gb3VuZBDuAxIiCh1ET1RBX1VNX0NoYXJhY3RlclNw",
            "ZWFrQ29uY2VwdBDvAxIXChJET1RBX1VNX1N3YXBWZXJpZnkQ8AMSFgoRRE9U",
            "QV9VTV9Xb3JsZExpbmUQ8QMSGwoWRE9UQV9VTV9Ub3VybmFtZW50RHJvcBDy",
            "AxIWChFET1RBX1VNX0l0ZW1BbGVydBDzAxIbChZET1RBX1VNX0hhbGxvd2Vl",
            "bkRyb3BzEPQDEhYKEURPVEFfVU1fQ2hhdFdoZWVsEPUDEh0KGERPVEFfVU1f",
            "UmVjZWl2ZWRYbWFzR2lmdBD2AxIgChtET1RBX1VNX1VwZGF0ZVNoYXJlZENv",
            "bnRlbnQQ9wMSHwoaRE9UQV9VTV9UdXRvcmlhbFJlcXVlc3RFeHAQ+AMSIAob",
            "RE9UQV9VTV9UdXRvcmlhbFBpbmdNaW5pbWFwEPkDEiIKHURPVEFfVU1fR2Ft",
            "ZXJ1bGVzU3RhdGVDaGFuZ2VkEPoDEhcKEkRPVEFfVU1fU2hvd1N1cnZleRD7",
            "AxIZChRET1RBX1VNX1R1dG9yaWFsRmFkZRD8AxIdChhET1RBX1VNX0FkZFF1",
            "ZXN0TG9nRW50cnkQ/QMSGgoVRE9UQV9VTV9TZW5kU3RhdFBvcHVwEP4DEhsK",
            "FkRPVEFfVU1fVHV0b3JpYWxGaW5pc2gQ/wMSHAoXRE9UQV9VTV9TZW5kUm9z",
            "aGFuUG9wdXAQgAQSHwoaRE9UQV9VTV9TZW5kR2VuZXJpY1Rvb2xUaXAQgQQS",
            "GgoVRE9UQV9VTV9TZW5kRmluYWxHb2xkEIIEEhYKEURPVEFfVU1fQ3VzdG9t",
            "TXNnEIMEEhkKFERPVEFfVU1fQ29hY2hIVURQaW5nEIQEEh4KGURPVEFfVU1f",
            "Q2xpZW50TG9hZEdyaWROYXYQhQQSGgoVRE9UQV9VTV9URV9Qcm9qZWN0aWxl",
            "EIYEEh0KGERPVEFfVU1fVEVfUHJvamVjdGlsZUxvYxCHBBIfChpET1RBX1VN",
            "X1RFX0RvdGFCbG9vZEltcGFjdBCIBBIdChhET1RBX1VNX1RFX1VuaXRBbmlt",
            "YXRpb24QiQQSIAobRE9UQV9VTV9URV9Vbml0QW5pbWF0aW9uRW5kEIoEEhgK",
            "E0RPVEFfVU1fQWJpbGl0eVBpbmcQiwQSHQoYRE9UQV9VTV9TaG93R2VuZXJp",
            "Y1BvcHVwEIwEEhYKEURPVEFfVU1fVm90ZVN0YXJ0EI0EEhcKEkRPVEFfVU1f",
            "Vm90ZVVwZGF0ZRCOBBIUCg9ET1RBX1VNX1ZvdGVFbmQQjwQSGQoURE9UQV9V",
            "TV9Cb29zdGVyU3RhdGUQkAQSHgoZRE9UQV9VTV9XaWxsUHVyY2hhc2VBbGVy",
            "dBCRBBIkCh9ET1RBX1VNX1R1dG9yaWFsTWluaW1hcFBvc2l0aW9uEJIEEhkK",
            "FERPVEFfVU1fQWJpbGl0eVN0ZWFsEJQEEh8KGkRPVEFfVU1fQ291cmllcktp",
            "bGxlZEFsZXJ0EJUEEhsKFkRPVEFfVU1fRW5lbXlJdGVtQWxlcnQQlgQSHgoZ",
            "RE9UQV9VTV9TdGF0c01hdGNoRGV0YWlscxCXBBIWChFET1RBX1VNX01pbmlU",
            "YXVudBCYBBIeChlET1RBX1VNX0J1eUJhY2tTdGF0ZUFsZXJ0EJkEEhkKFERP",
            "VEFfVU1fU3BlZWNoQnViYmxlEJoEEiAKG0RPVEFfVU1fQ3VzdG9tSGVhZGVy",
            "TWVzc2FnZRCbBBIaChVET1RBX1VNX1F1aWNrQnV5QWxlcnQQnAQSHQoYRE9U",
            "QV9VTV9TdGF0c0hlcm9EZXRhaWxzEJ0EEh0KGERPVEFfVU1fUHJlZGljdGlv",
            "blJlc3VsdBCeBBIaChVET1RBX1VNX01vZGlmaWVyQWxlcnQQnwQSGAoTRE9U",
            "QV9VTV9IUE1hbmFBbGVydBCgBBIXChJET1RBX1VNX0dseXBoQWxlcnQQoQQS",
            "FgoRRE9UQV9VTV9CZWFzdENoYXQQogQSJgohRE9UQV9VTV9TcGVjdGF0b3JQ",
            "bGF5ZXJVbml0T3JkZXJzEKMEEiQKH0RPVEFfVU1fQ3VzdG9tSHVkRWxlbWVu",
            "dF9DcmVhdGUQpAQSJAofRE9UQV9VTV9DdXN0b21IdWRFbGVtZW50X01vZGlm",
            "eRClBBIlCiBET1RBX1VNX0N1c3RvbUh1ZEVsZW1lbnRfRGVzdHJveRCmBBIc",
            "ChdET1RBX1VNX0NvbXBlbmRpdW1TdGF0ZRCnBBIeChlET1RBX1VNX1Byb2pl",
            "Y3Rpb25BYmlsaXR5EKgEEhwKF0RPVEFfVU1fUHJvamVjdGlvbkV2ZW50EKkE",
            "Eh4KGURPVEFfVU1fQ29tYmF0TG9nRGF0YUhMVFYQqgQSFAoPRE9UQV9VTV9Y",
            "UEFsZXJ0EKsEEiAKG0RPVEFfVU1fVXBkYXRlUXVlc3RQcm9ncmVzcxCsBBIa",
            "ChVET1RBX1VNX01hdGNoTWV0YWRhdGEQrQQSGQoURE9UQV9VTV9NYXRjaERl",
            "dGFpbHMQrgQSGAoTRE9UQV9VTV9RdWVzdFN0YXR1cxCvBBIcChdET1RBX1VN",
            "X1N1Z2dlc3RIZXJvUGljaxCwBBIcChdET1RBX1VNX1N1Z2dlc3RIZXJvUm9s",
            "ZRCxBBIfChpET1RBX1VNX0tpbGxjYW1EYW1hZ2VUYWtlbhCyBBIeChlET1RB",
            "X1VNX1NlbGVjdFBlbmFsdHlHb2xkELMEEhsKFkRPVEFfVU1fUm9sbERpY2VS",
            "ZXN1bHQQtAQSGwoWRE9UQV9VTV9GbGlwQ29pblJlc3VsdBC1BBIjCh5ET1RB",
            "X1VNX1JlcXVlc3RJdGVtU3VnZ2VzdGlvbnMQtgQSHwoaRE9UQV9VTV9UZWFt",
            "Q2FwdGFpbkNoYW5nZWQQtwQSJQogRE9UQV9VTV9TZW5kUm9zaGFuU3BlY3Rh",
            "dG9yUGhhc2UQuAQSHgoZRE9UQV9VTV9DaGF0V2hlZWxDb29sZG93bhC5BBIh",
            "ChxET1RBX1VNX0Rpc21pc3NBbGxTdGF0UG9wdXBzELoEEiEKHERPVEFfVU1f",
            "VEVfRGVzdHJveVByb2plY3RpbGUQuwQSHgoZRE9UQV9VTV9IZXJvUmVsaWNQ",
            "cm9ncmVzcxC8BBInCiJET1RBX1VNX0FiaWxpdHlEcmFmdFJlcXVlc3RBYmls",
            "aXR5EL0EEhUKEERPVEFfVU1fSXRlbVNvbGQQvgQSGQoURE9UQV9VTV9EYW1h",
            "Z2VSZXBvcnQQvwQSGQoURE9UQV9VTV9TYWx1dGVQbGF5ZXIQwAQSFQoQRE9U",
            "QV9VTV9UaXBBbGVydBDBBBIdChhET1RBX1VNX1JlcGxhY2VRdWVyeVVuaXQQ",
            "wgQSHwoaRE9UQV9VTV9FbXB0eVRlbGVwb3J0QWxlcnQQwwQSIwoeRE9UQV9V",
            "TV9NYXJzQXJlbmFPZkJsb29kQXR0YWNrEMQEEhoKFURPVEFfVU1fRVNBcmNh",
            "bmFDb21ibxDFBBIhChxET1RBX1VNX0VTQXJjYW5hQ29tYm9TdW1tYXJ5EMYE",
            "EiAKG0RPVEFfVU1fSGlnaEZpdmVMZWZ0SGFuZ2luZxDHBBIeChlET1RBX1VN",
            "X0hpZ2hGaXZlQ29tcGxldGVkEMgEEhoKFURPVEFfVU1fU2hvdmVsVW5lYXJ0",
            "aBDJBBIXChJET1RBX1VNX1JhZGFyQWxlcnQQywQSGQoURE9UQV9VTV9BbGxT",
            "dGFyRXZlbnQQzAQSHAoXRE9UQV9VTV9UYWxlbnRUcmVlQWxlcnQQzQQSHwoa",
            "RE9UQV9VTV9RdWV1ZWRPcmRlclJlbW92ZWQQzgQSGwoWRE9UQV9VTV9EZWJ1",
            "Z0NoYWxsZW5nZRDPBBIaChVET1RBX1VNX09NQXJjYW5hQ29tYm8Q0AQSHQoY",
            "RE9UQV9VTV9Gb3VuZE5ldXRyYWxJdGVtENEEEhwKF0RPVEFfVU1fT3V0cG9z",
            "dENhcHR1cmVkENIEEh0KGERPVEFfVU1fT3V0cG9zdEdyYW50ZWRYUBDTBBId",
            "ChhET1RBX1VNX01vdmVDYW1lcmFUb1VuaXQQ1AQSHgoZRE9UQV9VTV9QYXVz",
            "ZU1pbmlnYW1lRGF0YRDVBBInCiJET1RBX1VNX1ZlcnN1c1NjZW5lX1BsYXll",
            "ckJlaGF2aW9yENYEEh4KGURPVEFfVU1fUW9QX0FyY2FuYVN1bW1hcnkQ2AQS",
            "HgoZRE9UQV9VTV9Ib3RQb3RhdG9fQ3JlYXRlZBDZBBIfChpET1RBX1VNX0hv",
            "dFBvdGF0b19FeHBsb2RlZBDaBBIfChpET1RBX1VNX1dLX0FyY2FuYV9Qcm9n",
            "cmVzcxDbBBIkCh9ET1RBX1VNX0d1aWxkQ2hhbGxlbmdlX1Byb2dyZXNzENwE",
            "Eh0KGERPVEFfVU1fV1JBcmNhbmFQcm9ncmVzcxDdBBIcChdET1RBX1VNX1dS",
            "QXJjYW5hU3VtbWFyeRDeBBIfChpET1RBX1VNX0VtcHR5SXRlbVNsb3RBbGVy",
            "dBDfBBIcChdET1RBX1VNX0FnaHNTdGF0dXNBbGVydBDgBBIdChhET1RBX1VN",
            "X1BpbmdDb25maXJtYXRpb24Q4QQSGQoURE9UQV9VTV9NdXRlZFBsYXllcnMQ",
            "4gQSGgoVRE9UQV9VTV9Db250ZXh0dWFsVGlwEOMEEhgKE0RPVEFfVU1fQ2hh",
            "dE1lc3NhZ2UQ5AQSHQoYRE9UQV9VTV9OZXV0cmFsQ2FtcEFsZXJ0EOUEEiUK",
            "IERPVEFfVU1fUm9ja1BhcGVyU2Npc3NvcnNTdGFydGVkEOYEEiYKIURPVEFf",
            "VU1fUm9ja1BhcGVyU2Npc3NvcnNGaW5pc2hlZBDnBBIfChpET1RBX1VNX0R1",
            "ZWxPcHBvbmVudEtpbGxlZBDoBBIZChRET1RBX1VNX0R1ZWxBY2NlcHRlZBDp",
            "BBIaChVET1RBX1VNX0R1ZWxSZXF1ZXN0ZWQQ6gQSNAovRE9UQV9VTV9NdWVy",
            "dGFSZWxlYXNlRXZlbnRfQXNzaWduZWRUYXJnZXRLaWxsZWQQ6wQSIwoeRE9U",
            "QV9VTV9QbGF5ZXJEcmFmdFN1Z2dlc3RQaWNrEOwEEhwKF0RPVEFfVU1fUGxh",
            "eWVyRHJhZnRQaWNrEO0EEikKJERPVEFfVU1fVXBkYXRlTGluZWFyUHJvamVj",
            "dGlsZUNQRGF0YRDuBBIXChJET1RBX1VNX0dpZnRQbGF5ZXIQ7wQSFgoRRE9U",
            "QV9VTV9GYWNldFBpbmcQ8AQSFwoSRE9UQV9VTV9Jbm5hdGVQaW5nEPEEEhgK",
            "E0RPVEFfVU1fUm9zaGFuVGltZXIQ8gQSIgodRE9UQV9VTV9OZXV0cmFsQ3Jh",
            "ZnRBdmFpbGFibGUQ8wQSFwoSRE9UQV9VTV9UaW1lckFsZXJ0EPQEEhoKFURP",
            "VEFfVU1fTWFkc3RvbmVBbGVydBD1BBIlCiBET1RBX1VNX0NvdXJpZXJMZWZ0",
            "Rm91bnRhaW5BbGVydBD2BCqwIAoRRE9UQV9DSEFUX01FU1NBR0USIQoUQ0hB",
            "VF9NRVNTQUdFX0lOVkFMSUQQ////////////ARIaChZDSEFUX01FU1NBR0Vf",
            "SEVST19LSUxMEAASGgoWQ0hBVF9NRVNTQUdFX0hFUk9fREVOWRABEh4KGkNI",
            "QVRfTUVTU0FHRV9CQVJSQUNLU19LSUxMEAISGwoXQ0hBVF9NRVNTQUdFX1RP",
            "V0VSX0tJTEwQAxIbChdDSEFUX01FU1NBR0VfVE9XRVJfREVOWRAEEhsKF0NI",
            "QVRfTUVTU0FHRV9GSVJTVEJMT09EEAUSHAoYQ0hBVF9NRVNTQUdFX1NUUkVB",
            "S19LSUxMEAYSGAoUQ0hBVF9NRVNTQUdFX0JVWUJBQ0sQBxIWChJDSEFUX01F",
            "U1NBR0VfQUVHSVMQCBIcChhDSEFUX01FU1NBR0VfUk9TSEFOX0tJTEwQCRId",
            "ChlDSEFUX01FU1NBR0VfQ09VUklFUl9MT1NUEAoSIgoeQ0hBVF9NRVNTQUdF",
            "X0NPVVJJRVJfUkVTUEFXTkVEEAsSGwoXQ0hBVF9NRVNTQUdFX0dMWVBIX1VT",
            "RUQQDBIeChpDSEFUX01FU1NBR0VfSVRFTV9QVVJDSEFTRRANEhgKFENIQVRf",
            "TUVTU0FHRV9DT05ORUNUEA4SGwoXQ0hBVF9NRVNTQUdFX0RJU0NPTk5FQ1QQ",
            "DxIuCipDSEFUX01FU1NBR0VfRElTQ09OTkVDVF9XQUlUX0ZPUl9SRUNPTk5F",
            "Q1QQEBIqCiZDSEFUX01FU1NBR0VfRElTQ09OTkVDVF9USU1FX1JFTUFJTklO",
            "RxAREjEKLUNIQVRfTUVTU0FHRV9ESVNDT05ORUNUX1RJTUVfUkVNQUlOSU5H",
            "X1BMVVJBTBASEhoKFkNIQVRfTUVTU0FHRV9SRUNPTk5FQ1QQExIcChhDSEFU",
            "X01FU1NBR0VfUExBWUVSX0xFRlQQFBIeChpDSEFUX01FU1NBR0VfU0FGRV9U",
            "T19MRUFWRRAVEhwKGENIQVRfTUVTU0FHRV9SVU5FX1BJQ0tVUBAWEhwKGENI",
            "QVRfTUVTU0FHRV9SVU5FX0JPVFRMRRAXEhoKFkNIQVRfTUVTU0FHRV9SVU5F",
            "X0RFTlkQchIZChVDSEFUX01FU1NBR0VfSU5USEVCQUcQGBIbChdDSEFUX01F",
            "U1NBR0VfU0VDUkVUU0hPUBAZEiMKH0NIQVRfTUVTU0FHRV9JVEVNX0FVVE9Q",
            "VVJDSEFTRUQQGhIfChtDSEFUX01FU1NBR0VfSVRFTVNfQ09NQklORUQQGxId",
            "ChlDSEFUX01FU1NBR0VfU1VQRVJfQ1JFRVBTEBwSJQohQ0hBVF9NRVNTQUdF",
            "X0NBTlRfVVNFX0FDVElPTl9JVEVNEB0SGgoWQ0hBVF9NRVNTQUdFX0NBTlRQ",
            "QVVTRRAfEh0KGUNIQVRfTUVTU0FHRV9OT1BBVVNFU0xFRlQQIBIdChlDSEFU",
            "X01FU1NBR0VfQ0FOVFBBVVNFWUVUECESFwoTQ0hBVF9NRVNTQUdFX1BBVVNF",
            "RBAiEiIKHkNIQVRfTUVTU0FHRV9VTlBBVVNFX0NPVU5URE9XThAjEhkKFUNI",
            "QVRfTUVTU0FHRV9VTlBBVVNFRBAkEh4KGkNIQVRfTUVTU0FHRV9BVVRPX1VO",
            "UEFVU0VEECUSGgoWQ0hBVF9NRVNTQUdFX1lPVVBBVVNFRBAmEiAKHENIQVRf",
            "TUVTU0FHRV9DQU5UVU5QQVVTRVRFQU0QJxIiCh5DSEFUX01FU1NBR0VfVk9J",
            "Q0VfVEVYVF9CQU5ORUQQKRIuCipDSEFUX01FU1NBR0VfU1BFQ1RBVE9SU19X",
            "QVRDSElOR19USElTX0dBTUUQKhIgChxDSEFUX01FU1NBR0VfUkVQT1JUX1JF",
            "TUlOREVSECsSGgoWQ0hBVF9NRVNTQUdFX0VDT05fSVRFTRAsEhYKEkNIQVRf",
            "TUVTU0FHRV9UQVVOVBAtEhcKE0NIQVRfTUVTU0FHRV9SQU5ET00QLhIYChRD",
            "SEFUX01FU1NBR0VfUkRfVFVSThAvEiAKHENIQVRfTUVTU0FHRV9EUk9QX1JB",
            "VEVfQk9OVVMQMRIhCh1DSEFUX01FU1NBR0VfTk9fQkFUVExFX1BPSU5UUxAy",
            "Eh0KGUNIQVRfTUVTU0FHRV9ERU5JRURfQUVHSVMQMxIeChpDSEFUX01FU1NB",
            "R0VfSU5GT1JNQVRJT05BTBA0Eh0KGUNIQVRfTUVTU0FHRV9BRUdJU19TVE9M",
            "RU4QNRIdChlDSEFUX01FU1NBR0VfUk9TSEFOX0NBTkRZEDYSHAoYQ0hBVF9N",
            "RVNTQUdFX0lURU1fR0lGVEVEEDcSJwojQ0hBVF9NRVNTQUdFX0hFUk9fS0lM",
            "TF9XSVRIX0dSRUVWSUwQOBIoCiRDSEFUX01FU1NBR0VfSE9MRE9VVF9UT1dF",
            "Ul9ERVNUUk9ZRUQQORInCiNDSEFUX01FU1NBR0VfSE9MRE9VVF9XQUxMX0RF",
            "U1RST1lFRBA6EiYKIkNIQVRfTUVTU0FHRV9IT0xET1VUX1dBTExfRklOSVNI",
            "RUQQOxIpCiVDSEFUX01FU1NBR0VfUExBWUVSX0xFRlRfTElNSVRFRF9IRVJP",
            "ED4SMQotQ0hBVF9NRVNTQUdFX0FCQU5ET05fTElNSVRFRF9IRVJPX0VYUExB",
            "TkFUSU9OED8SKAokQ0hBVF9NRVNTQUdFX0RJU0NPTk5FQ1RfTElNSVRFRF9I",
            "RVJPEEASMwovQ0hBVF9NRVNTQUdFX0xPV19QUklPUklUWV9DT01QTEVURURf",
            "RVhQTEFOQVRJT04QQRIsCihDSEFUX01FU1NBR0VfUkVDUlVJVE1FTlRfRFJP",
            "UF9SQVRFX0JPTlVTEEISMQotQ0hBVF9NRVNTQUdFX0ZST1NUSVZVU19TSElO",
            "SU5HX0JPT1NURVJfQUNUSVZFEEMSIAocQ0hBVF9NRVNTQUdFX1BMQVlFUl9M",
            "RUZUX0FGSxBJEjIKLkNIQVRfTUVTU0FHRV9QTEFZRVJfTEVGVF9ESVNDT05O",
            "RUNURURfVE9PX0xPTkcQShIhCh1DSEFUX01FU1NBR0VfUExBWUVSX0FCQU5E",
            "T05FRBBLEiUKIUNIQVRfTUVTU0FHRV9QTEFZRVJfQUJBTkRPTkVEX0FGSxBM",
            "EjcKM0NIQVRfTUVTU0FHRV9QTEFZRVJfQUJBTkRPTkVEX0RJU0NPTk5FQ1RF",
            "RF9UT09fTE9ORxBNEiMKH0NIQVRfTUVTU0FHRV9XSUxMX05PVF9CRV9TQ09S",
            "RUQQThIqCiZDSEFUX01FU1NBR0VfV0lMTF9OT1RfQkVfU0NPUkVEX1JBTktF",
            "RBBPEisKJ0NIQVRfTUVTU0FHRV9XSUxMX05PVF9CRV9TQ09SRURfTkVUV09S",
            "SxBQEjIKLkNIQVRfTUVTU0FHRV9XSUxMX05PVF9CRV9TQ09SRURfTkVUV09S",
            "S19SQU5LRUQQURIpCiVDSEFUX01FU1NBR0VfQ0FOX1FVSVRfV0lUSE9VVF9B",
            "QkFORE9OEFISOgo2Q0hBVF9NRVNTQUdFX1JBTktFRF9HQU1FX1NUSUxMX1ND",
            "T1JFRF9MRUFWRVJTX0dFVF9MT1NTEFMSOAo0Q0hBVF9NRVNTQUdFX0FCQU5E",
            "T05fUkFOS0VEX0JFRk9SRV9GSVJTVF9CTE9PRF9QQVJUWRBUEiEKHUNIQVRf",
            "TUVTU0FHRV9DT01QRU5ESVVNX0xFVkVMEFUSKgomQ0hBVF9NRVNTQUdFX1ZJ",
            "Q1RPUllfUFJFRElDVElPTl9TVFJFQUsQVhIiCh5DSEFUX01FU1NBR0VfQVNT",
            "QVNTSU5fQU5OT1VOQ0UQVxIhCh1DSEFUX01FU1NBR0VfQVNTQVNTSU5fU1VD",
            "Q0VTUxBYEiAKHENIQVRfTUVTU0FHRV9BU1NBU1NJTl9ERU5JRUQQWRI3CjND",
            "SEFUX01FU1NBR0VfVklDVE9SWV9QUkVESUNUSU9OX1NJTkdMRV9VU0VSX0NP",
            "TkZJUk0QWhIcChhDSEFUX01FU1NBR0VfRUZGSUdZX0tJTEwQWxIrCidDSEFU",
            "X01FU1NBR0VfVk9JQ0VfVEVYVF9CQU5ORURfT1ZFUkZMT1cQXBIiCh5DSEFU",
            "X01FU1NBR0VfWUVBUl9CRUFTVF9LSUxMRUQQXRIgChxDSEFUX01FU1NBR0Vf",
            "UEFVU0VfQ09VTlRET1dOEF4SHgoaQ0hBVF9NRVNTQUdFX0NPSU5TX1dBR0VS",
            "RUQQXxIjCh9DSEFUX01FU1NBR0VfSEVST19OT01JTkFURURfQkFOEGASHAoY",
            "Q0hBVF9NRVNTQUdFX0hFUk9fQkFOTkVEEGESHwobQ0hBVF9NRVNTQUdFX0hF",
            "Uk9fQkFOX0NPVU5UEGISHgoaQ0hBVF9NRVNTQUdFX1JJVkVSX1BBSU5URUQQ",
            "YxIaChZDSEFUX01FU1NBR0VfU0NBTl9VU0VEEGQSHgoaQ0hBVF9NRVNTQUdF",
            "X1NIUklORV9LSUxMRUQQZRIiCh5DSEFUX01FU1NBR0VfV0FHRVJfVE9LRU5f",
            "U1BFTlQQZhIbChdDSEFUX01FU1NBR0VfUkFOS19XQUdFUhBnEiQKIENIQVRf",
            "TUVTU0FHRV9ORVdfUExBWUVSX1JFTUlOREVSEGgSJQohQ0hBVF9NRVNTQUdF",
            "X09CU0VSVkVSX1dBUkRfS0lMTEVEEGkSIwofQ0hBVF9NRVNTQUdFX1NFTlRS",
            "WV9XQVJEX0tJTExFRBBqEi0KKUNIQVRfTUVTU0FHRV9JVEVNX1BMQUNFRF9J",
            "Tl9ORVVUUkFMX1NUQVNIEGsSJAogQ0hBVF9NRVNTQUdFX0hFUk9fQ0hPSUNF",
            "X0lOVkFMSUQQbBIXChNDSEFUX01FU1NBR0VfQk9VTlRZEG0SJAogQ0hBVF9N",
            "RVNTQUdFX0FCSUxJVFlfRFJBRlRfU1RBUlQQbhIhCh1DSEFUX01FU1NBR0Vf",
            "SEVST19GT1VORF9DQU5EWRBvEicKI0NIQVRfTUVTU0FHRV9BQklMSVRZX0RS",
            "QUZUX1JBTkRPTUVEEHASKAokQ0hBVF9NRVNTQUdFX1BSSVZBVEVfQ09BQ0hf",
            "Q09OTkVDVEVEEHESJQohQ0hBVF9NRVNTQUdFX0NBTlRfUEFVU0VfVE9PX0VB",
            "UkxZEHMSJwojQ0hBVF9NRVNTQUdFX0hFUk9fS0lMTF9XSVRIX1BFTkdVSU4Q",
            "dBIeChpDSEFUX01FU1NBR0VfTUlOSUJPU1NfS0lMTBB1EigKJENIQVRfTUVT",
            "U0FHRV9QTEFZRVJfSU5fR0FNRV9CQU5fVEVYVBB2Eh8KG0NIQVRfTUVTU0FH",
            "RV9CQU5ORVJfUExBTlRFRBB3EioKJkNIQVRfTUVTU0FHRV9BTENIRU1JU1Rf",
            "R1JBTlRFRF9TQ0VQVEVSEHgSIgoeQ0hBVF9NRVNTQUdFX1BST1RFQ1RPUl9T",
            "UEFXTkVEEHkSHAoYQ0hBVF9NRVNTQUdFX0NSQUZUSU5HX1hQEHoSHAoYQ0hB",
            "VF9NRVNTQUdFX1JPU0hBTl9ST0FSEHsqsgEKHURPVEFfTk9fQkFUVExFX1BP",
            "SU5UU19SRUFTT05TEiUKIU5PX0JBVFRMRV9QT0lOVFNfV1JPTkdfTE9CQllf",
            "VFlQRRABEiIKHk5PX0JBVFRMRV9QT0lOVFNfUFJBQ1RJQ0VfQk9UUxACEiMK",
            "H05PX0JBVFRMRV9QT0lOVFNfQ0hFQVRTX0VOQUJMRUQQAxIhCh1OT19CQVRU",
            "TEVfUE9JTlRTX0xPV19QUklPUklUWRAEKs8BChdET1RBX0NIQVRfSU5GT1JN",
            "QVRJT05BTBIhCh1JTkZPX0NPT1BfQkFUVExFX1BPSU5UU19SVUxFUxABEiMK",
            "H0lORk9fRlJPU1RJVlVTX0FCQU5ET05fUkVNSU5ERVIQAhIYChRJTkZPX1JB",
            "TktFRF9SRU1JTkRFUhADEisKJ0lORk9fQ09PUF9MT1dfUFJJT1JJVFlfUEFT",
            "U0lWRV9SRU1JTkRFUhAEEiUKIUlORk9fQ1VTVE9NX0dBTUVfUEVOQUxUWV9S",
            "RU1JTkRFUhAFKuADChZET1RBX0FCSUxJVFlfUElOR19UWVBFEhYKEkFCSUxJ",
            "VFlfUElOR19SRUFEWRABEhUKEUFCSUxJVFlfUElOR19NQU5BEAISGQoVQUJJ",
            "TElUWV9QSU5HX0NPT0xET1dOEAMSFgoSQUJJTElUWV9QSU5HX0VORU1ZEAQS",
            "GgoWQUJJTElUWV9QSU5HX1VOTEVBUk5FRBAFEhsKF0FCSUxJVFlfUElOR19J",
            "TkJBQ0tQQUNLEAYSGAoUQUJJTElUWV9QSU5HX0lOU1RBU0gQBxIaChZBQklM",
            "SVRZX1BJTkdfT05DT1VSSUVSEAgSFQoRQUJJTElUWV9QSU5HX0FMTFkQCRIc",
            "ChhBQklMSVRZX1BJTkdfTEVBUk5fUkVBRFkQChIbChdBQklMSVRZX1BJTkdf",
            "V0lMTF9MRUFSThALEh0KGUFCSUxJVFlfUElOR19GVVRVUkVfTEVBUk4QDBIe",
            "ChpBQklMSVRZX1BJTkdfTkVVVFJBTF9PRkZFUhANEiAKHEFCSUxJVFlfUElO",
            "R19ORVVUUkFMX1JFUVVFU1QQDhIeChpBQklMSVRZX1BJTkdfTkVVVFJBTF9F",
            "UVVJUBAPEiIKHkFCSUxJVFlfUElOR19JTkNPVVJJRVJCQUNLUEFDSxAQKowC",
            "ChdET1RBX1JFUExBWV9TVEFURV9FVkVOVBImCiJET1RBX1JFUExBWV9TVEFU",
            "RV9FVkVOVF9HQU1FX1NUQVJUEAESKQolRE9UQV9SRVBMQVlfU1RBVEVfRVZF",
            "TlRfU1RBUlRJTkdfSE9SThACEicKI0RPVEFfUkVQTEFZX1NUQVRFX0VWRU5U",
            "X0ZJUlNUX0JMT09EEAMSJAogRE9UQV9SRVBMQVlfU1RBVEVfRVZFTlRfU0hP",
            "V0NBU0UQBBIlCiFET1RBX1JFUExBWV9TVEFURV9FVkVOVF9QT1NUX0dBTUUQ",
            "BRIoCiRET1RBX1JFUExBWV9TVEFURV9FVkVOVF9XQUlUX0ZPUl9NQVAQBirl",
            "AQoTRURvdGFFbnRpdHlNZXNzYWdlcxIUChBET1RBX1VOSVRfU1BFRUNIEAAS",
            "GQoVRE9UQV9VTklUX1NQRUVDSF9NVVRFEAESGQoVRE9UQV9VTklUX0FERF9H",
            "RVNUVVJFEAISHAoYRE9UQV9VTklUX1JFTU9WRV9HRVNUVVJFEAMSIQodRE9U",
            "QV9VTklUX1JFTU9WRV9BTExfR0VTVFVSRVMQBBIaChZET1RBX1VOSVRfRkFE",
            "RV9HRVNUVVJFEAYSJQohRE9UQV9VTklUX1NQRUVDSF9DTElFTlRTSURFX1JV",
            "TEVTEAcqxAUKE0RPVEFfT1ZFUkhFQURfQUxFUlQSFwoTT1ZFUkhFQURfQUxF",
            "UlRfR09MRBAAEhcKE09WRVJIRUFEX0FMRVJUX0RFTlkQARIbChdPVkVSSEVB",
            "RF9BTEVSVF9DUklUSUNBTBACEhUKEU9WRVJIRUFEX0FMRVJUX1hQEAMSJQoh",
            "T1ZFUkhFQURfQUxFUlRfQk9OVVNfU1BFTExfREFNQUdFEAQSFwoTT1ZFUkhF",
            "QURfQUxFUlRfTUlTUxAFEhkKFU9WRVJIRUFEX0FMRVJUX0RBTUFHRRAGEhgK",
            "FE9WRVJIRUFEX0FMRVJUX0VWQURFEAcSGAoUT1ZFUkhFQURfQUxFUlRfQkxP",
            "Q0sQCBImCiJPVkVSSEVBRF9BTEVSVF9CT05VU19QT0lTT05fREFNQUdFEAkS",
            "FwoTT1ZFUkhFQURfQUxFUlRfSEVBTBAKEhsKF09WRVJIRUFEX0FMRVJUX01B",
            "TkFfQUREEAsSHAoYT1ZFUkhFQURfQUxFUlRfTUFOQV9MT1NTEAwSIAocT1ZF",
            "UkhFQURfQUxFUlRfTUFHSUNBTF9CTE9DSxAQEiIKHk9WRVJIRUFEX0FMRVJU",
            "X0lOQ09NSU5HX0RBTUFHRRAREiIKHk9WRVJIRUFEX0FMRVJUX09VVEdPSU5H",
            "X0RBTUFHRRASEiEKHU9WRVJIRUFEX0FMRVJUX0RJU0FCTEVfUkVTSVNUEBMS",
            "GAoUT1ZFUkhFQURfQUxFUlRfREVBVEgQFBIaChZPVkVSSEVBRF9BTEVSVF9C",
            "TE9DS0VEEBUSIAocT1ZFUkhFQURfQUxFUlRfSVRFTV9SRUNFSVZFRBAWEhgK",
            "FE9WRVJIRUFEX0FMRVJUX1NIQVJEEBcSHgoaT1ZFUkhFQURfQUxFUlRfREVB",
            "RExZX0JMT1cQGBIdChlPVkVSSEVBRF9BTEVSVF9GT1JDRV9NSVNTEBkqawoR",
            "RE9UQV9ST1NIQU5fUEhBU0USFwoTa19TUlNQX1JPU0hBTl9BTElWRRAAEhwK",
            "GGtfU1JTUF9ST1NIQU5fQkFTRV9USU1FUhABEh8KG2tfU1JTUF9ST1NIQU5f",
            "VklTSUJMRV9USU1FUhACKoEEChZET1RBX1BPU0lUSU9OX0NBVEVHT1JZEhYK",
            "EkRPVEFfUE9TSVRJT05fTk9ORRAAEh0KGURPVEFfUE9TSVRJT05fQk9UVE9N",
            "X0xBTkUQARIaChZET1RBX1BPU0lUSU9OX01JRF9MQU5FEAISGgoWRE9UQV9Q",
            "T1NJVElPTl9UT1BfTEFORRADEiAKHERPVEFfUE9TSVRJT05fUkFESUFOVF9K",
            "VU5HTEUQBBIdChlET1RBX1BPU0lUSU9OX0RJUkVfSlVOR0xFEAUSIgoeRE9U",
            "QV9QT1NJVElPTl9SQURJQU5UX0FOQ0lFTlRTEAYSHwobRE9UQV9QT1NJVElP",
            "Tl9ESVJFX0FOQ0lFTlRTEAcSJQohRE9UQV9QT1NJVElPTl9SQURJQU5UX1NF",
            "Q1JFVF9TSE9QEAgSIgoeRE9UQV9QT1NJVElPTl9ESVJFX1NFQ1JFVF9TSE9Q",
            "EAkSFwoTRE9UQV9QT1NJVElPTl9SSVZFUhAKEhwKGERPVEFfUE9TSVRJT05f",
            "Uk9TSEFOX1BJVBALEh4KGkRPVEFfUE9TSVRJT05fUkFESUFOVF9CQVNFEAwS",
            "GwoXRE9UQV9QT1NJVElPTl9ESVJFX0JBU0UQDRIaChZET1RBX1BPU0lUSU9O",
            "X0ZPVU5UQUlOEA4SFwoTRE9UQV9QT1NJVElPTl9PVEhFUhAPKuYBChhET1RB",
            "X0FCSUxJVFlfVEFSR0VUX1RZUEUSHAoYRE9UQV9BQklMSVRZX1RBUkdFVF9O",
            "T05FEAASHAoYRE9UQV9BQklMSVRZX1RBUkdFVF9TRUxGEAESIQodRE9UQV9B",
            "QklMSVRZX1RBUkdFVF9BTExZX0hFUk8QAhIiCh5ET1RBX0FCSUxJVFlfVEFS",
            "R0VUX0FMTFlfQ1JFRVAQAxIiCh5ET1RBX0FCSUxJVFlfVEFSR0VUX0VORU1Z",
            "X0hFUk8QBBIjCh9ET1RBX0FCSUxJVFlfVEFSR0VUX0VORU1ZX0NSRUVQEAUq",
            "mAgKDUVIZXJvU3RhdFR5cGUSGAoUa19FSGVyb1N0YXRUeXBlX05vbmUQABIj",
            "Ch5rX0VIZXJvU3RhdFR5cGVfQXhlVG90YWxEYW1hZ2UQ0A8SJwoia19FSGVy",
            "b1N0YXRUeXBlX0JhdHRsZUh1bmdlckRhbWFnZRDRDxInCiJrX0VIZXJvU3Rh",
            "dFR5cGVfQ291bnRlckhlbGl4RGFtYWdlENIPEicKImtfRUhlcm9TdGF0VHlw",
            "ZV9DdWxsaW5nQmxhZGVEYW1hZ2UQ0w8SLAona19FSGVyb1N0YXRUeXBlX0Jl",
            "cnNlcmtlcnNDYWxsQ2FzdENvdW50ENQPEjMKLmtfRUhlcm9TdGF0VHlwZV9C",
            "ZXJzZXJrZXJzQ2FsbEhlcm9lc0hpdEF2ZXJhZ2UQ1Q8SMAora19FSGVyb1N0",
            "YXRUeXBlX0JlcnNlcmtlcnNDYWxsT3RoZXJVbml0c0hpdBDWDxIzCi5rX0VI",
            "ZXJvU3RhdFR5cGVfQmVyc2Vya2Vyc0NhbGxIZXJvQXR0YWNrc1Rha2VuENcP",
            "EjQKL2tfRUhlcm9TdGF0VHlwZV9CZXJzZXJrZXJzQ2FsbE90aGVyQXR0YWNr",
            "c1Rha2VuENgPEioKJWtfRUhlcm9TdGF0VHlwZV9CYXR0bGVIdW5nZXJDYXN0",
            "Q291bnQQ2Q8SMgota19FSGVyb1N0YXRUeXBlX0JhdHRsZUh1bmdlclBvdGVu",
            "dGlhbER1cmF0aW9uENoPEjAKK2tfRUhlcm9TdGF0VHlwZV9CYXR0bGVIdW5n",
            "ZXJBdmVyYWdlRHVyYXRpb24Q2w8SKgola19FSGVyb1N0YXRUeXBlX0NvdW50",
            "ZXJIZWxpeFByb2NDb3VudBDcDxIuCilrX0VIZXJvU3RhdFR5cGVfQ291bnRl",
            "ckhlbGl4SGVyb1Byb2NDb3VudBDdDxIxCixrX0VIZXJvU3RhdFR5cGVfQ291",
            "bnRlckhlbGl4SGVyb2VzSGl0QXZlcmFnZRDeDxIzCi5rX0VIZXJvU3RhdFR5",
            "cGVfQ291bnRlckhlbGl4T3RoZXJVbml0c0hpdENvdW50EN8PEioKJWtfRUhl",
            "cm9TdGF0VHlwZV9DdWxsaW5nQmxhZGVDYXN0Q291bnQQ4A8SKgola19FSGVy",
            "b1N0YXRUeXBlX0N1bGxpbmdCbGFkZUtpbGxDb3VudBDhDxI0Ci9rX0VIZXJv",
            "U3RhdFR5cGVfQ3VsbGluZ0JsYWRlQXZlcmFnZUhlYWx0aEN1bGxlZBDiDxI3",
            "CjJrX0VIZXJvU3RhdFR5cGVfQ3VsbGluZ0JsYWRlQXZlcmFnZURhbWFnZUF2",
            "YWlsYWJsZRDjDxIwCitrX0VIZXJvU3RhdFR5cGVfQ3VsbGluZ0JsYWRlSGVy",
            "b0J1ZmZBdmVyYWdlEOQPKuQEChdFUGxheWVyVm9pY2VMaXN0ZW5TdGF0ZRIO",
            "CgprUFZMU19Ob25lEAASGgoWa1BWTFNfRGVuaWVkQ2hhdEJhbm5lZBABEhcK",
            "E2tQVkxTX0RlbmllZFBhcnRuZXIQAhImCiJrUFZMU19EZW5pZWRITFRWVGFs",
            "a2VyTm90U3BlY3RhdG9yEAMSJAoga1BWTFNfRGVuaWVkSExUVk5vVGFsa2Vy",
            "UGxheWVySUQQBBIoCiRrUFZMU19EZW5pZWRITFRWVGFsa2VyTm90QnJvYWRj",
            "YXN0ZXIQBRIdChlrUFZMU19EZW5pZWRUZWFtU3BlY3RhdG9yEAYSFwoTa1BW",
            "TFNfRGVuaWVkU3R1ZGVudBAIEhwKGGtQVkxTX0RlbmllZFByaXZhdGVDb2Fj",
            "aBAJEhAKDGtQVkxTX0RlbmllZBBAEiYKImtQVkxTX0FsbG93SExUVlRhbGtl",
            "cklzQnJvYWRjYXN0ZXIQQRIcChhrUFZMU19BbGxvd0NvQnJvYWRjYXN0ZXIQ",
            "QhIWChJrUFZMU19BbGxvd0FsbENoYXQQQxIdChlrUFZMU19BbGxvd1N0dWRl",
            "bnRUb0NvYWNoEEQSHAoYa1BWTFNfQWxsb3dGZWxsb3dTdHVkZW50EEUSHAoY",
            "a1BWTFNfQWxsb3dUYWxrZXJJc0NvYWNoEEYSHAoYa1BWTFNfQWxsb3dDb2Fj",
            "aEhlYXJUZWFtEEcSFwoTa1BWTFNfQWxsb3dTYW1lVGVhbRBIEhcKE2tQVkxT",
            "X0FsbG93U2hvd2Nhc2UQSRIbChdrUFZMU19BbGxvd1ByaXZhdGVDb2FjaBBK",
            "KkIKEEVQcm9qZWN0aW9uRXZlbnQSEgoOZVBFX0ZpcnN0Qmxvb2QQABIaChZl",
            "UEVfS2lsbHN0cmVha19nb2RsaWtlEAFCFaoCElN0ZWFtLlByb3Rvcy5Eb3Rh",
            "Mg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Steam.Protos.Dota2.NetworkbasetypesReflection.Descriptor, global::Steam.Protos.Dota2.DotaSharedEnumsReflection.Descriptor, global::Steam.Protos.Dota2.DotaCommonmessagesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Steam.Protos.Dota2.EDotaUserMessages), typeof(global::Steam.Protos.Dota2.DOTA_CHAT_MESSAGE), typeof(global::Steam.Protos.Dota2.DOTA_NO_BATTLE_POINTS_REASONS), typeof(global::Steam.Protos.Dota2.DOTA_CHAT_INFORMATIONAL), typeof(global::Steam.Protos.Dota2.DOTA_ABILITY_PING_TYPE), typeof(global::Steam.Protos.Dota2.DOTA_REPLAY_STATE_EVENT), typeof(global::Steam.Protos.Dota2.EDotaEntityMessages), typeof(global::Steam.Protos.Dota2.DOTA_OVERHEAD_ALERT), typeof(global::Steam.Protos.Dota2.DOTA_ROSHAN_PHASE), typeof(global::Steam.Protos.Dota2.DOTA_POSITION_CATEGORY), typeof(global::Steam.Protos.Dota2.DOTA_ABILITY_TARGET_TYPE), typeof(global::Steam.Protos.Dota2.EHeroStatType), typeof(global::Steam.Protos.Dota2.EPlayerVoiceListenState), typeof(global::Steam.Protos.Dota2.EProjectionEvent), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_AIDebugLine), global::Steam.Protos.Dota2.CDOTAUserMsg_AIDebugLine.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_Ping), global::Steam.Protos.Dota2.CDOTAUserMsg_Ping.Parser, new[]{ "Ping", "Loss" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SwapVerify), global::Steam.Protos.Dota2.CDOTAUserMsg_SwapVerify.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ChatEvent), global::Steam.Protos.Dota2.CDOTAUserMsg_ChatEvent.Parser, new[]{ "Type", "Value", "Playerid1", "Playerid2", "Playerid3", "Playerid4", "Playerid5", "Playerid6", "Value2", "Value3", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_BotChat), global::Steam.Protos.Dota2.CDOTAUserMsg_BotChat.Parser, new[]{ "PlayerId", "Message", "Target", "TeamOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CombatHeroPositions), global::Steam.Protos.Dota2.CDOTAUserMsg_CombatHeroPositions.Parser, new[]{ "Index", "Time", "WorldPos", "Health" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CombatLogBulkData), global::Steam.Protos.Dota2.CDOTAUserMsg_CombatLogBulkData.Parser, new[]{ "CombatEntries", "Timestamp", "Duration", "PlayerId", "RequestTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData), global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData.Parser, new[]{ "ControlPoint", "Vector" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_UpdateLinearProjectileCPData), global::Steam.Protos.Dota2.CDOTAUserMsg_UpdateLinearProjectileCPData.Parser, new[]{ "Handle", "ControlPoint", "Vector" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo), global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Parser, new[]{ "Attackers" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker), global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Parser, new[]{ "Attacker_", "TotalDamage", "Abilities", "AttackerName" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability), global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability.Parser, new[]{ "AbilityId", "Damage" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_GlobalLightColor), global::Steam.Protos.Dota2.CDOTAUserMsg_GlobalLightColor.Parser, new[]{ "Color", "Duration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_GlobalLightDirection), global::Steam.Protos.Dota2.CDOTAUserMsg_GlobalLightDirection.Parser, new[]{ "Direction", "Duration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_LocationPing), global::Steam.Protos.Dota2.CDOTAUserMsg_LocationPing.Parser, new[]{ "PlayerId", "LocationPing" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_PingConfirmation), global::Steam.Protos.Dota2.CDOTAUserMsg_PingConfirmation.Parser, new[]{ "PlayerIdOfOriginalPinger", "EntityIndex", "IconType", "Location" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ItemAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_ItemAlert.Parser, new[]{ "PlayerId", "ItemAlert" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_EnemyItemAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_EnemyItemAlert.Parser, new[]{ "PlayerId", "TargetPlayerId", "ItemAbilityId", "RuneType", "EntityId", "ItemLevel", "PrimaryCharges", "SecondaryCharges" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ModifierAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_ModifierAlert.Parser, new[]{ "PlayerId", "ClassName", "StackCount", "IsDebuff", "TargetEntindex", "SecondsRemaining" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_HPManaAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_HPManaAlert.Parser, new[]{ "PlayerId", "TargetEntindex", "ShowRawValues" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_NeutralCampAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_NeutralCampAlert.Parser, new[]{ "PlayerId", "SpawnerEntindex", "UnitEntindex", "StackCount", "CampType", "StackRequest", "StackIntention" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_GlyphAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_GlyphAlert.Parser, new[]{ "PlayerId", "Negative" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_RadarAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_RadarAlert.Parser, new[]{ "PlayerId", "Negative" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_RoshanTimer), global::Steam.Protos.Dota2.CDOTAUserMsg_RoshanTimer.Parser, new[]{ "PlayerId", "Negative" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_WillPurchaseAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_WillPurchaseAlert.Parser, new[]{ "ItemAbilityId", "PlayerId", "GoldRemaining", "SuggestionPlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_EmptyTeleportAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_EmptyTeleportAlert.Parser, new[]{ "SourcePlayerId", "TargetPlayerId", "CooldownSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MarsArenaOfBloodAttack), global::Steam.Protos.Dota2.CDOTAUserMsg_MarsArenaOfBloodAttack.Parser, new[]{ "SourceEhandle", "TargetEhandle", "WarriorIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_BuyBackStateAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_BuyBackStateAlert.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_QuickBuyAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_QuickBuyAlert.Parser, new[]{ "PlayerId", "ItemAbilityId", "GoldCost", "ItemCooldownSeconds", "ShowBuyback" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CourierKilledAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_CourierKilledAlert.Parser, new[]{ "Team", "GoldValue", "EntityHandle", "Timestamp", "LostItems", "KillerPlayerId", "OwningPlayerId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CourierKilledAlert.Types.LostItem), global::Steam.Protos.Dota2.CDOTAUserMsg_CourierKilledAlert.Types.LostItem.Parser, new[]{ "ItemAbilityId", "Quantity" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MinimapEvent), global::Steam.Protos.Dota2.CDOTAUserMsg_MinimapEvent.Parser, new[]{ "EventType", "EntityHandle", "X", "Y", "Duration", "TargetEntityHandle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MapLine), global::Steam.Protos.Dota2.CDOTAUserMsg_MapLine.Parser, new[]{ "PlayerId", "Mapline" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MinimapDebugPoint), global::Steam.Protos.Dota2.CDOTAUserMsg_MinimapDebugPoint.Parser, new[]{ "Location", "Color", "Size", "Duration", "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CreateLinearProjectile), global::Steam.Protos.Dota2.CDOTAUserMsg_CreateLinearProjectile.Parser, new[]{ "Origin", "Velocity", "Entindex", "ParticleIndex", "Handle", "Acceleration", "MaxSpeed", "FowRadius", "StickyFowReveal", "Distance", "Colorgemcolor", "ParticleCpData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_DestroyLinearProjectile), global::Steam.Protos.Dota2.CDOTAUserMsg_DestroyLinearProjectile.Parser, new[]{ "Handle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_DodgeTrackingProjectiles), global::Steam.Protos.Dota2.CDOTAUserMsg_DodgeTrackingProjectiles.Parser, new[]{ "Entindex", "AttacksOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SpectatorPlayerClick), global::Steam.Protos.Dota2.CDOTAUserMsg_SpectatorPlayerClick.Parser, new[]{ "Entindex", "OrderType", "TargetIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SpectatorPlayerUnitOrders), global::Steam.Protos.Dota2.CDOTAUserMsg_SpectatorPlayerUnitOrders.Parser, new[]{ "Entindex", "OrderType", "Units", "TargetIndex", "AbilityId", "Position", "Queue", "SequenceNumber", "Flags", "LastOrderLatency", "Ping" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_NevermoreRequiem), global::Steam.Protos.Dota2.CDOTAUserMsg_NevermoreRequiem.Parser, new[]{ "EntityHandle", "Lines", "Origin", "Reverse" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_InvalidCommand), global::Steam.Protos.Dota2.CDOTAUserMsg_InvalidCommand.Parser, new[]{ "Message", "SequenceNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_HudError), global::Steam.Protos.Dota2.CDOTAUserMsg_HudError.Parser, new[]{ "OrderId", "SequenceNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SharedCooldown), global::Steam.Protos.Dota2.CDOTAUserMsg_SharedCooldown.Parser, new[]{ "Entindex", "Name", "Cooldown", "NameIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SetNextAutobuyItem), global::Steam.Protos.Dota2.CDOTAUserMsg_SetNextAutobuyItem.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_HalloweenDrops), global::Steam.Protos.Dota2.CDOTAUserMsg_HalloweenDrops.Parser, new[]{ "ItemDefs", "PlayerIds", "PrizeList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CourierLeftFountainAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_CourierLeftFountainAlert.Parser, new[]{ "OwningPlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized), global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Parser, new[]{ "Facts" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact), global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact.Parser, new[]{ "Key", "Valtype", "ValNumeric", "ValString", "ValStringtableIndex", "ValIntNumeric" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact.Types.ValueType) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTASpeechMatchOnClient), global::Steam.Protos.Dota2.CDOTASpeechMatchOnClient.Parser, new[]{ "SpeechConcept", "RecipientType", "Responsequery", "Randomseed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent), global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Parser, new[]{ "MsgType", "EntityIndex", "Speech", "SpeechMute", "AddGesture", "RemoveGesture", "BloodImpact", "FadeGesture", "SpeechMatchOnClient" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Interval), global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Interval.Parser, new[]{ "Start", "Range" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Speech), global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Speech.Parser, new[]{ "SpeechConcept", "Response", "RecipientType", "Muteable", "Predelay", "Flags", "ResponseType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.SpeechMute), global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.SpeechMute.Parser, new[]{ "Delay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.AddGesture), global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.AddGesture.Parser, new[]{ "Activity", "Slot", "FadeIn", "FadeOut", "PlaybackRate", "SequenceVariant" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.RemoveGesture), global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.RemoveGesture.Parser, new[]{ "Activity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.BloodImpact), global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.BloodImpact.Parser, new[]{ "Scale", "XNormal", "YNormal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.FadeGesture), global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.FadeGesture.Parser, new[]{ "Activity" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ItemPurchased), global::Steam.Protos.Dota2.CDOTAUserMsg_ItemPurchased.Parser, new[]{ "ItemAbilityId", "FromCombine" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ItemSold), global::Steam.Protos.Dota2.CDOTAUserMsg_ItemSold.Parser, new[]{ "ItemAbilityId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ItemFound), global::Steam.Protos.Dota2.CDOTAUserMsg_ItemFound.Parser, new[]{ "Player", "Quality", "Rarity", "Method", "Itemdef" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_OverheadEvent), global::Steam.Protos.Dota2.CDOTAUserMsg_OverheadEvent.Parser, new[]{ "MessageType", "Value", "TargetPlayerEntindex", "TargetEntindex", "SourcePlayerEntindex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialTipInfo), global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialTipInfo.Parser, new[]{ "Name", "Progress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialFinish), global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialFinish.Parser, new[]{ "Heading", "Emblem", "Body", "Success" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialMinimapPosition), global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialMinimapPosition.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SendGenericToolTip), global::Steam.Protos.Dota2.CDOTAUserMsg_SendGenericToolTip.Parser, new[]{ "Title", "Text", "Entindex", "Close" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_WorldLine), global::Steam.Protos.Dota2.CDOTAUserMsg_WorldLine.Parser, new[]{ "PlayerId", "Worldline" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ChatWheel), global::Steam.Protos.Dota2.CDOTAUserMsg_ChatWheel.Parser, new[]{ "ChatMessageId", "PlayerId", "AccountId", "ParamHeroId", "EmoticonId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ReceivedXmasGift), global::Steam.Protos.Dota2.CDOTAUserMsg_ReceivedXmasGift.Parser, new[]{ "PlayerId", "ItemName", "InventorySlot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ShowSurvey), global::Steam.Protos.Dota2.CDOTAUserMsg_ShowSurvey.Parser, new[]{ "SurveyId", "MatchId", "ResponseStyle", "TeammateHeroId", "TeammateName", "TeammateAccountId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_UpdateSharedContent), global::Steam.Protos.Dota2.CDOTAUserMsg_UpdateSharedContent.Parser, new[]{ "SlotType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialRequestExp), global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialRequestExp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialFade), global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialFade.Parser, new[]{ "TgtAlpha" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialPingMinimap), global::Steam.Protos.Dota2.CDOTAUserMsg_TutorialPingMinimap.Parser, new[]{ "PlayerId", "PosX", "PosY", "PosZ", "EntityIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_GamerulesStateChanged), global::Steam.Protos.Dota2.CDOTAUserMsg_GamerulesStateChanged.Parser, new[]{ "State" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_AddQuestLogEntry), global::Steam.Protos.Dota2.CDOTAUserMsg_AddQuestLogEntry.Parser, new[]{ "NpcName", "NpcDialog" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SendStatPopup), global::Steam.Protos.Dota2.CDOTAUserMsg_SendStatPopup.Parser, new[]{ "PlayerId", "Statpopup" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_DismissAllStatPopups), global::Steam.Protos.Dota2.CDOTAUserMsg_DismissAllStatPopups.Parser, new[]{ "Dismissallmsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SendRoshanSpectatorPhase), global::Steam.Protos.Dota2.CDOTAUserMsg_SendRoshanSpectatorPhase.Parser, new[]{ "Phase", "PhaseStartTime", "PhaseLength" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SendRoshanPopup), global::Steam.Protos.Dota2.CDOTAUserMsg_SendRoshanPopup.Parser, new[]{ "Reclaimed", "Gametime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SendFinalGold), global::Steam.Protos.Dota2.CDOTAUserMsg_SendFinalGold.Parser, new[]{ "ReliableGold", "UnreliableGold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CustomMsg), global::Steam.Protos.Dota2.CDOTAUserMsg_CustomMsg.Parser, new[]{ "Message", "PlayerId", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CoachHUDPing), global::Steam.Protos.Dota2.CDOTAUserMsg_CoachHUDPing.Parser, new[]{ "PlayerId", "HudPing" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ClientLoadGridNav), global::Steam.Protos.Dota2.CDOTAUserMsg_ClientLoadGridNav.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TE_Projectile), global::Steam.Protos.Dota2.CDOTAUserMsg_TE_Projectile.Parser, new[]{ "Source", "Target", "MoveSpeed", "SourceAttachment", "ParticleSystemHandle", "Dodgeable", "IsAttack", "ExpireTime", "Maximpacttime", "Colorgemcolor", "LaunchTick", "Handle", "TargetLoc", "ParticleCpData", "AdditionalParticleSystemHandle", "OriginalMoveSpeed", "Ability" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TE_ProjectileLoc), global::Steam.Protos.Dota2.CDOTAUserMsg_TE_ProjectileLoc.Parser, new[]{ "SourceLoc", "Target", "MoveSpeed", "ParticleSystemHandle", "Dodgeable", "IsAttack", "ExpireTime", "TargetLoc", "Colorgemcolor", "LaunchTick", "Handle", "Source", "SourceAttachment", "ParticleCpData", "AdditionalParticleSystemHandle", "OriginalMoveSpeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TE_DestroyProjectile), global::Steam.Protos.Dota2.CDOTAUserMsg_TE_DestroyProjectile.Parser, new[]{ "Handle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TE_DotaBloodImpact), global::Steam.Protos.Dota2.CDOTAUserMsg_TE_DotaBloodImpact.Parser, new[]{ "Entity", "Scale", "Xnormal", "Ynormal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_AbilityPing), global::Steam.Protos.Dota2.CDOTAUserMsg_AbilityPing.Parser, new[]{ "PlayerId", "AbilityId", "Type", "CooldownSeconds", "Level", "Passive", "ManaNeeded", "EntityId", "PrimaryCharges", "SecondaryCharges", "CtrlHeld", "ReclaimTime", "OwnerEntity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TE_UnitAnimation), global::Steam.Protos.Dota2.CDOTAUserMsg_TE_UnitAnimation.Parser, new[]{ "Entity", "SequenceVariant", "Playbackrate", "Castpoint", "Type", "Activity", "LagCompensationTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TE_UnitAnimationEnd), global::Steam.Protos.Dota2.CDOTAUserMsg_TE_UnitAnimationEnd.Parser, new[]{ "Entity", "Snap" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ShowGenericPopup), global::Steam.Protos.Dota2.CDOTAUserMsg_ShowGenericPopup.Parser, new[]{ "Header", "Body", "Param1", "Param2", "TintScreen", "ShowNoOtherDialogs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_VoteStart), global::Steam.Protos.Dota2.CDOTAUserMsg_VoteStart.Parser, new[]{ "Title", "Duration", "ChoiceCount", "Choices" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_VoteUpdate), global::Steam.Protos.Dota2.CDOTAUserMsg_VoteUpdate.Parser, new[]{ "ChoiceCounts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_VoteEnd), global::Steam.Protos.Dota2.CDOTAUserMsg_VoteEnd.Parser, new[]{ "SelectedChoice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_BoosterStatePlayer), global::Steam.Protos.Dota2.CDOTAUserMsg_BoosterStatePlayer.Parser, new[]{ "PlayerId", "Bonus", "EventBonus", "BonusItemId", "EventBonusItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_BoosterState), global::Steam.Protos.Dota2.CDOTAUserMsg_BoosterState.Parser, new[]{ "BoostedPlayers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_AbilitySteal), global::Steam.Protos.Dota2.CDOTAUserMsg_AbilitySteal.Parser, new[]{ "PlayerId", "AbilityId", "AbilityLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroLookup), global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroLookup.Parser, new[]{ "PlayerId", "HeroId", "HeroName", "Persona" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo), global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo.Parser, new[]{ "AveragePosition", "PositionDetails" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair), global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair.Parser, new[]{ "PositionCategory", "PositionCount" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroMinuteDetails), global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroMinuteDetails.Parser, new[]{ "LastHits", "HeroKills", "HeroDamage", "TowerDamage", "PositionInfo", "TotalXp", "NetWorth", "HarvestedCreepGold", "ClaimedFarm", "WardsPlaced", "RunesCollected", "TpsUsed", "ManaSpent", "DamageAbsorbed", "DamageDone" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails), global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails.Parser, new[]{ "PlayerStats", "TowerKills", "BarrackKills", "AvailableLaneCreepGold", "BalanceKillValue", "BalanceTowerValue", "BalanceBarracksValue", "BalanceGoldValue", "BalanceXpValue", "LanePerformance" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails.Types.LocationPerformance), global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails.Types.LocationPerformance.Parser, new[]{ "LocationCategory", "StatType", "Value" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_StatsPlayerKillShare), global::Steam.Protos.Dota2.CDOTAUserMsg_StatsPlayerKillShare.Parser, new[]{ "PlayerId", "KillSharePercent", "PlayerLocX", "PlayerLocY", "HealthPercent", "ManaPercent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails), global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails.Parser, new[]{ "VictimId", "KillShares", "DamageToKill", "EffectiveHealth", "DeathTime", "KillerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails), global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Parser, new[]{ "HeroLookup", "RadiantStats", "DireStats", "RadiantKills", "DireKills", "FightDetails" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails), global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails.Parser, new[]{ "Participants", "Deaths", "GoldDelta", "XpDelta" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightDetails), global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightDetails.Parser, new[]{ "StartTime", "EndTime", "RadiantFightDetails", "DireFightDetails" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MiniTaunt), global::Steam.Protos.Dota2.CDOTAUserMsg_MiniTaunt.Parser, new[]{ "TauntingPlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SpeechBubble), global::Steam.Protos.Dota2.CDOTAUserMsg_SpeechBubble.Parser, new[]{ "DestroyAll" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CustomHeaderMessage), global::Steam.Protos.Dota2.CDOTAUserMsg_CustomHeaderMessage.Parser, new[]{ "PlayerId", "Duration", "Message", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgHeroAbilityStat), global::Steam.Protos.Dota2.CMsgHeroAbilityStat.Parser, new[]{ "StatType", "IntValue", "FloatValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgCombatAnalyzerPlayerStat), global::Steam.Protos.Dota2.CMsgCombatAnalyzerPlayerStat.Parser, new[]{ "AccountId", "HeroAbilityStats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CMsgCombatAnalyzerStats), global::Steam.Protos.Dota2.CMsgCombatAnalyzerStats.Parser, new[]{ "MatchId", "PlayerStats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_BeastChat), global::Steam.Protos.Dota2.CDOTAUserMsg_BeastChat.Parser, new[]{ "Team", "Format", "Message", "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CustomHudElement_Create), global::Steam.Protos.Dota2.CDOTAUserMsg_CustomHudElement_Create.Parser, new[]{ "ElementId", "LayoutFilename", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CustomHudElement_Modify), global::Steam.Protos.Dota2.CDOTAUserMsg_CustomHudElement_Modify.Parser, new[]{ "ElementId", "ModifyVisible", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CustomHudElement_Destroy), global::Steam.Protos.Dota2.CDOTAUserMsg_CustomHudElement_Destroy.Parser, new[]{ "ElementId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CompendiumStatePlayer), global::Steam.Protos.Dota2.CDOTAUserMsg_CompendiumStatePlayer.Parser, new[]{ "PlayerId", "Level" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_CompendiumState), global::Steam.Protos.Dota2.CDOTAUserMsg_CompendiumState.Parser, new[]{ "CompendiumPlayers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectionAbility), global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectionAbility.Parser, new[]{ "AbilityId", "CasterEntIndex", "CasterTeam", "ChannelEnd", "Origin", "TrackCasterOnly", "EndTime", "VictimEntIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectionEvent), global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectionEvent.Parser, new[]{ "EventId", "Team" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_XPAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_XPAlert.Parser, new[]{ "PlayerId", "TargetEntindex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TalentTreeAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_TalentTreeAlert.Parser, new[]{ "PlayerId", "TargetEntindex", "AbilityId", "Slot", "Learned" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_UpdateQuestProgress), global::Steam.Protos.Dota2.CDOTAUserMsg_UpdateQuestProgress.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_QuestStatus), global::Steam.Protos.Dota2.CDOTAUserMsg_QuestStatus.Parser, new[]{ "PlayerId", "QuestId", "ChallengeId", "Progress", "Goal", "Query", "FailGametime", "ItemAbilityId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SuggestHeroPick), global::Steam.Protos.Dota2.CDOTAUserMsg_SuggestHeroPick.Parser, new[]{ "PlayerId", "HeroId", "Ban", "FacetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SuggestHeroRole), global::Steam.Protos.Dota2.CDOTAUserMsg_SuggestHeroRole.Parser, new[]{ "PlayerId", "HeroRole" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_KillcamDamageTaken), global::Steam.Protos.Dota2.CDOTAUserMsg_KillcamDamageTaken.Parser, new[]{ "PlayerId", "DamageTaken", "ItemType", "ItemAbilityId", "HeroName", "DamageColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SelectPenaltyGold), global::Steam.Protos.Dota2.CDOTAUserMsg_SelectPenaltyGold.Parser, new[]{ "PlayerId", "Cost" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_RollDiceResult), global::Steam.Protos.Dota2.CDOTAUserMsg_RollDiceResult.Parser, new[]{ "PlayerId", "ChannelType", "RollMin", "RollMax", "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_FlipCoinResult), global::Steam.Protos.Dota2.CDOTAUserMsg_FlipCoinResult.Parser, new[]{ "PlayerId", "ChannelType", "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMessage_RequestItemSuggestions), global::Steam.Protos.Dota2.CDOTAUserMessage_RequestItemSuggestions.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMessage_TeamCaptainChanged), global::Steam.Protos.Dota2.CDOTAUserMessage_TeamCaptainChanged.Parser, new[]{ "Team", "CaptainPlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ChatWheelCooldown), global::Steam.Protos.Dota2.CDOTAUserMsg_ChatWheelCooldown.Parser, new[]{ "MessageId", "CooldownRemaining" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_HeroRelicProgress), global::Steam.Protos.Dota2.CDOTAUserMsg_HeroRelicProgress.Parser, new[]{ "HeroRelicType", "Value", "Ehandle", "EventId", "ValueDisplay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_AbilityDraftRequestAbility), global::Steam.Protos.Dota2.CDOTAUserMsg_AbilityDraftRequestAbility.Parser, new[]{ "PlayerId", "RequestedAbilityId", "CtrlIsDown", "RequestedHeroId", "RequestedFacetKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_DamageReport), global::Steam.Protos.Dota2.CDOTAUserMsg_DamageReport.Parser, new[]{ "PlayerId", "TargetHeroId", "SourceHeroId", "DamageAmount", "Broadcast" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_SalutePlayer), global::Steam.Protos.Dota2.CDOTAUserMsg_SalutePlayer.Parser, new[]{ "SourcePlayerId", "TargetPlayerId", "TipAmount", "EventId", "CustomTipStyle", "NumRecentTips" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_GiftPlayer), global::Steam.Protos.Dota2.CDOTAUserMsg_GiftPlayer.Parser, new[]{ "SourcePlayerId", "TargetPlayerId", "GiftItemDefIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TipAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_TipAlert.Parser, new[]{ "PlayerId", "TipText" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ReplaceQueryUnit), global::Steam.Protos.Dota2.CDOTAUserMsg_ReplaceQueryUnit.Parser, new[]{ "PlayerId", "SourceEntindex", "TargetEntindex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ESArcanaCombo), global::Steam.Protos.Dota2.CDOTAUserMsg_ESArcanaCombo.Parser, new[]{ "Ehandle", "ComboCount", "ArcanaLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ESArcanaComboSummary), global::Steam.Protos.Dota2.CDOTAUserMsg_ESArcanaComboSummary.Parser, new[]{ "Ehandle", "ComboCount", "DamageAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_OMArcanaCombo), global::Steam.Protos.Dota2.CDOTAUserMsg_OMArcanaCombo.Parser, new[]{ "Ehandle", "MulticastAmount", "ArcanaLevel", "MulticastChance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_HighFiveCompleted), global::Steam.Protos.Dota2.CDOTAUserMsg_HighFiveCompleted.Parser, new[]{ "PlayerId1", "PlayerId2", "SpecialHighFive", "SpecialEntindex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_HighFiveLeftHanging), global::Steam.Protos.Dota2.CDOTAUserMsg_HighFiveLeftHanging.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ShovelUnearth), global::Steam.Protos.Dota2.CDOTAUserMsg_ShovelUnearth.Parser, new[]{ "PlayerId", "AllChat", "Locstring", "Quantity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_AllStarEvent), global::Steam.Protos.Dota2.CDOTAUserMsg_AllStarEvent.Parser, new[]{ "SourcePlayerId", "TargetPlayerId", "PointAmount", "EventId", "PlayerScores" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_AllStarEvent.Types.PlayerScore), global::Steam.Protos.Dota2.CDOTAUserMsg_AllStarEvent.Types.PlayerScore.Parser, new[]{ "PlayerId", "ScoreSansKda" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_QueuedOrderRemoved), global::Steam.Protos.Dota2.CDOTAUserMsg_QueuedOrderRemoved.Parser, new[]{ "UnitOrderSequence" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_DebugChallenge), global::Steam.Protos.Dota2.CDOTAUserMsg_DebugChallenge.Parser, new[]{ "ChallengeType", "ChallengeQueryId", "EventId", "InstanceId", "ChallengeVar0", "ChallengeVar1", "ChallengeMaxRank" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_FoundNeutralItem), global::Steam.Protos.Dota2.CDOTAUserMsg_FoundNeutralItem.Parser, new[]{ "PlayerId", "ItemAbilityId", "ItemTier", "TierItemCount", "EnhancementAbilityId", "EnhancementLevel", "TrinketLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_OutpostCaptured), global::Steam.Protos.Dota2.CDOTAUserMsg_OutpostCaptured.Parser, new[]{ "OutpostEntindex", "TeamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_OutpostGrantedXP), global::Steam.Protos.Dota2.CDOTAUserMsg_OutpostGrantedXP.Parser, new[]{ "TeamId", "XpAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MoveCameraToUnit), global::Steam.Protos.Dota2.CDOTAUserMsg_MoveCameraToUnit.Parser, new[]{ "UnitEhandle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_PauseMinigameData), global::Steam.Protos.Dota2.CDOTAUserMsg_PauseMinigameData.Parser, new[]{ "DataBits" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_PauseMinigameData.Types.DataBit), global::Steam.Protos.Dota2.CDOTAUserMsg_PauseMinigameData.Types.DataBit.Parser, new[]{ "Index", "Data", "DataExtra" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_VersusScene_PlayerBehavior), global::Steam.Protos.Dota2.CDOTAUserMsg_VersusScene_PlayerBehavior.Parser, new[]{ "PlayerId", "Behavior", "PlayActivity", "ChatWheel", "PlaybackRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_QoP_ArcanaSummary), global::Steam.Protos.Dota2.CDOTAUserMsg_QoP_ArcanaSummary.Parser, new[]{ "Ehandle", "ArcanaLevel", "PlayersHit", "PlayersKilled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_HotPotato_Created), global::Steam.Protos.Dota2.CDOTAUserMsg_HotPotato_Created.Parser, new[]{ "PlayerId1", "PlayerId2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_HotPotato_Exploded), global::Steam.Protos.Dota2.CDOTAUserMsg_HotPotato_Exploded.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_WK_Arcana_Progress), global::Steam.Protos.Dota2.CDOTAUserMsg_WK_Arcana_Progress.Parser, new[]{ "Ehandle", "ArcanaLevel", "HeroId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress), global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Parser, new[]{ "PlayerProgress", "GuildId", "ChallengeInstanceId", "ChallengeParameter", "ChallengeType", "ChallengeProgressAtStart", "Complete" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.EChallengeType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.PlayerProgress), global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.PlayerProgress.Parser, new[]{ "PlayerId", "Progress" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_WRArcanaProgress), global::Steam.Protos.Dota2.CDOTAUserMsg_WRArcanaProgress.Parser, new[]{ "Ehandle", "TargetEhandle", "ArrowsLanded", "DamageDealt", "TargetHp", "TargetMaxHp", "ArcanaLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_WRArcanaSummary), global::Steam.Protos.Dota2.CDOTAUserMsg_WRArcanaSummary.Parser, new[]{ "Ehandle", "TargetEhandle", "ArrowsLanded", "DamageDealt", "TargetHp", "TargetMaxHp", "ArcanaLevel", "Success" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_EmptyItemSlotAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_EmptyItemSlotAlert.Parser, new[]{ "SourcePlayerId", "TargetPlayerId", "SlotIndex", "CooldownSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_AghsStatusAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_AghsStatusAlert.Parser, new[]{ "SourcePlayerId", "TargetPlayerId", "TargetEntindex", "AlertType", "HasScepter", "HasShard" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MutedPlayers), global::Steam.Protos.Dota2.CDOTAUserMsg_MutedPlayers.Parser, new[]{ "TextMutedPlayerIds", "VoiceMutedPlayerIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ContextualTip), global::Steam.Protos.Dota2.CDOTAUserMsg_ContextualTip.Parser, new[]{ "TipId", "ReferencedAbilities", "ReferencedUnits", "PanoramaClasses", "ForceAnnotation", "Variant", "IntParam", "IntParam2", "FloatParam", "FloatParam2", "StringParam", "StringParam2", "TipTextOverride", "TipAnnotationOverride", "PanoramaSnippet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_ChatMessage), global::Steam.Protos.Dota2.CDOTAUserMsg_ChatMessage.Parser, new[]{ "SourcePlayerId", "ChannelType", "MessageText" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_RockPaperScissorsStarted), global::Steam.Protos.Dota2.CDOTAUserMsg_RockPaperScissorsStarted.Parser, new[]{ "PlayerIdSource", "PlayerIdTarget" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_RockPaperScissorsFinished), global::Steam.Protos.Dota2.CDOTAUserMsg_RockPaperScissorsFinished.Parser, new[]{ "PlayerId1", "PlayerId2", "Player1Choice", "Player2Choice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_DuelOpponentKilled), global::Steam.Protos.Dota2.CDOTAUserMsg_DuelOpponentKilled.Parser, new[]{ "PlayerIdWinner", "PlayerIdLoser" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_DuelAccepted), global::Steam.Protos.Dota2.CDOTAUserMsg_DuelAccepted.Parser, new[]{ "PlayerId1", "PlayerId2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_DuelRequested), global::Steam.Protos.Dota2.CDOTAUserMsg_DuelRequested.Parser, new[]{ "PlayerIdRequestor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled), global::Steam.Protos.Dota2.CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled.Parser, new[]{ "PlayerIdKiller", "PlayerIdTarget", "Points", "PointsTotal", "LastHit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_PlayerDraftSuggestPick), global::Steam.Protos.Dota2.CDOTAUserMsg_PlayerDraftSuggestPick.Parser, new[]{ "PlayerId", "SuggestionPlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_PlayerDraftPick), global::Steam.Protos.Dota2.CDOTAUserMsg_PlayerDraftPick.Parser, new[]{ "PlayerIdCaptain", "PlayerIdTarget", "Team" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_FacetPing), global::Steam.Protos.Dota2.CDOTAUserMsg_FacetPing.Parser, new[]{ "PlayerId", "FacetStrhash", "EntityId", "AllChat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_InnatePing), global::Steam.Protos.Dota2.CDOTAUserMsg_InnatePing.Parser, new[]{ "PlayerId", "EntityId", "AllChat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_NeutralCraftAvailable), global::Steam.Protos.Dota2.CDOTAUserMsg_NeutralCraftAvailable.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_TimerAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_TimerAlert.Parser, new[]{ "PlayerId", "TimerAlertType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MadstoneAlert), global::Steam.Protos.Dota2.CDOTAUserMsg_MadstoneAlert.Parser, new[]{ "PlayerId", "TargetEntindex", "Tier", "MadstoneAlertType", "Value" }, null, new[]{ typeof(global::Steam.Protos.Dota2.CDOTAUserMsg_MadstoneAlert.Types.EMadstoneAlertType) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EDotaUserMessages {
    [pbr::OriginalName("DOTA_UM_AddUnitToSelection")] DotaUmAddUnitToSelection = 464,
    [pbr::OriginalName("DOTA_UM_AIDebugLine")] DotaUmAidebugLine = 465,
    [pbr::OriginalName("DOTA_UM_ChatEvent")] DotaUmChatEvent = 466,
    [pbr::OriginalName("DOTA_UM_CombatHeroPositions")] DotaUmCombatHeroPositions = 467,
    [pbr::OriginalName("DOTA_UM_CombatLogData")] DotaUmCombatLogData = 468,
    [pbr::OriginalName("DOTA_UM_CombatLogBulkData")] DotaUmCombatLogBulkData = 470,
    [pbr::OriginalName("DOTA_UM_CreateLinearProjectile")] DotaUmCreateLinearProjectile = 471,
    [pbr::OriginalName("DOTA_UM_DestroyLinearProjectile")] DotaUmDestroyLinearProjectile = 472,
    [pbr::OriginalName("DOTA_UM_DodgeTrackingProjectiles")] DotaUmDodgeTrackingProjectiles = 473,
    [pbr::OriginalName("DOTA_UM_GlobalLightColor")] DotaUmGlobalLightColor = 474,
    [pbr::OriginalName("DOTA_UM_GlobalLightDirection")] DotaUmGlobalLightDirection = 475,
    [pbr::OriginalName("DOTA_UM_InvalidCommand")] DotaUmInvalidCommand = 476,
    [pbr::OriginalName("DOTA_UM_LocationPing")] DotaUmLocationPing = 477,
    [pbr::OriginalName("DOTA_UM_MapLine")] DotaUmMapLine = 478,
    [pbr::OriginalName("DOTA_UM_MiniKillCamInfo")] DotaUmMiniKillCamInfo = 479,
    [pbr::OriginalName("DOTA_UM_MinimapDebugPoint")] DotaUmMinimapDebugPoint = 480,
    [pbr::OriginalName("DOTA_UM_MinimapEvent")] DotaUmMinimapEvent = 481,
    [pbr::OriginalName("DOTA_UM_NevermoreRequiem")] DotaUmNevermoreRequiem = 482,
    [pbr::OriginalName("DOTA_UM_OverheadEvent")] DotaUmOverheadEvent = 483,
    [pbr::OriginalName("DOTA_UM_SetNextAutobuyItem")] DotaUmSetNextAutobuyItem = 484,
    [pbr::OriginalName("DOTA_UM_SharedCooldown")] DotaUmSharedCooldown = 485,
    [pbr::OriginalName("DOTA_UM_SpectatorPlayerClick")] DotaUmSpectatorPlayerClick = 486,
    [pbr::OriginalName("DOTA_UM_TutorialTipInfo")] DotaUmTutorialTipInfo = 487,
    [pbr::OriginalName("DOTA_UM_UnitEvent")] DotaUmUnitEvent = 488,
    [pbr::OriginalName("DOTA_UM_ParticleManager")] DotaUmParticleManager = 489,
    [pbr::OriginalName("DOTA_UM_BotChat")] DotaUmBotChat = 490,
    [pbr::OriginalName("DOTA_UM_HudError")] DotaUmHudError = 491,
    [pbr::OriginalName("DOTA_UM_ItemPurchased")] DotaUmItemPurchased = 492,
    [pbr::OriginalName("DOTA_UM_Ping")] DotaUmPing = 493,
    [pbr::OriginalName("DOTA_UM_ItemFound")] DotaUmItemFound = 494,
    [pbr::OriginalName("DOTA_UM_CharacterSpeakConcept")] DotaUmCharacterSpeakConcept = 495,
    [pbr::OriginalName("DOTA_UM_SwapVerify")] DotaUmSwapVerify = 496,
    [pbr::OriginalName("DOTA_UM_WorldLine")] DotaUmWorldLine = 497,
    [pbr::OriginalName("DOTA_UM_TournamentDrop")] DotaUmTournamentDrop = 498,
    [pbr::OriginalName("DOTA_UM_ItemAlert")] DotaUmItemAlert = 499,
    [pbr::OriginalName("DOTA_UM_HalloweenDrops")] DotaUmHalloweenDrops = 500,
    [pbr::OriginalName("DOTA_UM_ChatWheel")] DotaUmChatWheel = 501,
    [pbr::OriginalName("DOTA_UM_ReceivedXmasGift")] DotaUmReceivedXmasGift = 502,
    [pbr::OriginalName("DOTA_UM_UpdateSharedContent")] DotaUmUpdateSharedContent = 503,
    [pbr::OriginalName("DOTA_UM_TutorialRequestExp")] DotaUmTutorialRequestExp = 504,
    [pbr::OriginalName("DOTA_UM_TutorialPingMinimap")] DotaUmTutorialPingMinimap = 505,
    [pbr::OriginalName("DOTA_UM_GamerulesStateChanged")] DotaUmGamerulesStateChanged = 506,
    [pbr::OriginalName("DOTA_UM_ShowSurvey")] DotaUmShowSurvey = 507,
    [pbr::OriginalName("DOTA_UM_TutorialFade")] DotaUmTutorialFade = 508,
    [pbr::OriginalName("DOTA_UM_AddQuestLogEntry")] DotaUmAddQuestLogEntry = 509,
    [pbr::OriginalName("DOTA_UM_SendStatPopup")] DotaUmSendStatPopup = 510,
    [pbr::OriginalName("DOTA_UM_TutorialFinish")] DotaUmTutorialFinish = 511,
    [pbr::OriginalName("DOTA_UM_SendRoshanPopup")] DotaUmSendRoshanPopup = 512,
    [pbr::OriginalName("DOTA_UM_SendGenericToolTip")] DotaUmSendGenericToolTip = 513,
    [pbr::OriginalName("DOTA_UM_SendFinalGold")] DotaUmSendFinalGold = 514,
    [pbr::OriginalName("DOTA_UM_CustomMsg")] DotaUmCustomMsg = 515,
    [pbr::OriginalName("DOTA_UM_CoachHUDPing")] DotaUmCoachHudping = 516,
    [pbr::OriginalName("DOTA_UM_ClientLoadGridNav")] DotaUmClientLoadGridNav = 517,
    [pbr::OriginalName("DOTA_UM_TE_Projectile")] DotaUmTeProjectile = 518,
    [pbr::OriginalName("DOTA_UM_TE_ProjectileLoc")] DotaUmTeProjectileLoc = 519,
    [pbr::OriginalName("DOTA_UM_TE_DotaBloodImpact")] DotaUmTeDotaBloodImpact = 520,
    [pbr::OriginalName("DOTA_UM_TE_UnitAnimation")] DotaUmTeUnitAnimation = 521,
    [pbr::OriginalName("DOTA_UM_TE_UnitAnimationEnd")] DotaUmTeUnitAnimationEnd = 522,
    [pbr::OriginalName("DOTA_UM_AbilityPing")] DotaUmAbilityPing = 523,
    [pbr::OriginalName("DOTA_UM_ShowGenericPopup")] DotaUmShowGenericPopup = 524,
    [pbr::OriginalName("DOTA_UM_VoteStart")] DotaUmVoteStart = 525,
    [pbr::OriginalName("DOTA_UM_VoteUpdate")] DotaUmVoteUpdate = 526,
    [pbr::OriginalName("DOTA_UM_VoteEnd")] DotaUmVoteEnd = 527,
    [pbr::OriginalName("DOTA_UM_BoosterState")] DotaUmBoosterState = 528,
    [pbr::OriginalName("DOTA_UM_WillPurchaseAlert")] DotaUmWillPurchaseAlert = 529,
    [pbr::OriginalName("DOTA_UM_TutorialMinimapPosition")] DotaUmTutorialMinimapPosition = 530,
    [pbr::OriginalName("DOTA_UM_AbilitySteal")] DotaUmAbilitySteal = 532,
    [pbr::OriginalName("DOTA_UM_CourierKilledAlert")] DotaUmCourierKilledAlert = 533,
    [pbr::OriginalName("DOTA_UM_EnemyItemAlert")] DotaUmEnemyItemAlert = 534,
    [pbr::OriginalName("DOTA_UM_StatsMatchDetails")] DotaUmStatsMatchDetails = 535,
    [pbr::OriginalName("DOTA_UM_MiniTaunt")] DotaUmMiniTaunt = 536,
    [pbr::OriginalName("DOTA_UM_BuyBackStateAlert")] DotaUmBuyBackStateAlert = 537,
    [pbr::OriginalName("DOTA_UM_SpeechBubble")] DotaUmSpeechBubble = 538,
    [pbr::OriginalName("DOTA_UM_CustomHeaderMessage")] DotaUmCustomHeaderMessage = 539,
    [pbr::OriginalName("DOTA_UM_QuickBuyAlert")] DotaUmQuickBuyAlert = 540,
    [pbr::OriginalName("DOTA_UM_StatsHeroDetails")] DotaUmStatsHeroDetails = 541,
    [pbr::OriginalName("DOTA_UM_PredictionResult")] DotaUmPredictionResult = 542,
    [pbr::OriginalName("DOTA_UM_ModifierAlert")] DotaUmModifierAlert = 543,
    [pbr::OriginalName("DOTA_UM_HPManaAlert")] DotaUmHpmanaAlert = 544,
    [pbr::OriginalName("DOTA_UM_GlyphAlert")] DotaUmGlyphAlert = 545,
    [pbr::OriginalName("DOTA_UM_BeastChat")] DotaUmBeastChat = 546,
    [pbr::OriginalName("DOTA_UM_SpectatorPlayerUnitOrders")] DotaUmSpectatorPlayerUnitOrders = 547,
    [pbr::OriginalName("DOTA_UM_CustomHudElement_Create")] DotaUmCustomHudElementCreate = 548,
    [pbr::OriginalName("DOTA_UM_CustomHudElement_Modify")] DotaUmCustomHudElementModify = 549,
    [pbr::OriginalName("DOTA_UM_CustomHudElement_Destroy")] DotaUmCustomHudElementDestroy = 550,
    [pbr::OriginalName("DOTA_UM_CompendiumState")] DotaUmCompendiumState = 551,
    [pbr::OriginalName("DOTA_UM_ProjectionAbility")] DotaUmProjectionAbility = 552,
    [pbr::OriginalName("DOTA_UM_ProjectionEvent")] DotaUmProjectionEvent = 553,
    [pbr::OriginalName("DOTA_UM_CombatLogDataHLTV")] DotaUmCombatLogDataHltv = 554,
    [pbr::OriginalName("DOTA_UM_XPAlert")] DotaUmXpalert = 555,
    [pbr::OriginalName("DOTA_UM_UpdateQuestProgress")] DotaUmUpdateQuestProgress = 556,
    [pbr::OriginalName("DOTA_UM_MatchMetadata")] DotaUmMatchMetadata = 557,
    [pbr::OriginalName("DOTA_UM_MatchDetails")] DotaUmMatchDetails = 558,
    [pbr::OriginalName("DOTA_UM_QuestStatus")] DotaUmQuestStatus = 559,
    [pbr::OriginalName("DOTA_UM_SuggestHeroPick")] DotaUmSuggestHeroPick = 560,
    [pbr::OriginalName("DOTA_UM_SuggestHeroRole")] DotaUmSuggestHeroRole = 561,
    [pbr::OriginalName("DOTA_UM_KillcamDamageTaken")] DotaUmKillcamDamageTaken = 562,
    [pbr::OriginalName("DOTA_UM_SelectPenaltyGold")] DotaUmSelectPenaltyGold = 563,
    [pbr::OriginalName("DOTA_UM_RollDiceResult")] DotaUmRollDiceResult = 564,
    [pbr::OriginalName("DOTA_UM_FlipCoinResult")] DotaUmFlipCoinResult = 565,
    [pbr::OriginalName("DOTA_UM_RequestItemSuggestions")] DotaUmRequestItemSuggestions = 566,
    [pbr::OriginalName("DOTA_UM_TeamCaptainChanged")] DotaUmTeamCaptainChanged = 567,
    [pbr::OriginalName("DOTA_UM_SendRoshanSpectatorPhase")] DotaUmSendRoshanSpectatorPhase = 568,
    [pbr::OriginalName("DOTA_UM_ChatWheelCooldown")] DotaUmChatWheelCooldown = 569,
    [pbr::OriginalName("DOTA_UM_DismissAllStatPopups")] DotaUmDismissAllStatPopups = 570,
    [pbr::OriginalName("DOTA_UM_TE_DestroyProjectile")] DotaUmTeDestroyProjectile = 571,
    [pbr::OriginalName("DOTA_UM_HeroRelicProgress")] DotaUmHeroRelicProgress = 572,
    [pbr::OriginalName("DOTA_UM_AbilityDraftRequestAbility")] DotaUmAbilityDraftRequestAbility = 573,
    [pbr::OriginalName("DOTA_UM_ItemSold")] DotaUmItemSold = 574,
    [pbr::OriginalName("DOTA_UM_DamageReport")] DotaUmDamageReport = 575,
    [pbr::OriginalName("DOTA_UM_SalutePlayer")] DotaUmSalutePlayer = 576,
    [pbr::OriginalName("DOTA_UM_TipAlert")] DotaUmTipAlert = 577,
    [pbr::OriginalName("DOTA_UM_ReplaceQueryUnit")] DotaUmReplaceQueryUnit = 578,
    [pbr::OriginalName("DOTA_UM_EmptyTeleportAlert")] DotaUmEmptyTeleportAlert = 579,
    [pbr::OriginalName("DOTA_UM_MarsArenaOfBloodAttack")] DotaUmMarsArenaOfBloodAttack = 580,
    [pbr::OriginalName("DOTA_UM_ESArcanaCombo")] DotaUmEsarcanaCombo = 581,
    [pbr::OriginalName("DOTA_UM_ESArcanaComboSummary")] DotaUmEsarcanaComboSummary = 582,
    [pbr::OriginalName("DOTA_UM_HighFiveLeftHanging")] DotaUmHighFiveLeftHanging = 583,
    [pbr::OriginalName("DOTA_UM_HighFiveCompleted")] DotaUmHighFiveCompleted = 584,
    [pbr::OriginalName("DOTA_UM_ShovelUnearth")] DotaUmShovelUnearth = 585,
    [pbr::OriginalName("DOTA_UM_RadarAlert")] DotaUmRadarAlert = 587,
    [pbr::OriginalName("DOTA_UM_AllStarEvent")] DotaUmAllStarEvent = 588,
    [pbr::OriginalName("DOTA_UM_TalentTreeAlert")] DotaUmTalentTreeAlert = 589,
    [pbr::OriginalName("DOTA_UM_QueuedOrderRemoved")] DotaUmQueuedOrderRemoved = 590,
    [pbr::OriginalName("DOTA_UM_DebugChallenge")] DotaUmDebugChallenge = 591,
    [pbr::OriginalName("DOTA_UM_OMArcanaCombo")] DotaUmOmarcanaCombo = 592,
    [pbr::OriginalName("DOTA_UM_FoundNeutralItem")] DotaUmFoundNeutralItem = 593,
    [pbr::OriginalName("DOTA_UM_OutpostCaptured")] DotaUmOutpostCaptured = 594,
    [pbr::OriginalName("DOTA_UM_OutpostGrantedXP")] DotaUmOutpostGrantedXp = 595,
    [pbr::OriginalName("DOTA_UM_MoveCameraToUnit")] DotaUmMoveCameraToUnit = 596,
    [pbr::OriginalName("DOTA_UM_PauseMinigameData")] DotaUmPauseMinigameData = 597,
    [pbr::OriginalName("DOTA_UM_VersusScene_PlayerBehavior")] DotaUmVersusScenePlayerBehavior = 598,
    [pbr::OriginalName("DOTA_UM_QoP_ArcanaSummary")] DotaUmQoPArcanaSummary = 600,
    [pbr::OriginalName("DOTA_UM_HotPotato_Created")] DotaUmHotPotatoCreated = 601,
    [pbr::OriginalName("DOTA_UM_HotPotato_Exploded")] DotaUmHotPotatoExploded = 602,
    [pbr::OriginalName("DOTA_UM_WK_Arcana_Progress")] DotaUmWkArcanaProgress = 603,
    [pbr::OriginalName("DOTA_UM_GuildChallenge_Progress")] DotaUmGuildChallengeProgress = 604,
    [pbr::OriginalName("DOTA_UM_WRArcanaProgress")] DotaUmWrarcanaProgress = 605,
    [pbr::OriginalName("DOTA_UM_WRArcanaSummary")] DotaUmWrarcanaSummary = 606,
    [pbr::OriginalName("DOTA_UM_EmptyItemSlotAlert")] DotaUmEmptyItemSlotAlert = 607,
    [pbr::OriginalName("DOTA_UM_AghsStatusAlert")] DotaUmAghsStatusAlert = 608,
    [pbr::OriginalName("DOTA_UM_PingConfirmation")] DotaUmPingConfirmation = 609,
    [pbr::OriginalName("DOTA_UM_MutedPlayers")] DotaUmMutedPlayers = 610,
    [pbr::OriginalName("DOTA_UM_ContextualTip")] DotaUmContextualTip = 611,
    [pbr::OriginalName("DOTA_UM_ChatMessage")] DotaUmChatMessage = 612,
    [pbr::OriginalName("DOTA_UM_NeutralCampAlert")] DotaUmNeutralCampAlert = 613,
    [pbr::OriginalName("DOTA_UM_RockPaperScissorsStarted")] DotaUmRockPaperScissorsStarted = 614,
    [pbr::OriginalName("DOTA_UM_RockPaperScissorsFinished")] DotaUmRockPaperScissorsFinished = 615,
    [pbr::OriginalName("DOTA_UM_DuelOpponentKilled")] DotaUmDuelOpponentKilled = 616,
    [pbr::OriginalName("DOTA_UM_DuelAccepted")] DotaUmDuelAccepted = 617,
    [pbr::OriginalName("DOTA_UM_DuelRequested")] DotaUmDuelRequested = 618,
    [pbr::OriginalName("DOTA_UM_MuertaReleaseEvent_AssignedTargetKilled")] DotaUmMuertaReleaseEventAssignedTargetKilled = 619,
    [pbr::OriginalName("DOTA_UM_PlayerDraftSuggestPick")] DotaUmPlayerDraftSuggestPick = 620,
    [pbr::OriginalName("DOTA_UM_PlayerDraftPick")] DotaUmPlayerDraftPick = 621,
    [pbr::OriginalName("DOTA_UM_UpdateLinearProjectileCPData")] DotaUmUpdateLinearProjectileCpdata = 622,
    [pbr::OriginalName("DOTA_UM_GiftPlayer")] DotaUmGiftPlayer = 623,
    [pbr::OriginalName("DOTA_UM_FacetPing")] DotaUmFacetPing = 624,
    [pbr::OriginalName("DOTA_UM_InnatePing")] DotaUmInnatePing = 625,
    [pbr::OriginalName("DOTA_UM_RoshanTimer")] DotaUmRoshanTimer = 626,
    [pbr::OriginalName("DOTA_UM_NeutralCraftAvailable")] DotaUmNeutralCraftAvailable = 627,
    [pbr::OriginalName("DOTA_UM_TimerAlert")] DotaUmTimerAlert = 628,
    [pbr::OriginalName("DOTA_UM_MadstoneAlert")] DotaUmMadstoneAlert = 629,
    [pbr::OriginalName("DOTA_UM_CourierLeftFountainAlert")] DotaUmCourierLeftFountainAlert = 630,
  }

  public enum DOTA_CHAT_MESSAGE {
    [pbr::OriginalName("CHAT_MESSAGE_INVALID")] ChatMessageInvalid = -1,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_KILL")] ChatMessageHeroKill = 0,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_DENY")] ChatMessageHeroDeny = 1,
    [pbr::OriginalName("CHAT_MESSAGE_BARRACKS_KILL")] ChatMessageBarracksKill = 2,
    [pbr::OriginalName("CHAT_MESSAGE_TOWER_KILL")] ChatMessageTowerKill = 3,
    [pbr::OriginalName("CHAT_MESSAGE_TOWER_DENY")] ChatMessageTowerDeny = 4,
    [pbr::OriginalName("CHAT_MESSAGE_FIRSTBLOOD")] ChatMessageFirstblood = 5,
    [pbr::OriginalName("CHAT_MESSAGE_STREAK_KILL")] ChatMessageStreakKill = 6,
    [pbr::OriginalName("CHAT_MESSAGE_BUYBACK")] ChatMessageBuyback = 7,
    [pbr::OriginalName("CHAT_MESSAGE_AEGIS")] ChatMessageAegis = 8,
    [pbr::OriginalName("CHAT_MESSAGE_ROSHAN_KILL")] ChatMessageRoshanKill = 9,
    [pbr::OriginalName("CHAT_MESSAGE_COURIER_LOST")] ChatMessageCourierLost = 10,
    [pbr::OriginalName("CHAT_MESSAGE_COURIER_RESPAWNED")] ChatMessageCourierRespawned = 11,
    [pbr::OriginalName("CHAT_MESSAGE_GLYPH_USED")] ChatMessageGlyphUsed = 12,
    [pbr::OriginalName("CHAT_MESSAGE_ITEM_PURCHASE")] ChatMessageItemPurchase = 13,
    [pbr::OriginalName("CHAT_MESSAGE_CONNECT")] ChatMessageConnect = 14,
    [pbr::OriginalName("CHAT_MESSAGE_DISCONNECT")] ChatMessageDisconnect = 15,
    [pbr::OriginalName("CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT")] ChatMessageDisconnectWaitForReconnect = 16,
    [pbr::OriginalName("CHAT_MESSAGE_DISCONNECT_TIME_REMAINING")] ChatMessageDisconnectTimeRemaining = 17,
    [pbr::OriginalName("CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL")] ChatMessageDisconnectTimeRemainingPlural = 18,
    [pbr::OriginalName("CHAT_MESSAGE_RECONNECT")] ChatMessageReconnect = 19,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_LEFT")] ChatMessagePlayerLeft = 20,
    [pbr::OriginalName("CHAT_MESSAGE_SAFE_TO_LEAVE")] ChatMessageSafeToLeave = 21,
    [pbr::OriginalName("CHAT_MESSAGE_RUNE_PICKUP")] ChatMessageRunePickup = 22,
    [pbr::OriginalName("CHAT_MESSAGE_RUNE_BOTTLE")] ChatMessageRuneBottle = 23,
    [pbr::OriginalName("CHAT_MESSAGE_RUNE_DENY")] ChatMessageRuneDeny = 114,
    [pbr::OriginalName("CHAT_MESSAGE_INTHEBAG")] ChatMessageInthebag = 24,
    [pbr::OriginalName("CHAT_MESSAGE_SECRETSHOP")] ChatMessageSecretshop = 25,
    [pbr::OriginalName("CHAT_MESSAGE_ITEM_AUTOPURCHASED")] ChatMessageItemAutopurchased = 26,
    [pbr::OriginalName("CHAT_MESSAGE_ITEMS_COMBINED")] ChatMessageItemsCombined = 27,
    [pbr::OriginalName("CHAT_MESSAGE_SUPER_CREEPS")] ChatMessageSuperCreeps = 28,
    [pbr::OriginalName("CHAT_MESSAGE_CANT_USE_ACTION_ITEM")] ChatMessageCantUseActionItem = 29,
    [pbr::OriginalName("CHAT_MESSAGE_CANTPAUSE")] ChatMessageCantpause = 31,
    [pbr::OriginalName("CHAT_MESSAGE_NOPAUSESLEFT")] ChatMessageNopausesleft = 32,
    [pbr::OriginalName("CHAT_MESSAGE_CANTPAUSEYET")] ChatMessageCantpauseyet = 33,
    [pbr::OriginalName("CHAT_MESSAGE_PAUSED")] ChatMessagePaused = 34,
    [pbr::OriginalName("CHAT_MESSAGE_UNPAUSE_COUNTDOWN")] ChatMessageUnpauseCountdown = 35,
    [pbr::OriginalName("CHAT_MESSAGE_UNPAUSED")] ChatMessageUnpaused = 36,
    [pbr::OriginalName("CHAT_MESSAGE_AUTO_UNPAUSED")] ChatMessageAutoUnpaused = 37,
    [pbr::OriginalName("CHAT_MESSAGE_YOUPAUSED")] ChatMessageYoupaused = 38,
    [pbr::OriginalName("CHAT_MESSAGE_CANTUNPAUSETEAM")] ChatMessageCantunpauseteam = 39,
    [pbr::OriginalName("CHAT_MESSAGE_VOICE_TEXT_BANNED")] ChatMessageVoiceTextBanned = 41,
    [pbr::OriginalName("CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME")] ChatMessageSpectatorsWatchingThisGame = 42,
    [pbr::OriginalName("CHAT_MESSAGE_REPORT_REMINDER")] ChatMessageReportReminder = 43,
    [pbr::OriginalName("CHAT_MESSAGE_ECON_ITEM")] ChatMessageEconItem = 44,
    [pbr::OriginalName("CHAT_MESSAGE_TAUNT")] ChatMessageTaunt = 45,
    [pbr::OriginalName("CHAT_MESSAGE_RANDOM")] ChatMessageRandom = 46,
    [pbr::OriginalName("CHAT_MESSAGE_RD_TURN")] ChatMessageRdTurn = 47,
    [pbr::OriginalName("CHAT_MESSAGE_DROP_RATE_BONUS")] ChatMessageDropRateBonus = 49,
    [pbr::OriginalName("CHAT_MESSAGE_NO_BATTLE_POINTS")] ChatMessageNoBattlePoints = 50,
    [pbr::OriginalName("CHAT_MESSAGE_DENIED_AEGIS")] ChatMessageDeniedAegis = 51,
    [pbr::OriginalName("CHAT_MESSAGE_INFORMATIONAL")] ChatMessageInformational = 52,
    [pbr::OriginalName("CHAT_MESSAGE_AEGIS_STOLEN")] ChatMessageAegisStolen = 53,
    [pbr::OriginalName("CHAT_MESSAGE_ROSHAN_CANDY")] ChatMessageRoshanCandy = 54,
    [pbr::OriginalName("CHAT_MESSAGE_ITEM_GIFTED")] ChatMessageItemGifted = 55,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_KILL_WITH_GREEVIL")] ChatMessageHeroKillWithGreevil = 56,
    [pbr::OriginalName("CHAT_MESSAGE_HOLDOUT_TOWER_DESTROYED")] ChatMessageHoldoutTowerDestroyed = 57,
    [pbr::OriginalName("CHAT_MESSAGE_HOLDOUT_WALL_DESTROYED")] ChatMessageHoldoutWallDestroyed = 58,
    [pbr::OriginalName("CHAT_MESSAGE_HOLDOUT_WALL_FINISHED")] ChatMessageHoldoutWallFinished = 59,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_LEFT_LIMITED_HERO")] ChatMessagePlayerLeftLimitedHero = 62,
    [pbr::OriginalName("CHAT_MESSAGE_ABANDON_LIMITED_HERO_EXPLANATION")] ChatMessageAbandonLimitedHeroExplanation = 63,
    [pbr::OriginalName("CHAT_MESSAGE_DISCONNECT_LIMITED_HERO")] ChatMessageDisconnectLimitedHero = 64,
    [pbr::OriginalName("CHAT_MESSAGE_LOW_PRIORITY_COMPLETED_EXPLANATION")] ChatMessageLowPriorityCompletedExplanation = 65,
    [pbr::OriginalName("CHAT_MESSAGE_RECRUITMENT_DROP_RATE_BONUS")] ChatMessageRecruitmentDropRateBonus = 66,
    [pbr::OriginalName("CHAT_MESSAGE_FROSTIVUS_SHINING_BOOSTER_ACTIVE")] ChatMessageFrostivusShiningBoosterActive = 67,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_LEFT_AFK")] ChatMessagePlayerLeftAfk = 73,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_LEFT_DISCONNECTED_TOO_LONG")] ChatMessagePlayerLeftDisconnectedTooLong = 74,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_ABANDONED")] ChatMessagePlayerAbandoned = 75,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_ABANDONED_AFK")] ChatMessagePlayerAbandonedAfk = 76,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_ABANDONED_DISCONNECTED_TOO_LONG")] ChatMessagePlayerAbandonedDisconnectedTooLong = 77,
    [pbr::OriginalName("CHAT_MESSAGE_WILL_NOT_BE_SCORED")] ChatMessageWillNotBeScored = 78,
    [pbr::OriginalName("CHAT_MESSAGE_WILL_NOT_BE_SCORED_RANKED")] ChatMessageWillNotBeScoredRanked = 79,
    [pbr::OriginalName("CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK")] ChatMessageWillNotBeScoredNetwork = 80,
    [pbr::OriginalName("CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK_RANKED")] ChatMessageWillNotBeScoredNetworkRanked = 81,
    [pbr::OriginalName("CHAT_MESSAGE_CAN_QUIT_WITHOUT_ABANDON")] ChatMessageCanQuitWithoutAbandon = 82,
    [pbr::OriginalName("CHAT_MESSAGE_RANKED_GAME_STILL_SCORED_LEAVERS_GET_LOSS")] ChatMessageRankedGameStillScoredLeaversGetLoss = 83,
    [pbr::OriginalName("CHAT_MESSAGE_ABANDON_RANKED_BEFORE_FIRST_BLOOD_PARTY")] ChatMessageAbandonRankedBeforeFirstBloodParty = 84,
    [pbr::OriginalName("CHAT_MESSAGE_COMPENDIUM_LEVEL")] ChatMessageCompendiumLevel = 85,
    [pbr::OriginalName("CHAT_MESSAGE_VICTORY_PREDICTION_STREAK")] ChatMessageVictoryPredictionStreak = 86,
    [pbr::OriginalName("CHAT_MESSAGE_ASSASSIN_ANNOUNCE")] ChatMessageAssassinAnnounce = 87,
    [pbr::OriginalName("CHAT_MESSAGE_ASSASSIN_SUCCESS")] ChatMessageAssassinSuccess = 88,
    [pbr::OriginalName("CHAT_MESSAGE_ASSASSIN_DENIED")] ChatMessageAssassinDenied = 89,
    [pbr::OriginalName("CHAT_MESSAGE_VICTORY_PREDICTION_SINGLE_USER_CONFIRM")] ChatMessageVictoryPredictionSingleUserConfirm = 90,
    [pbr::OriginalName("CHAT_MESSAGE_EFFIGY_KILL")] ChatMessageEffigyKill = 91,
    [pbr::OriginalName("CHAT_MESSAGE_VOICE_TEXT_BANNED_OVERFLOW")] ChatMessageVoiceTextBannedOverflow = 92,
    [pbr::OriginalName("CHAT_MESSAGE_YEAR_BEAST_KILLED")] ChatMessageYearBeastKilled = 93,
    [pbr::OriginalName("CHAT_MESSAGE_PAUSE_COUNTDOWN")] ChatMessagePauseCountdown = 94,
    [pbr::OriginalName("CHAT_MESSAGE_COINS_WAGERED")] ChatMessageCoinsWagered = 95,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_NOMINATED_BAN")] ChatMessageHeroNominatedBan = 96,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_BANNED")] ChatMessageHeroBanned = 97,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_BAN_COUNT")] ChatMessageHeroBanCount = 98,
    [pbr::OriginalName("CHAT_MESSAGE_RIVER_PAINTED")] ChatMessageRiverPainted = 99,
    [pbr::OriginalName("CHAT_MESSAGE_SCAN_USED")] ChatMessageScanUsed = 100,
    [pbr::OriginalName("CHAT_MESSAGE_SHRINE_KILLED")] ChatMessageShrineKilled = 101,
    [pbr::OriginalName("CHAT_MESSAGE_WAGER_TOKEN_SPENT")] ChatMessageWagerTokenSpent = 102,
    [pbr::OriginalName("CHAT_MESSAGE_RANK_WAGER")] ChatMessageRankWager = 103,
    [pbr::OriginalName("CHAT_MESSAGE_NEW_PLAYER_REMINDER")] ChatMessageNewPlayerReminder = 104,
    [pbr::OriginalName("CHAT_MESSAGE_OBSERVER_WARD_KILLED")] ChatMessageObserverWardKilled = 105,
    [pbr::OriginalName("CHAT_MESSAGE_SENTRY_WARD_KILLED")] ChatMessageSentryWardKilled = 106,
    [pbr::OriginalName("CHAT_MESSAGE_ITEM_PLACED_IN_NEUTRAL_STASH")] ChatMessageItemPlacedInNeutralStash = 107,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_CHOICE_INVALID")] ChatMessageHeroChoiceInvalid = 108,
    [pbr::OriginalName("CHAT_MESSAGE_BOUNTY")] ChatMessageBounty = 109,
    [pbr::OriginalName("CHAT_MESSAGE_ABILITY_DRAFT_START")] ChatMessageAbilityDraftStart = 110,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_FOUND_CANDY")] ChatMessageHeroFoundCandy = 111,
    [pbr::OriginalName("CHAT_MESSAGE_ABILITY_DRAFT_RANDOMED")] ChatMessageAbilityDraftRandomed = 112,
    [pbr::OriginalName("CHAT_MESSAGE_PRIVATE_COACH_CONNECTED")] ChatMessagePrivateCoachConnected = 113,
    [pbr::OriginalName("CHAT_MESSAGE_CANT_PAUSE_TOO_EARLY")] ChatMessageCantPauseTooEarly = 115,
    [pbr::OriginalName("CHAT_MESSAGE_HERO_KILL_WITH_PENGUIN")] ChatMessageHeroKillWithPenguin = 116,
    [pbr::OriginalName("CHAT_MESSAGE_MINIBOSS_KILL")] ChatMessageMinibossKill = 117,
    [pbr::OriginalName("CHAT_MESSAGE_PLAYER_IN_GAME_BAN_TEXT")] ChatMessagePlayerInGameBanText = 118,
    [pbr::OriginalName("CHAT_MESSAGE_BANNER_PLANTED")] ChatMessageBannerPlanted = 119,
    [pbr::OriginalName("CHAT_MESSAGE_ALCHEMIST_GRANTED_SCEPTER")] ChatMessageAlchemistGrantedScepter = 120,
    [pbr::OriginalName("CHAT_MESSAGE_PROTECTOR_SPAWNED")] ChatMessageProtectorSpawned = 121,
    [pbr::OriginalName("CHAT_MESSAGE_CRAFTING_XP")] ChatMessageCraftingXp = 122,
    [pbr::OriginalName("CHAT_MESSAGE_ROSHAN_ROAR")] ChatMessageRoshanRoar = 123,
  }

  public enum DOTA_NO_BATTLE_POINTS_REASONS {
    [pbr::OriginalName("NO_BATTLE_POINTS_WRONG_LOBBY_TYPE")] NoBattlePointsWrongLobbyType = 1,
    [pbr::OriginalName("NO_BATTLE_POINTS_PRACTICE_BOTS")] NoBattlePointsPracticeBots = 2,
    [pbr::OriginalName("NO_BATTLE_POINTS_CHEATS_ENABLED")] NoBattlePointsCheatsEnabled = 3,
    [pbr::OriginalName("NO_BATTLE_POINTS_LOW_PRIORITY")] NoBattlePointsLowPriority = 4,
  }

  public enum DOTA_CHAT_INFORMATIONAL {
    [pbr::OriginalName("INFO_COOP_BATTLE_POINTS_RULES")] InfoCoopBattlePointsRules = 1,
    [pbr::OriginalName("INFO_FROSTIVUS_ABANDON_REMINDER")] InfoFrostivusAbandonReminder = 2,
    [pbr::OriginalName("INFO_RANKED_REMINDER")] InfoRankedReminder = 3,
    [pbr::OriginalName("INFO_COOP_LOW_PRIORITY_PASSIVE_REMINDER")] InfoCoopLowPriorityPassiveReminder = 4,
    [pbr::OriginalName("INFO_CUSTOM_GAME_PENALTY_REMINDER")] InfoCustomGamePenaltyReminder = 5,
  }

  public enum DOTA_ABILITY_PING_TYPE {
    [pbr::OriginalName("ABILITY_PING_READY")] AbilityPingReady = 1,
    [pbr::OriginalName("ABILITY_PING_MANA")] AbilityPingMana = 2,
    [pbr::OriginalName("ABILITY_PING_COOLDOWN")] AbilityPingCooldown = 3,
    [pbr::OriginalName("ABILITY_PING_ENEMY")] AbilityPingEnemy = 4,
    [pbr::OriginalName("ABILITY_PING_UNLEARNED")] AbilityPingUnlearned = 5,
    [pbr::OriginalName("ABILITY_PING_INBACKPACK")] AbilityPingInbackpack = 6,
    [pbr::OriginalName("ABILITY_PING_INSTASH")] AbilityPingInstash = 7,
    [pbr::OriginalName("ABILITY_PING_ONCOURIER")] AbilityPingOncourier = 8,
    [pbr::OriginalName("ABILITY_PING_ALLY")] AbilityPingAlly = 9,
    [pbr::OriginalName("ABILITY_PING_LEARN_READY")] AbilityPingLearnReady = 10,
    [pbr::OriginalName("ABILITY_PING_WILL_LEARN")] AbilityPingWillLearn = 11,
    [pbr::OriginalName("ABILITY_PING_FUTURE_LEARN")] AbilityPingFutureLearn = 12,
    [pbr::OriginalName("ABILITY_PING_NEUTRAL_OFFER")] AbilityPingNeutralOffer = 13,
    [pbr::OriginalName("ABILITY_PING_NEUTRAL_REQUEST")] AbilityPingNeutralRequest = 14,
    [pbr::OriginalName("ABILITY_PING_NEUTRAL_EQUIP")] AbilityPingNeutralEquip = 15,
    [pbr::OriginalName("ABILITY_PING_INCOURIERBACKPACK")] AbilityPingIncourierbackpack = 16,
  }

  public enum DOTA_REPLAY_STATE_EVENT {
    [pbr::OriginalName("DOTA_REPLAY_STATE_EVENT_GAME_START")] GameStart = 1,
    [pbr::OriginalName("DOTA_REPLAY_STATE_EVENT_STARTING_HORN")] StartingHorn = 2,
    [pbr::OriginalName("DOTA_REPLAY_STATE_EVENT_FIRST_BLOOD")] FirstBlood = 3,
    [pbr::OriginalName("DOTA_REPLAY_STATE_EVENT_SHOWCASE")] Showcase = 4,
    [pbr::OriginalName("DOTA_REPLAY_STATE_EVENT_POST_GAME")] PostGame = 5,
    [pbr::OriginalName("DOTA_REPLAY_STATE_EVENT_WAIT_FOR_MAP")] WaitForMap = 6,
  }

  public enum EDotaEntityMessages {
    [pbr::OriginalName("DOTA_UNIT_SPEECH")] DotaUnitSpeech = 0,
    [pbr::OriginalName("DOTA_UNIT_SPEECH_MUTE")] DotaUnitSpeechMute = 1,
    [pbr::OriginalName("DOTA_UNIT_ADD_GESTURE")] DotaUnitAddGesture = 2,
    [pbr::OriginalName("DOTA_UNIT_REMOVE_GESTURE")] DotaUnitRemoveGesture = 3,
    [pbr::OriginalName("DOTA_UNIT_REMOVE_ALL_GESTURES")] DotaUnitRemoveAllGestures = 4,
    [pbr::OriginalName("DOTA_UNIT_FADE_GESTURE")] DotaUnitFadeGesture = 6,
    [pbr::OriginalName("DOTA_UNIT_SPEECH_CLIENTSIDE_RULES")] DotaUnitSpeechClientsideRules = 7,
  }

  public enum DOTA_OVERHEAD_ALERT {
    [pbr::OriginalName("OVERHEAD_ALERT_GOLD")] OverheadAlertGold = 0,
    [pbr::OriginalName("OVERHEAD_ALERT_DENY")] OverheadAlertDeny = 1,
    [pbr::OriginalName("OVERHEAD_ALERT_CRITICAL")] OverheadAlertCritical = 2,
    [pbr::OriginalName("OVERHEAD_ALERT_XP")] OverheadAlertXp = 3,
    [pbr::OriginalName("OVERHEAD_ALERT_BONUS_SPELL_DAMAGE")] OverheadAlertBonusSpellDamage = 4,
    [pbr::OriginalName("OVERHEAD_ALERT_MISS")] OverheadAlertMiss = 5,
    [pbr::OriginalName("OVERHEAD_ALERT_DAMAGE")] OverheadAlertDamage = 6,
    [pbr::OriginalName("OVERHEAD_ALERT_EVADE")] OverheadAlertEvade = 7,
    [pbr::OriginalName("OVERHEAD_ALERT_BLOCK")] OverheadAlertBlock = 8,
    [pbr::OriginalName("OVERHEAD_ALERT_BONUS_POISON_DAMAGE")] OverheadAlertBonusPoisonDamage = 9,
    [pbr::OriginalName("OVERHEAD_ALERT_HEAL")] OverheadAlertHeal = 10,
    [pbr::OriginalName("OVERHEAD_ALERT_MANA_ADD")] OverheadAlertManaAdd = 11,
    [pbr::OriginalName("OVERHEAD_ALERT_MANA_LOSS")] OverheadAlertManaLoss = 12,
    [pbr::OriginalName("OVERHEAD_ALERT_MAGICAL_BLOCK")] OverheadAlertMagicalBlock = 16,
    [pbr::OriginalName("OVERHEAD_ALERT_INCOMING_DAMAGE")] OverheadAlertIncomingDamage = 17,
    [pbr::OriginalName("OVERHEAD_ALERT_OUTGOING_DAMAGE")] OverheadAlertOutgoingDamage = 18,
    [pbr::OriginalName("OVERHEAD_ALERT_DISABLE_RESIST")] OverheadAlertDisableResist = 19,
    [pbr::OriginalName("OVERHEAD_ALERT_DEATH")] OverheadAlertDeath = 20,
    [pbr::OriginalName("OVERHEAD_ALERT_BLOCKED")] OverheadAlertBlocked = 21,
    [pbr::OriginalName("OVERHEAD_ALERT_ITEM_RECEIVED")] OverheadAlertItemReceived = 22,
    [pbr::OriginalName("OVERHEAD_ALERT_SHARD")] OverheadAlertShard = 23,
    [pbr::OriginalName("OVERHEAD_ALERT_DEADLY_BLOW")] OverheadAlertDeadlyBlow = 24,
    [pbr::OriginalName("OVERHEAD_ALERT_FORCE_MISS")] OverheadAlertForceMiss = 25,
  }

  public enum DOTA_ROSHAN_PHASE {
    [pbr::OriginalName("k_SRSP_ROSHAN_ALIVE")] KSrspRoshanAlive = 0,
    [pbr::OriginalName("k_SRSP_ROSHAN_BASE_TIMER")] KSrspRoshanBaseTimer = 1,
    [pbr::OriginalName("k_SRSP_ROSHAN_VISIBLE_TIMER")] KSrspRoshanVisibleTimer = 2,
  }

  public enum DOTA_POSITION_CATEGORY {
    [pbr::OriginalName("DOTA_POSITION_NONE")] DotaPositionNone = 0,
    [pbr::OriginalName("DOTA_POSITION_BOTTOM_LANE")] DotaPositionBottomLane = 1,
    [pbr::OriginalName("DOTA_POSITION_MID_LANE")] DotaPositionMidLane = 2,
    [pbr::OriginalName("DOTA_POSITION_TOP_LANE")] DotaPositionTopLane = 3,
    [pbr::OriginalName("DOTA_POSITION_RADIANT_JUNGLE")] DotaPositionRadiantJungle = 4,
    [pbr::OriginalName("DOTA_POSITION_DIRE_JUNGLE")] DotaPositionDireJungle = 5,
    [pbr::OriginalName("DOTA_POSITION_RADIANT_ANCIENTS")] DotaPositionRadiantAncients = 6,
    [pbr::OriginalName("DOTA_POSITION_DIRE_ANCIENTS")] DotaPositionDireAncients = 7,
    [pbr::OriginalName("DOTA_POSITION_RADIANT_SECRET_SHOP")] DotaPositionRadiantSecretShop = 8,
    [pbr::OriginalName("DOTA_POSITION_DIRE_SECRET_SHOP")] DotaPositionDireSecretShop = 9,
    [pbr::OriginalName("DOTA_POSITION_RIVER")] DotaPositionRiver = 10,
    [pbr::OriginalName("DOTA_POSITION_ROSHAN_PIT")] DotaPositionRoshanPit = 11,
    [pbr::OriginalName("DOTA_POSITION_RADIANT_BASE")] DotaPositionRadiantBase = 12,
    [pbr::OriginalName("DOTA_POSITION_DIRE_BASE")] DotaPositionDireBase = 13,
    [pbr::OriginalName("DOTA_POSITION_FOUNTAIN")] DotaPositionFountain = 14,
    [pbr::OriginalName("DOTA_POSITION_OTHER")] DotaPositionOther = 15,
  }

  public enum DOTA_ABILITY_TARGET_TYPE {
    [pbr::OriginalName("DOTA_ABILITY_TARGET_NONE")] DotaAbilityTargetNone = 0,
    [pbr::OriginalName("DOTA_ABILITY_TARGET_SELF")] DotaAbilityTargetSelf = 1,
    [pbr::OriginalName("DOTA_ABILITY_TARGET_ALLY_HERO")] DotaAbilityTargetAllyHero = 2,
    [pbr::OriginalName("DOTA_ABILITY_TARGET_ALLY_CREEP")] DotaAbilityTargetAllyCreep = 3,
    [pbr::OriginalName("DOTA_ABILITY_TARGET_ENEMY_HERO")] DotaAbilityTargetEnemyHero = 4,
    [pbr::OriginalName("DOTA_ABILITY_TARGET_ENEMY_CREEP")] DotaAbilityTargetEnemyCreep = 5,
  }

  public enum EHeroStatType {
    [pbr::OriginalName("k_EHeroStatType_None")] KEheroStatTypeNone = 0,
    [pbr::OriginalName("k_EHeroStatType_AxeTotalDamage")] KEheroStatTypeAxeTotalDamage = 2000,
    [pbr::OriginalName("k_EHeroStatType_BattleHungerDamage")] KEheroStatTypeBattleHungerDamage = 2001,
    [pbr::OriginalName("k_EHeroStatType_CounterHelixDamage")] KEheroStatTypeCounterHelixDamage = 2002,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeDamage")] KEheroStatTypeCullingBladeDamage = 2003,
    [pbr::OriginalName("k_EHeroStatType_BerserkersCallCastCount")] KEheroStatTypeBerserkersCallCastCount = 2004,
    [pbr::OriginalName("k_EHeroStatType_BerserkersCallHeroesHitAverage")] KEheroStatTypeBerserkersCallHeroesHitAverage = 2005,
    [pbr::OriginalName("k_EHeroStatType_BerserkersCallOtherUnitsHit")] KEheroStatTypeBerserkersCallOtherUnitsHit = 2006,
    [pbr::OriginalName("k_EHeroStatType_BerserkersCallHeroAttacksTaken")] KEheroStatTypeBerserkersCallHeroAttacksTaken = 2007,
    [pbr::OriginalName("k_EHeroStatType_BerserkersCallOtherAttacksTaken")] KEheroStatTypeBerserkersCallOtherAttacksTaken = 2008,
    [pbr::OriginalName("k_EHeroStatType_BattleHungerCastCount")] KEheroStatTypeBattleHungerCastCount = 2009,
    [pbr::OriginalName("k_EHeroStatType_BattleHungerPotentialDuration")] KEheroStatTypeBattleHungerPotentialDuration = 2010,
    [pbr::OriginalName("k_EHeroStatType_BattleHungerAverageDuration")] KEheroStatTypeBattleHungerAverageDuration = 2011,
    [pbr::OriginalName("k_EHeroStatType_CounterHelixProcCount")] KEheroStatTypeCounterHelixProcCount = 2012,
    [pbr::OriginalName("k_EHeroStatType_CounterHelixHeroProcCount")] KEheroStatTypeCounterHelixHeroProcCount = 2013,
    [pbr::OriginalName("k_EHeroStatType_CounterHelixHeroesHitAverage")] KEheroStatTypeCounterHelixHeroesHitAverage = 2014,
    [pbr::OriginalName("k_EHeroStatType_CounterHelixOtherUnitsHitCount")] KEheroStatTypeCounterHelixOtherUnitsHitCount = 2015,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeCastCount")] KEheroStatTypeCullingBladeCastCount = 2016,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeKillCount")] KEheroStatTypeCullingBladeKillCount = 2017,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeAverageHealthCulled")] KEheroStatTypeCullingBladeAverageHealthCulled = 2018,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeAverageDamageAvailable")] KEheroStatTypeCullingBladeAverageDamageAvailable = 2019,
    [pbr::OriginalName("k_EHeroStatType_CullingBladeHeroBuffAverage")] KEheroStatTypeCullingBladeHeroBuffAverage = 2020,
  }

  public enum EPlayerVoiceListenState {
    [pbr::OriginalName("kPVLS_None")] KPvlsNone = 0,
    [pbr::OriginalName("kPVLS_DeniedChatBanned")] KPvlsDeniedChatBanned = 1,
    [pbr::OriginalName("kPVLS_DeniedPartner")] KPvlsDeniedPartner = 2,
    [pbr::OriginalName("kPVLS_DeniedHLTVTalkerNotSpectator")] KPvlsDeniedHltvtalkerNotSpectator = 3,
    [pbr::OriginalName("kPVLS_DeniedHLTVNoTalkerPlayerID")] KPvlsDeniedHltvnoTalkerPlayerId = 4,
    [pbr::OriginalName("kPVLS_DeniedHLTVTalkerNotBroadcaster")] KPvlsDeniedHltvtalkerNotBroadcaster = 5,
    [pbr::OriginalName("kPVLS_DeniedTeamSpectator")] KPvlsDeniedTeamSpectator = 6,
    [pbr::OriginalName("kPVLS_DeniedStudent")] KPvlsDeniedStudent = 8,
    [pbr::OriginalName("kPVLS_DeniedPrivateCoach")] KPvlsDeniedPrivateCoach = 9,
    [pbr::OriginalName("kPVLS_Denied")] KPvlsDenied = 64,
    [pbr::OriginalName("kPVLS_AllowHLTVTalkerIsBroadcaster")] KPvlsAllowHltvtalkerIsBroadcaster = 65,
    [pbr::OriginalName("kPVLS_AllowCoBroadcaster")] KPvlsAllowCoBroadcaster = 66,
    [pbr::OriginalName("kPVLS_AllowAllChat")] KPvlsAllowAllChat = 67,
    [pbr::OriginalName("kPVLS_AllowStudentToCoach")] KPvlsAllowStudentToCoach = 68,
    [pbr::OriginalName("kPVLS_AllowFellowStudent")] KPvlsAllowFellowStudent = 69,
    [pbr::OriginalName("kPVLS_AllowTalkerIsCoach")] KPvlsAllowTalkerIsCoach = 70,
    [pbr::OriginalName("kPVLS_AllowCoachHearTeam")] KPvlsAllowCoachHearTeam = 71,
    [pbr::OriginalName("kPVLS_AllowSameTeam")] KPvlsAllowSameTeam = 72,
    [pbr::OriginalName("kPVLS_AllowShowcase")] KPvlsAllowShowcase = 73,
    [pbr::OriginalName("kPVLS_AllowPrivateCoach")] KPvlsAllowPrivateCoach = 74,
  }

  public enum EProjectionEvent {
    [pbr::OriginalName("ePE_FirstBlood")] EPeFirstBlood = 0,
    [pbr::OriginalName("ePE_Killstreak_godlike")] EPeKillstreakGodlike = 1,
  }

  #endregion

  #region Messages
  public sealed partial class CDOTAUserMsg_AIDebugLine : pb::IMessage<CDOTAUserMsg_AIDebugLine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_AIDebugLine> _parser = new pb::MessageParser<CDOTAUserMsg_AIDebugLine>(() => new CDOTAUserMsg_AIDebugLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_AIDebugLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AIDebugLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AIDebugLine(CDOTAUserMsg_AIDebugLine other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AIDebugLine Clone() {
      return new CDOTAUserMsg_AIDebugLine(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_AIDebugLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_AIDebugLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMessage) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMessage) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_AIDebugLine other) {
      if (other == null) {
        return;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_Ping : pb::IMessage<CDOTAUserMsg_Ping>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_Ping> _parser = new pb::MessageParser<CDOTAUserMsg_Ping>(() => new CDOTAUserMsg_Ping());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_Ping(CDOTAUserMsg_Ping other) : this() {
      _hasBits0 = other._hasBits0;
      ping_ = other.ping_;
      loss_ = other.loss_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_Ping Clone() {
      return new CDOTAUserMsg_Ping(this);
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 2;
    private readonly static uint PingDefaultValue = 0;

    private uint ping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ping {
      get { if ((_hasBits0 & 1) != 0) { return ping_; } else { return PingDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ping_ = value;
      }
    }
    /// <summary>Gets whether the "ping" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPing {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ping" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPing() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "loss" field.</summary>
    public const int LossFieldNumber = 3;
    private readonly static uint LossDefaultValue = 0;

    private uint loss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Loss {
      get { if ((_hasBits0 & 2) != 0) { return loss_; } else { return LossDefaultValue; } }
      set {
        _hasBits0 |= 2;
        loss_ = value;
      }
    }
    /// <summary>Gets whether the "loss" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLoss {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "loss" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLoss() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ping != other.Ping) return false;
      if (Loss != other.Loss) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPing) hash ^= Ping.GetHashCode();
      if (HasLoss) hash ^= Loss.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPing) {
        output.WriteRawTag(16);
        output.WriteUInt32(Ping);
      }
      if (HasLoss) {
        output.WriteRawTag(24);
        output.WriteUInt32(Loss);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPing) {
        output.WriteRawTag(16);
        output.WriteUInt32(Ping);
      }
      if (HasLoss) {
        output.WriteRawTag(24);
        output.WriteUInt32(Loss);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPing) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ping);
      }
      if (HasLoss) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Loss);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_Ping other) {
      if (other == null) {
        return;
      }
      if (other.HasPing) {
        Ping = other.Ping;
      }
      if (other.HasLoss) {
        Loss = other.Loss;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Ping = input.ReadUInt32();
            break;
          }
          case 24: {
            Loss = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            Ping = input.ReadUInt32();
            break;
          }
          case 24: {
            Loss = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SwapVerify : pb::IMessage<CDOTAUserMsg_SwapVerify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SwapVerify> _parser = new pb::MessageParser<CDOTAUserMsg_SwapVerify>(() => new CDOTAUserMsg_SwapVerify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SwapVerify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SwapVerify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SwapVerify(CDOTAUserMsg_SwapVerify other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SwapVerify Clone() {
      return new CDOTAUserMsg_SwapVerify(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SwapVerify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SwapVerify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SwapVerify other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ChatEvent : pb::IMessage<CDOTAUserMsg_ChatEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ChatEvent> _parser = new pb::MessageParser<CDOTAUserMsg_ChatEvent>(() => new CDOTAUserMsg_ChatEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ChatEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatEvent(CDOTAUserMsg_ChatEvent other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      value_ = other.value_;
      playerid1_ = other.playerid1_;
      playerid2_ = other.playerid2_;
      playerid3_ = other.playerid3_;
      playerid4_ = other.playerid4_;
      playerid5_ = other.playerid5_;
      playerid6_ = other.playerid6_;
      value2_ = other.value2_;
      value3_ = other.value3_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatEvent Clone() {
      return new CDOTAUserMsg_ChatEvent(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.DOTA_CHAT_MESSAGE TypeDefaultValue = global::Steam.Protos.Dota2.DOTA_CHAT_MESSAGE.ChatMessageInvalid;

    private global::Steam.Protos.Dota2.DOTA_CHAT_MESSAGE type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_CHAT_MESSAGE Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static uint ValueDefaultValue = 0;

    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { if ((_hasBits0 & 2) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "playerid_1" field.</summary>
    public const int Playerid1FieldNumber = 3;
    private readonly static int Playerid1DefaultValue = -1;

    private int playerid1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid1 {
      get { if ((_hasBits0 & 4) != 0) { return playerid1_; } else { return Playerid1DefaultValue; } }
      set {
        _hasBits0 |= 4;
        playerid1_ = value;
      }
    }
    /// <summary>Gets whether the "playerid_1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerid1 {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "playerid_1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerid1() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "playerid_2" field.</summary>
    public const int Playerid2FieldNumber = 4;
    private readonly static int Playerid2DefaultValue = -1;

    private int playerid2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid2 {
      get { if ((_hasBits0 & 8) != 0) { return playerid2_; } else { return Playerid2DefaultValue; } }
      set {
        _hasBits0 |= 8;
        playerid2_ = value;
      }
    }
    /// <summary>Gets whether the "playerid_2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerid2 {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "playerid_2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerid2() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "playerid_3" field.</summary>
    public const int Playerid3FieldNumber = 5;
    private readonly static int Playerid3DefaultValue = -1;

    private int playerid3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid3 {
      get { if ((_hasBits0 & 16) != 0) { return playerid3_; } else { return Playerid3DefaultValue; } }
      set {
        _hasBits0 |= 16;
        playerid3_ = value;
      }
    }
    /// <summary>Gets whether the "playerid_3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerid3 {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "playerid_3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerid3() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "playerid_4" field.</summary>
    public const int Playerid4FieldNumber = 6;
    private readonly static int Playerid4DefaultValue = -1;

    private int playerid4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid4 {
      get { if ((_hasBits0 & 32) != 0) { return playerid4_; } else { return Playerid4DefaultValue; } }
      set {
        _hasBits0 |= 32;
        playerid4_ = value;
      }
    }
    /// <summary>Gets whether the "playerid_4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerid4 {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "playerid_4" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerid4() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "playerid_5" field.</summary>
    public const int Playerid5FieldNumber = 7;
    private readonly static int Playerid5DefaultValue = -1;

    private int playerid5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid5 {
      get { if ((_hasBits0 & 64) != 0) { return playerid5_; } else { return Playerid5DefaultValue; } }
      set {
        _hasBits0 |= 64;
        playerid5_ = value;
      }
    }
    /// <summary>Gets whether the "playerid_5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerid5 {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "playerid_5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerid5() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "playerid_6" field.</summary>
    public const int Playerid6FieldNumber = 8;
    private readonly static int Playerid6DefaultValue = -1;

    private int playerid6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerid6 {
      get { if ((_hasBits0 & 128) != 0) { return playerid6_; } else { return Playerid6DefaultValue; } }
      set {
        _hasBits0 |= 128;
        playerid6_ = value;
      }
    }
    /// <summary>Gets whether the "playerid_6" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerid6 {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "playerid_6" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerid6() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "value2" field.</summary>
    public const int Value2FieldNumber = 9;
    private readonly static uint Value2DefaultValue = 0;

    private uint value2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value2 {
      get { if ((_hasBits0 & 256) != 0) { return value2_; } else { return Value2DefaultValue; } }
      set {
        _hasBits0 |= 256;
        value2_ = value;
      }
    }
    /// <summary>Gets whether the "value2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue2 {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "value2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue2() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "value3" field.</summary>
    public const int Value3FieldNumber = 10;
    private readonly static uint Value3DefaultValue = 0;

    private uint value3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value3 {
      get { if ((_hasBits0 & 512) != 0) { return value3_; } else { return Value3DefaultValue; } }
      set {
        _hasBits0 |= 512;
        value3_ = value;
      }
    }
    /// <summary>Gets whether the "value3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue3 {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "value3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue3() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 11;
    private readonly static float TimeDefaultValue = 0F;

    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { if ((_hasBits0 & 1024) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ChatEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ChatEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      if (Playerid1 != other.Playerid1) return false;
      if (Playerid2 != other.Playerid2) return false;
      if (Playerid3 != other.Playerid3) return false;
      if (Playerid4 != other.Playerid4) return false;
      if (Playerid5 != other.Playerid5) return false;
      if (Playerid6 != other.Playerid6) return false;
      if (Value2 != other.Value2) return false;
      if (Value3 != other.Value3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasPlayerid1) hash ^= Playerid1.GetHashCode();
      if (HasPlayerid2) hash ^= Playerid2.GetHashCode();
      if (HasPlayerid3) hash ^= Playerid3.GetHashCode();
      if (HasPlayerid4) hash ^= Playerid4.GetHashCode();
      if (HasPlayerid5) hash ^= Playerid5.GetHashCode();
      if (HasPlayerid6) hash ^= Playerid6.GetHashCode();
      if (HasValue2) hash ^= Value2.GetHashCode();
      if (HasValue3) hash ^= Value3.GetHashCode();
      if (HasTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasValue) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (HasPlayerid1) {
        output.WriteRawTag(24);
        output.WriteSInt32(Playerid1);
      }
      if (HasPlayerid2) {
        output.WriteRawTag(32);
        output.WriteSInt32(Playerid2);
      }
      if (HasPlayerid3) {
        output.WriteRawTag(40);
        output.WriteSInt32(Playerid3);
      }
      if (HasPlayerid4) {
        output.WriteRawTag(48);
        output.WriteSInt32(Playerid4);
      }
      if (HasPlayerid5) {
        output.WriteRawTag(56);
        output.WriteSInt32(Playerid5);
      }
      if (HasPlayerid6) {
        output.WriteRawTag(64);
        output.WriteSInt32(Playerid6);
      }
      if (HasValue2) {
        output.WriteRawTag(72);
        output.WriteUInt32(Value2);
      }
      if (HasValue3) {
        output.WriteRawTag(80);
        output.WriteUInt32(Value3);
      }
      if (HasTime) {
        output.WriteRawTag(93);
        output.WriteFloat(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasValue) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (HasPlayerid1) {
        output.WriteRawTag(24);
        output.WriteSInt32(Playerid1);
      }
      if (HasPlayerid2) {
        output.WriteRawTag(32);
        output.WriteSInt32(Playerid2);
      }
      if (HasPlayerid3) {
        output.WriteRawTag(40);
        output.WriteSInt32(Playerid3);
      }
      if (HasPlayerid4) {
        output.WriteRawTag(48);
        output.WriteSInt32(Playerid4);
      }
      if (HasPlayerid5) {
        output.WriteRawTag(56);
        output.WriteSInt32(Playerid5);
      }
      if (HasPlayerid6) {
        output.WriteRawTag(64);
        output.WriteSInt32(Playerid6);
      }
      if (HasValue2) {
        output.WriteRawTag(72);
        output.WriteUInt32(Value2);
      }
      if (HasValue3) {
        output.WriteRawTag(80);
        output.WriteUInt32(Value3);
      }
      if (HasTime) {
        output.WriteRawTag(93);
        output.WriteFloat(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (HasPlayerid1) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid1);
      }
      if (HasPlayerid2) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid2);
      }
      if (HasPlayerid3) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid3);
      }
      if (HasPlayerid4) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid4);
      }
      if (HasPlayerid5) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid5);
      }
      if (HasPlayerid6) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Playerid6);
      }
      if (HasValue2) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value2);
      }
      if (HasValue3) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value3);
      }
      if (HasTime) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ChatEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasPlayerid1) {
        Playerid1 = other.Playerid1;
      }
      if (other.HasPlayerid2) {
        Playerid2 = other.Playerid2;
      }
      if (other.HasPlayerid3) {
        Playerid3 = other.Playerid3;
      }
      if (other.HasPlayerid4) {
        Playerid4 = other.Playerid4;
      }
      if (other.HasPlayerid5) {
        Playerid5 = other.Playerid5;
      }
      if (other.HasPlayerid6) {
        Playerid6 = other.Playerid6;
      }
      if (other.HasValue2) {
        Value2 = other.Value2;
      }
      if (other.HasValue3) {
        Value3 = other.Value3;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Steam.Protos.Dota2.DOTA_CHAT_MESSAGE) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 24: {
            Playerid1 = input.ReadSInt32();
            break;
          }
          case 32: {
            Playerid2 = input.ReadSInt32();
            break;
          }
          case 40: {
            Playerid3 = input.ReadSInt32();
            break;
          }
          case 48: {
            Playerid4 = input.ReadSInt32();
            break;
          }
          case 56: {
            Playerid5 = input.ReadSInt32();
            break;
          }
          case 64: {
            Playerid6 = input.ReadSInt32();
            break;
          }
          case 72: {
            Value2 = input.ReadUInt32();
            break;
          }
          case 80: {
            Value3 = input.ReadUInt32();
            break;
          }
          case 93: {
            Time = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Steam.Protos.Dota2.DOTA_CHAT_MESSAGE) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 24: {
            Playerid1 = input.ReadSInt32();
            break;
          }
          case 32: {
            Playerid2 = input.ReadSInt32();
            break;
          }
          case 40: {
            Playerid3 = input.ReadSInt32();
            break;
          }
          case 48: {
            Playerid4 = input.ReadSInt32();
            break;
          }
          case 56: {
            Playerid5 = input.ReadSInt32();
            break;
          }
          case 64: {
            Playerid6 = input.ReadSInt32();
            break;
          }
          case 72: {
            Value2 = input.ReadUInt32();
            break;
          }
          case 80: {
            Value3 = input.ReadUInt32();
            break;
          }
          case 93: {
            Time = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_BotChat : pb::IMessage<CDOTAUserMsg_BotChat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_BotChat> _parser = new pb::MessageParser<CDOTAUserMsg_BotChat>(() => new CDOTAUserMsg_BotChat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_BotChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BotChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BotChat(CDOTAUserMsg_BotChat other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      message_ = other.message_;
      target_ = other.target_;
      teamOnly_ = other.teamOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BotChat Clone() {
      return new CDOTAUserMsg_BotChat(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private readonly static string TargetDefaultValue = "";

    private string target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_ ?? TargetDefaultValue; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "target" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return target_ != null; }
    }
    /// <summary>Clears the value of the "target" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      target_ = null;
    }

    /// <summary>Field number for the "team_only" field.</summary>
    public const int TeamOnlyFieldNumber = 5;
    private readonly static bool TeamOnlyDefaultValue = false;

    private bool teamOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TeamOnly {
      get { if ((_hasBits0 & 2) != 0) { return teamOnly_; } else { return TeamOnlyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        teamOnly_ = value;
      }
    }
    /// <summary>Gets whether the "team_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamOnly {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "team_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamOnly() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_BotChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_BotChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Message != other.Message) return false;
      if (Target != other.Target) return false;
      if (TeamOnly != other.TeamOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasTarget) hash ^= Target.GetHashCode();
      if (HasTeamOnly) hash ^= TeamOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasMessage) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (HasTarget) {
        output.WriteRawTag(34);
        output.WriteString(Target);
      }
      if (HasTeamOnly) {
        output.WriteRawTag(40);
        output.WriteBool(TeamOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasMessage) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (HasTarget) {
        output.WriteRawTag(34);
        output.WriteString(Target);
      }
      if (HasTeamOnly) {
        output.WriteRawTag(40);
        output.WriteBool(TeamOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (HasTeamOnly) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_BotChat other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      if (other.HasTarget) {
        Target = other.Target;
      }
      if (other.HasTeamOnly) {
        TeamOnly = other.TeamOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Target = input.ReadString();
            break;
          }
          case 40: {
            TeamOnly = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Target = input.ReadString();
            break;
          }
          case 40: {
            TeamOnly = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CombatHeroPositions : pb::IMessage<CDOTAUserMsg_CombatHeroPositions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CombatHeroPositions> _parser = new pb::MessageParser<CDOTAUserMsg_CombatHeroPositions>(() => new CDOTAUserMsg_CombatHeroPositions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CombatHeroPositions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CombatHeroPositions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CombatHeroPositions(CDOTAUserMsg_CombatHeroPositions other) : this() {
      _hasBits0 = other._hasBits0;
      index_ = other.index_;
      time_ = other.time_;
      worldPos_ = other.worldPos_ != null ? other.worldPos_.Clone() : null;
      health_ = other.health_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CombatHeroPositions Clone() {
      return new CDOTAUserMsg_CombatHeroPositions(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private readonly static uint IndexDefaultValue = 0;

    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { if ((_hasBits0 & 1) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private readonly static int TimeDefaultValue = 0;

    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { if ((_hasBits0 & 2) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "world_pos" field.</summary>
    public const int WorldPosFieldNumber = 3;
    private global::Steam.Protos.Dota2.CMsgVector2D worldPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector2D WorldPos {
      get { return worldPos_; }
      set {
        worldPos_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 4;
    private readonly static int HealthDefaultValue = 0;

    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { if ((_hasBits0 & 4) != 0) { return health_; } else { return HealthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        health_ = value;
      }
    }
    /// <summary>Gets whether the "health" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHealth {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "health" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHealth() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CombatHeroPositions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CombatHeroPositions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Time != other.Time) return false;
      if (!object.Equals(WorldPos, other.WorldPos)) return false;
      if (Health != other.Health) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasTime) hash ^= Time.GetHashCode();
      if (worldPos_ != null) hash ^= WorldPos.GetHashCode();
      if (HasHealth) hash ^= Health.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (HasTime) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (worldPos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WorldPos);
      }
      if (HasHealth) {
        output.WriteRawTag(32);
        output.WriteInt32(Health);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (HasTime) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (worldPos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WorldPos);
      }
      if (HasHealth) {
        output.WriteRawTag(32);
        output.WriteInt32(Health);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (worldPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldPos);
      }
      if (HasHealth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CombatHeroPositions other) {
      if (other == null) {
        return;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.worldPos_ != null) {
        if (worldPos_ == null) {
          WorldPos = new global::Steam.Protos.Dota2.CMsgVector2D();
        }
        WorldPos.MergeFrom(other.WorldPos);
      }
      if (other.HasHealth) {
        Health = other.Health;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
          case 26: {
            if (worldPos_ == null) {
              WorldPos = new global::Steam.Protos.Dota2.CMsgVector2D();
            }
            input.ReadMessage(WorldPos);
            break;
          }
          case 32: {
            Health = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
          case 26: {
            if (worldPos_ == null) {
              WorldPos = new global::Steam.Protos.Dota2.CMsgVector2D();
            }
            input.ReadMessage(WorldPos);
            break;
          }
          case 32: {
            Health = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CombatLogBulkData : pb::IMessage<CDOTAUserMsg_CombatLogBulkData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CombatLogBulkData> _parser = new pb::MessageParser<CDOTAUserMsg_CombatLogBulkData>(() => new CDOTAUserMsg_CombatLogBulkData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CombatLogBulkData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CombatLogBulkData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CombatLogBulkData(CDOTAUserMsg_CombatLogBulkData other) : this() {
      _hasBits0 = other._hasBits0;
      combatEntries_ = other.combatEntries_.Clone();
      timestamp_ = other.timestamp_;
      duration_ = other.duration_;
      playerId_ = other.playerId_;
      requestTime_ = other.requestTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CombatLogBulkData Clone() {
      return new CDOTAUserMsg_CombatLogBulkData(this);
    }

    /// <summary>Field number for the "combat_entries" field.</summary>
    public const int CombatEntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry> _repeated_combatEntries_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry> combatEntries_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgDOTACombatLogEntry> CombatEntries {
      get { return combatEntries_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private readonly static float TimestampDefaultValue = 0F;

    private float timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private readonly static float DurationDefaultValue = 0F;

    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { if ((_hasBits0 & 2) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 4;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 4) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 5;
    private readonly static float RequestTimeDefaultValue = 0F;

    private float requestTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RequestTime {
      get { if ((_hasBits0 & 8) != 0) { return requestTime_; } else { return RequestTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        requestTime_ = value;
      }
    }
    /// <summary>Gets whether the "request_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "request_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestTime() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CombatLogBulkData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CombatLogBulkData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!combatEntries_.Equals(other.combatEntries_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (PlayerId != other.PlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RequestTime, other.RequestTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= combatEntries_.GetHashCode();
      if (HasTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Timestamp);
      if (HasDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasRequestTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RequestTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      combatEntries_.WriteTo(output, _repeated_combatEntries_codec);
      if (HasTimestamp) {
        output.WriteRawTag(21);
        output.WriteFloat(Timestamp);
      }
      if (HasDuration) {
        output.WriteRawTag(29);
        output.WriteFloat(Duration);
      }
      if (HasPlayerId) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerId);
      }
      if (HasRequestTime) {
        output.WriteRawTag(45);
        output.WriteFloat(RequestTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      combatEntries_.WriteTo(ref output, _repeated_combatEntries_codec);
      if (HasTimestamp) {
        output.WriteRawTag(21);
        output.WriteFloat(Timestamp);
      }
      if (HasDuration) {
        output.WriteRawTag(29);
        output.WriteFloat(Duration);
      }
      if (HasPlayerId) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerId);
      }
      if (HasRequestTime) {
        output.WriteRawTag(45);
        output.WriteFloat(RequestTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += combatEntries_.CalculateSize(_repeated_combatEntries_codec);
      if (HasTimestamp) {
        size += 1 + 4;
      }
      if (HasDuration) {
        size += 1 + 4;
      }
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasRequestTime) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CombatLogBulkData other) {
      if (other == null) {
        return;
      }
      combatEntries_.Add(other.combatEntries_);
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasRequestTime) {
        RequestTime = other.RequestTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            combatEntries_.AddEntriesFrom(input, _repeated_combatEntries_codec);
            break;
          }
          case 21: {
            Timestamp = input.ReadFloat();
            break;
          }
          case 29: {
            Duration = input.ReadFloat();
            break;
          }
          case 32: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 45: {
            RequestTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            combatEntries_.AddEntriesFrom(ref input, _repeated_combatEntries_codec);
            break;
          }
          case 21: {
            Timestamp = input.ReadFloat();
            break;
          }
          case 29: {
            Duration = input.ReadFloat();
            break;
          }
          case 32: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 45: {
            RequestTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ProjectileParticleCPData : pb::IMessage<CDOTAUserMsg_ProjectileParticleCPData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ProjectileParticleCPData> _parser = new pb::MessageParser<CDOTAUserMsg_ProjectileParticleCPData>(() => new CDOTAUserMsg_ProjectileParticleCPData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ProjectileParticleCPData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectileParticleCPData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectileParticleCPData(CDOTAUserMsg_ProjectileParticleCPData other) : this() {
      _hasBits0 = other._hasBits0;
      controlPoint_ = other.controlPoint_;
      vector_ = other.vector_ != null ? other.vector_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectileParticleCPData Clone() {
      return new CDOTAUserMsg_ProjectileParticleCPData(this);
    }

    /// <summary>Field number for the "control_point" field.</summary>
    public const int ControlPointFieldNumber = 1;
    private readonly static int ControlPointDefaultValue = 0;

    private int controlPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ControlPoint {
      get { if ((_hasBits0 & 1) != 0) { return controlPoint_; } else { return ControlPointDefaultValue; } }
      set {
        _hasBits0 |= 1;
        controlPoint_ = value;
      }
    }
    /// <summary>Gets whether the "control_point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasControlPoint {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "control_point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearControlPoint() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vector" field.</summary>
    public const int VectorFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgVector vector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector Vector {
      get { return vector_; }
      set {
        vector_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ProjectileParticleCPData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ProjectileParticleCPData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControlPoint != other.ControlPoint) return false;
      if (!object.Equals(Vector, other.Vector)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasControlPoint) hash ^= ControlPoint.GetHashCode();
      if (vector_ != null) hash ^= Vector.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasControlPoint) {
        output.WriteRawTag(8);
        output.WriteInt32(ControlPoint);
      }
      if (vector_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Vector);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasControlPoint) {
        output.WriteRawTag(8);
        output.WriteInt32(ControlPoint);
      }
      if (vector_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Vector);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasControlPoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlPoint);
      }
      if (vector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vector);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ProjectileParticleCPData other) {
      if (other == null) {
        return;
      }
      if (other.HasControlPoint) {
        ControlPoint = other.ControlPoint;
      }
      if (other.vector_ != null) {
        if (vector_ == null) {
          Vector = new global::Steam.Protos.Dota2.CMsgVector();
        }
        Vector.MergeFrom(other.Vector);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ControlPoint = input.ReadInt32();
            break;
          }
          case 18: {
            if (vector_ == null) {
              Vector = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Vector);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ControlPoint = input.ReadInt32();
            break;
          }
          case 18: {
            if (vector_ == null) {
              Vector = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Vector);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_UpdateLinearProjectileCPData : pb::IMessage<CDOTAUserMsg_UpdateLinearProjectileCPData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_UpdateLinearProjectileCPData> _parser = new pb::MessageParser<CDOTAUserMsg_UpdateLinearProjectileCPData>(() => new CDOTAUserMsg_UpdateLinearProjectileCPData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_UpdateLinearProjectileCPData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UpdateLinearProjectileCPData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UpdateLinearProjectileCPData(CDOTAUserMsg_UpdateLinearProjectileCPData other) : this() {
      _hasBits0 = other._hasBits0;
      handle_ = other.handle_;
      controlPoint_ = other.controlPoint_;
      vector_ = other.vector_ != null ? other.vector_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UpdateLinearProjectileCPData Clone() {
      return new CDOTAUserMsg_UpdateLinearProjectileCPData(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private readonly static int HandleDefaultValue = 0;

    private int handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handle {
      get { if ((_hasBits0 & 1) != 0) { return handle_; } else { return HandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        handle_ = value;
      }
    }
    /// <summary>Gets whether the "handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHandle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "control_point" field.</summary>
    public const int ControlPointFieldNumber = 2;
    private readonly static int ControlPointDefaultValue = 0;

    private int controlPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ControlPoint {
      get { if ((_hasBits0 & 2) != 0) { return controlPoint_; } else { return ControlPointDefaultValue; } }
      set {
        _hasBits0 |= 2;
        controlPoint_ = value;
      }
    }
    /// <summary>Gets whether the "control_point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasControlPoint {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "control_point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearControlPoint() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "vector" field.</summary>
    public const int VectorFieldNumber = 3;
    private global::Steam.Protos.Dota2.CMsgVector vector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector Vector {
      get { return vector_; }
      set {
        vector_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_UpdateLinearProjectileCPData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_UpdateLinearProjectileCPData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      if (ControlPoint != other.ControlPoint) return false;
      if (!object.Equals(Vector, other.Vector)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHandle) hash ^= Handle.GetHashCode();
      if (HasControlPoint) hash ^= ControlPoint.GetHashCode();
      if (vector_ != null) hash ^= Vector.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHandle) {
        output.WriteRawTag(8);
        output.WriteInt32(Handle);
      }
      if (HasControlPoint) {
        output.WriteRawTag(16);
        output.WriteInt32(ControlPoint);
      }
      if (vector_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Vector);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHandle) {
        output.WriteRawTag(8);
        output.WriteInt32(Handle);
      }
      if (HasControlPoint) {
        output.WriteRawTag(16);
        output.WriteInt32(ControlPoint);
      }
      if (vector_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Vector);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHandle) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
      }
      if (HasControlPoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlPoint);
      }
      if (vector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vector);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_UpdateLinearProjectileCPData other) {
      if (other == null) {
        return;
      }
      if (other.HasHandle) {
        Handle = other.Handle;
      }
      if (other.HasControlPoint) {
        ControlPoint = other.ControlPoint;
      }
      if (other.vector_ != null) {
        if (vector_ == null) {
          Vector = new global::Steam.Protos.Dota2.CMsgVector();
        }
        Vector.MergeFrom(other.Vector);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Handle = input.ReadInt32();
            break;
          }
          case 16: {
            ControlPoint = input.ReadInt32();
            break;
          }
          case 26: {
            if (vector_ == null) {
              Vector = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Vector);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Handle = input.ReadInt32();
            break;
          }
          case 16: {
            ControlPoint = input.ReadInt32();
            break;
          }
          case 26: {
            if (vector_ == null) {
              Vector = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Vector);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_MiniKillCamInfo : pb::IMessage<CDOTAUserMsg_MiniKillCamInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_MiniKillCamInfo> _parser = new pb::MessageParser<CDOTAUserMsg_MiniKillCamInfo>(() => new CDOTAUserMsg_MiniKillCamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MiniKillCamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MiniKillCamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MiniKillCamInfo(CDOTAUserMsg_MiniKillCamInfo other) : this() {
      attackers_ = other.attackers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MiniKillCamInfo Clone() {
      return new CDOTAUserMsg_MiniKillCamInfo(this);
    }

    /// <summary>Field number for the "attackers" field.</summary>
    public const int AttackersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker> _repeated_attackers_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker> attackers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker> Attackers {
      get { return attackers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MiniKillCamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MiniKillCamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attackers_.Equals(other.attackers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attackers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      attackers_.WriteTo(output, _repeated_attackers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      attackers_.WriteTo(ref output, _repeated_attackers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attackers_.CalculateSize(_repeated_attackers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MiniKillCamInfo other) {
      if (other == null) {
        return;
      }
      attackers_.Add(other.attackers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attackers_.AddEntriesFrom(input, _repeated_attackers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            attackers_.AddEntriesFrom(ref input, _repeated_attackers_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_MiniKillCamInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Attacker : pb::IMessage<Attacker>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Attacker> _parser = new pb::MessageParser<Attacker>(() => new Attacker());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Attacker> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attacker() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attacker(Attacker other) : this() {
          _hasBits0 = other._hasBits0;
          attacker_ = other.attacker_;
          totalDamage_ = other.totalDamage_;
          abilities_ = other.abilities_.Clone();
          attackerName_ = other.attackerName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attacker Clone() {
          return new Attacker(this);
        }

        /// <summary>Field number for the "attacker" field.</summary>
        public const int Attacker_FieldNumber = 1;
        private readonly static uint Attacker_DefaultValue = 16777215;

        private uint attacker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Attacker_ {
          get { if ((_hasBits0 & 1) != 0) { return attacker_; } else { return Attacker_DefaultValue; } }
          set {
            _hasBits0 |= 1;
            attacker_ = value;
          }
        }
        /// <summary>Gets whether the "attacker" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAttacker_ {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "attacker" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAttacker_() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "total_damage" field.</summary>
        public const int TotalDamageFieldNumber = 2;
        private readonly static int TotalDamageDefaultValue = 0;

        private int totalDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TotalDamage {
          get { if ((_hasBits0 & 2) != 0) { return totalDamage_; } else { return TotalDamageDefaultValue; } }
          set {
            _hasBits0 |= 2;
            totalDamage_ = value;
          }
        }
        /// <summary>Gets whether the "total_damage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTotalDamage {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "total_damage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTotalDamage() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability> _repeated_abilities_codec
            = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability.Parser);
        private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability> abilities_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Types.Ability> Abilities {
          get { return abilities_; }
        }

        /// <summary>Field number for the "attacker_name" field.</summary>
        public const int AttackerNameFieldNumber = 4;
        private readonly static string AttackerNameDefaultValue = "";

        private string attackerName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AttackerName {
          get { return attackerName_ ?? AttackerNameDefaultValue; }
          set {
            attackerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "attacker_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAttackerName {
          get { return attackerName_ != null; }
        }
        /// <summary>Clears the value of the "attacker_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAttackerName() {
          attackerName_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Attacker);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Attacker other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Attacker_ != other.Attacker_) return false;
          if (TotalDamage != other.TotalDamage) return false;
          if(!abilities_.Equals(other.abilities_)) return false;
          if (AttackerName != other.AttackerName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAttacker_) hash ^= Attacker_.GetHashCode();
          if (HasTotalDamage) hash ^= TotalDamage.GetHashCode();
          hash ^= abilities_.GetHashCode();
          if (HasAttackerName) hash ^= AttackerName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAttacker_) {
            output.WriteRawTag(8);
            output.WriteUInt32(Attacker_);
          }
          if (HasTotalDamage) {
            output.WriteRawTag(16);
            output.WriteInt32(TotalDamage);
          }
          abilities_.WriteTo(output, _repeated_abilities_codec);
          if (HasAttackerName) {
            output.WriteRawTag(34);
            output.WriteString(AttackerName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAttacker_) {
            output.WriteRawTag(8);
            output.WriteUInt32(Attacker_);
          }
          if (HasTotalDamage) {
            output.WriteRawTag(16);
            output.WriteInt32(TotalDamage);
          }
          abilities_.WriteTo(ref output, _repeated_abilities_codec);
          if (HasAttackerName) {
            output.WriteRawTag(34);
            output.WriteString(AttackerName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAttacker_) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Attacker_);
          }
          if (HasTotalDamage) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalDamage);
          }
          size += abilities_.CalculateSize(_repeated_abilities_codec);
          if (HasAttackerName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AttackerName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Attacker other) {
          if (other == null) {
            return;
          }
          if (other.HasAttacker_) {
            Attacker_ = other.Attacker_;
          }
          if (other.HasTotalDamage) {
            TotalDamage = other.TotalDamage;
          }
          abilities_.Add(other.abilities_);
          if (other.HasAttackerName) {
            AttackerName = other.AttackerName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Attacker_ = input.ReadUInt32();
                break;
              }
              case 16: {
                TotalDamage = input.ReadInt32();
                break;
              }
              case 26: {
                abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                break;
              }
              case 34: {
                AttackerName = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Attacker_ = input.ReadUInt32();
                break;
              }
              case 16: {
                TotalDamage = input.ReadInt32();
                break;
              }
              case 26: {
                abilities_.AddEntriesFrom(ref input, _repeated_abilities_codec);
                break;
              }
              case 34: {
                AttackerName = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Attacker message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Ability : pb::IMessage<Ability>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Ability> _parser = new pb::MessageParser<Ability>(() => new Ability());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Ability> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Steam.Protos.Dota2.CDOTAUserMsg_MiniKillCamInfo.Types.Attacker.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Ability() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Ability(Ability other) : this() {
              _hasBits0 = other._hasBits0;
              abilityId_ = other.abilityId_;
              damage_ = other.damage_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Ability Clone() {
              return new Ability(this);
            }

            /// <summary>Field number for the "ability_id" field.</summary>
            public const int AbilityIdFieldNumber = 1;
            private readonly static int AbilityIdDefaultValue = -1;

            private int abilityId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int AbilityId {
              get { if ((_hasBits0 & 1) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                abilityId_ = value;
              }
            }
            /// <summary>Gets whether the "ability_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasAbilityId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "ability_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearAbilityId() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "damage" field.</summary>
            public const int DamageFieldNumber = 2;
            private readonly static int DamageDefaultValue = 0;

            private int damage_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Damage {
              get { if ((_hasBits0 & 2) != 0) { return damage_; } else { return DamageDefaultValue; } }
              set {
                _hasBits0 |= 2;
                damage_ = value;
              }
            }
            /// <summary>Gets whether the "damage" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDamage {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "damage" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDamage() {
              _hasBits0 &= ~2;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Ability);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Ability other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (AbilityId != other.AbilityId) return false;
              if (Damage != other.Damage) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasAbilityId) hash ^= AbilityId.GetHashCode();
              if (HasDamage) hash ^= Damage.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasAbilityId) {
                output.WriteRawTag(8);
                output.WriteInt32(AbilityId);
              }
              if (HasDamage) {
                output.WriteRawTag(16);
                output.WriteInt32(Damage);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasAbilityId) {
                output.WriteRawTag(8);
                output.WriteInt32(AbilityId);
              }
              if (HasDamage) {
                output.WriteRawTag(16);
                output.WriteInt32(Damage);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasAbilityId) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
              }
              if (HasDamage) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Ability other) {
              if (other == null) {
                return;
              }
              if (other.HasAbilityId) {
                AbilityId = other.AbilityId;
              }
              if (other.HasDamage) {
                Damage = other.Damage;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    AbilityId = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    Damage = input.ReadInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    AbilityId = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    Damage = input.ReadInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_GlobalLightColor : pb::IMessage<CDOTAUserMsg_GlobalLightColor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_GlobalLightColor> _parser = new pb::MessageParser<CDOTAUserMsg_GlobalLightColor>(() => new CDOTAUserMsg_GlobalLightColor());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_GlobalLightColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightColor(CDOTAUserMsg_GlobalLightColor other) : this() {
      _hasBits0 = other._hasBits0;
      color_ = other.color_;
      duration_ = other.duration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightColor Clone() {
      return new CDOTAUserMsg_GlobalLightColor(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private readonly static uint ColorDefaultValue = 0;

    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { if ((_hasBits0 & 1) != 0) { return color_; } else { return ColorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        color_ = value;
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColor() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private readonly static float DurationDefaultValue = 0F;

    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { if ((_hasBits0 & 2) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_GlobalLightColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_GlobalLightColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasColor) hash ^= Color.GetHashCode();
      if (HasDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasColor) {
        output.WriteRawTag(8);
        output.WriteUInt32(Color);
      }
      if (HasDuration) {
        output.WriteRawTag(21);
        output.WriteFloat(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasColor) {
        output.WriteRawTag(8);
        output.WriteUInt32(Color);
      }
      if (HasDuration) {
        output.WriteRawTag(21);
        output.WriteFloat(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (HasDuration) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_GlobalLightColor other) {
      if (other == null) {
        return;
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Color = input.ReadUInt32();
            break;
          }
          case 21: {
            Duration = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Color = input.ReadUInt32();
            break;
          }
          case 21: {
            Duration = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_GlobalLightDirection : pb::IMessage<CDOTAUserMsg_GlobalLightDirection>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_GlobalLightDirection> _parser = new pb::MessageParser<CDOTAUserMsg_GlobalLightDirection>(() => new CDOTAUserMsg_GlobalLightDirection());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_GlobalLightDirection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightDirection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightDirection(CDOTAUserMsg_GlobalLightDirection other) : this() {
      _hasBits0 = other._hasBits0;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      duration_ = other.duration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlobalLightDirection Clone() {
      return new CDOTAUserMsg_GlobalLightDirection(this);
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgVector direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private readonly static float DurationDefaultValue = 0F;

    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { if ((_hasBits0 & 1) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 1;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_GlobalLightDirection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_GlobalLightDirection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (HasDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (direction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Direction);
      }
      if (HasDuration) {
        output.WriteRawTag(21);
        output.WriteFloat(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (direction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Direction);
      }
      if (HasDuration) {
        output.WriteRawTag(21);
        output.WriteFloat(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (HasDuration) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_GlobalLightDirection other) {
      if (other == null) {
        return;
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::Steam.Protos.Dota2.CMsgVector();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (direction_ == null) {
              Direction = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 21: {
            Duration = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (direction_ == null) {
              Direction = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 21: {
            Duration = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_LocationPing : pb::IMessage<CDOTAUserMsg_LocationPing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_LocationPing> _parser = new pb::MessageParser<CDOTAUserMsg_LocationPing>(() => new CDOTAUserMsg_LocationPing());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_LocationPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_LocationPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_LocationPing(CDOTAUserMsg_LocationPing other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      locationPing_ = other.locationPing_ != null ? other.locationPing_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_LocationPing Clone() {
      return new CDOTAUserMsg_LocationPing(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "location_ping" field.</summary>
    public const int LocationPingFieldNumber = 2;
    private global::Steam.Protos.Dota2.CDOTAMsg_LocationPing locationPing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAMsg_LocationPing LocationPing {
      get { return locationPing_; }
      set {
        locationPing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_LocationPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_LocationPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(LocationPing, other.LocationPing)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (locationPing_ != null) hash ^= LocationPing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (locationPing_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LocationPing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (locationPing_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LocationPing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (locationPing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocationPing);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_LocationPing other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.locationPing_ != null) {
        if (locationPing_ == null) {
          LocationPing = new global::Steam.Protos.Dota2.CDOTAMsg_LocationPing();
        }
        LocationPing.MergeFrom(other.LocationPing);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (locationPing_ == null) {
              LocationPing = new global::Steam.Protos.Dota2.CDOTAMsg_LocationPing();
            }
            input.ReadMessage(LocationPing);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (locationPing_ == null) {
              LocationPing = new global::Steam.Protos.Dota2.CDOTAMsg_LocationPing();
            }
            input.ReadMessage(LocationPing);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_PingConfirmation : pb::IMessage<CDOTAUserMsg_PingConfirmation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_PingConfirmation> _parser = new pb::MessageParser<CDOTAUserMsg_PingConfirmation>(() => new CDOTAUserMsg_PingConfirmation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_PingConfirmation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PingConfirmation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PingConfirmation(CDOTAUserMsg_PingConfirmation other) : this() {
      _hasBits0 = other._hasBits0;
      playerIdOfOriginalPinger_ = other.playerIdOfOriginalPinger_;
      entityIndex_ = other.entityIndex_;
      iconType_ = other.iconType_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PingConfirmation Clone() {
      return new CDOTAUserMsg_PingConfirmation(this);
    }

    /// <summary>Field number for the "player_id_of_original_pinger" field.</summary>
    public const int PlayerIdOfOriginalPingerFieldNumber = 1;
    private readonly static int PlayerIdOfOriginalPingerDefaultValue = -1;

    private int playerIdOfOriginalPinger_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIdOfOriginalPinger {
      get { if ((_hasBits0 & 1) != 0) { return playerIdOfOriginalPinger_; } else { return PlayerIdOfOriginalPingerDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerIdOfOriginalPinger_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_of_original_pinger" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerIdOfOriginalPinger {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id_of_original_pinger" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerIdOfOriginalPinger() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "entity_index" field.</summary>
    public const int EntityIndexFieldNumber = 2;
    private readonly static uint EntityIndexDefaultValue = 0;

    private uint entityIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityIndex {
      get { if ((_hasBits0 & 2) != 0) { return entityIndex_; } else { return EntityIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        entityIndex_ = value;
      }
    }
    /// <summary>Gets whether the "entity_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "entity_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "icon_type" field.</summary>
    public const int IconTypeFieldNumber = 3;
    private readonly static uint IconTypeDefaultValue = 0;

    private uint iconType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IconType {
      get { if ((_hasBits0 & 4) != 0) { return iconType_; } else { return IconTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        iconType_ = value;
      }
    }
    /// <summary>Gets whether the "icon_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIconType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "icon_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIconType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 4;
    private global::Steam.Protos.Dota2.CMsgVector location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_PingConfirmation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_PingConfirmation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdOfOriginalPinger != other.PlayerIdOfOriginalPinger) return false;
      if (EntityIndex != other.EntityIndex) return false;
      if (IconType != other.IconType) return false;
      if (!object.Equals(Location, other.Location)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerIdOfOriginalPinger) hash ^= PlayerIdOfOriginalPinger.GetHashCode();
      if (HasEntityIndex) hash ^= EntityIndex.GetHashCode();
      if (HasIconType) hash ^= IconType.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerIdOfOriginalPinger) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdOfOriginalPinger);
      }
      if (HasEntityIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(EntityIndex);
      }
      if (HasIconType) {
        output.WriteRawTag(24);
        output.WriteUInt32(IconType);
      }
      if (location_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerIdOfOriginalPinger) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdOfOriginalPinger);
      }
      if (HasEntityIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(EntityIndex);
      }
      if (HasIconType) {
        output.WriteRawTag(24);
        output.WriteUInt32(IconType);
      }
      if (location_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerIdOfOriginalPinger) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIdOfOriginalPinger);
      }
      if (HasEntityIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityIndex);
      }
      if (HasIconType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IconType);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_PingConfirmation other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerIdOfOriginalPinger) {
        PlayerIdOfOriginalPinger = other.PlayerIdOfOriginalPinger;
      }
      if (other.HasEntityIndex) {
        EntityIndex = other.EntityIndex;
      }
      if (other.HasIconType) {
        IconType = other.IconType;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Steam.Protos.Dota2.CMsgVector();
        }
        Location.MergeFrom(other.Location);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIdOfOriginalPinger = input.ReadInt32();
            break;
          }
          case 16: {
            EntityIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            IconType = input.ReadUInt32();
            break;
          }
          case 34: {
            if (location_ == null) {
              Location = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Location);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerIdOfOriginalPinger = input.ReadInt32();
            break;
          }
          case 16: {
            EntityIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            IconType = input.ReadUInt32();
            break;
          }
          case 34: {
            if (location_ == null) {
              Location = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Location);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ItemAlert : pb::IMessage<CDOTAUserMsg_ItemAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ItemAlert> _parser = new pb::MessageParser<CDOTAUserMsg_ItemAlert>(() => new CDOTAUserMsg_ItemAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ItemAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemAlert(CDOTAUserMsg_ItemAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      itemAlert_ = other.itemAlert_ != null ? other.itemAlert_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemAlert Clone() {
      return new CDOTAUserMsg_ItemAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_alert" field.</summary>
    public const int ItemAlertFieldNumber = 2;
    private global::Steam.Protos.Dota2.CDOTAMsg_ItemAlert itemAlert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAMsg_ItemAlert ItemAlert {
      get { return itemAlert_; }
      set {
        itemAlert_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ItemAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ItemAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(ItemAlert, other.ItemAlert)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (itemAlert_ != null) hash ^= ItemAlert.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (itemAlert_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ItemAlert);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (itemAlert_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ItemAlert);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (itemAlert_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemAlert);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ItemAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.itemAlert_ != null) {
        if (itemAlert_ == null) {
          ItemAlert = new global::Steam.Protos.Dota2.CDOTAMsg_ItemAlert();
        }
        ItemAlert.MergeFrom(other.ItemAlert);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (itemAlert_ == null) {
              ItemAlert = new global::Steam.Protos.Dota2.CDOTAMsg_ItemAlert();
            }
            input.ReadMessage(ItemAlert);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (itemAlert_ == null) {
              ItemAlert = new global::Steam.Protos.Dota2.CDOTAMsg_ItemAlert();
            }
            input.ReadMessage(ItemAlert);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_EnemyItemAlert : pb::IMessage<CDOTAUserMsg_EnemyItemAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_EnemyItemAlert> _parser = new pb::MessageParser<CDOTAUserMsg_EnemyItemAlert>(() => new CDOTAUserMsg_EnemyItemAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_EnemyItemAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EnemyItemAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EnemyItemAlert(CDOTAUserMsg_EnemyItemAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      targetPlayerId_ = other.targetPlayerId_;
      itemAbilityId_ = other.itemAbilityId_;
      runeType_ = other.runeType_;
      entityId_ = other.entityId_;
      itemLevel_ = other.itemLevel_;
      primaryCharges_ = other.primaryCharges_;
      secondaryCharges_ = other.secondaryCharges_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EnemyItemAlert Clone() {
      return new CDOTAUserMsg_EnemyItemAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_player_id" field.</summary>
    public const int TargetPlayerIdFieldNumber = 2;
    private readonly static int TargetPlayerIdDefaultValue = -1;

    private int targetPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerId {
      get { if ((_hasBits0 & 2) != 0) { return targetPlayerId_; } else { return TargetPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "target_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetPlayerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 3;
    private readonly static int ItemAbilityIdDefaultValue = -1;

    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { if ((_hasBits0 & 4) != 0) { return itemAbilityId_; } else { return ItemAbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        itemAbilityId_ = value;
      }
    }
    /// <summary>Gets whether the "item_ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemAbilityId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "item_ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemAbilityId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "rune_type" field.</summary>
    public const int RuneTypeFieldNumber = 4;
    private readonly static int RuneTypeDefaultValue = -1;

    private int runeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RuneType {
      get { if ((_hasBits0 & 8) != 0) { return runeType_; } else { return RuneTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        runeType_ = value;
      }
    }
    /// <summary>Gets whether the "rune_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRuneType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "rune_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRuneType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 5;
    private readonly static int EntityIdDefaultValue = 0;

    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { if ((_hasBits0 & 16) != 0) { return entityId_; } else { return EntityIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "item_level" field.</summary>
    public const int ItemLevelFieldNumber = 6;
    private readonly static int ItemLevelDefaultValue = -1;

    private int itemLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemLevel {
      get { if ((_hasBits0 & 32) != 0) { return itemLevel_; } else { return ItemLevelDefaultValue; } }
      set {
        _hasBits0 |= 32;
        itemLevel_ = value;
      }
    }
    /// <summary>Gets whether the "item_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemLevel {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "item_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemLevel() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "primary_charges" field.</summary>
    public const int PrimaryChargesFieldNumber = 7;
    private readonly static int PrimaryChargesDefaultValue = -1;

    private int primaryCharges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrimaryCharges {
      get { if ((_hasBits0 & 64) != 0) { return primaryCharges_; } else { return PrimaryChargesDefaultValue; } }
      set {
        _hasBits0 |= 64;
        primaryCharges_ = value;
      }
    }
    /// <summary>Gets whether the "primary_charges" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrimaryCharges {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "primary_charges" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrimaryCharges() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "secondary_charges" field.</summary>
    public const int SecondaryChargesFieldNumber = 8;
    private readonly static int SecondaryChargesDefaultValue = -1;

    private int secondaryCharges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondaryCharges {
      get { if ((_hasBits0 & 128) != 0) { return secondaryCharges_; } else { return SecondaryChargesDefaultValue; } }
      set {
        _hasBits0 |= 128;
        secondaryCharges_ = value;
      }
    }
    /// <summary>Gets whether the "secondary_charges" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecondaryCharges {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "secondary_charges" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecondaryCharges() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_EnemyItemAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_EnemyItemAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TargetPlayerId != other.TargetPlayerId) return false;
      if (ItemAbilityId != other.ItemAbilityId) return false;
      if (RuneType != other.RuneType) return false;
      if (EntityId != other.EntityId) return false;
      if (ItemLevel != other.ItemLevel) return false;
      if (PrimaryCharges != other.PrimaryCharges) return false;
      if (SecondaryCharges != other.SecondaryCharges) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasTargetPlayerId) hash ^= TargetPlayerId.GetHashCode();
      if (HasItemAbilityId) hash ^= ItemAbilityId.GetHashCode();
      if (HasRuneType) hash ^= RuneType.GetHashCode();
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasItemLevel) hash ^= ItemLevel.GetHashCode();
      if (HasPrimaryCharges) hash ^= PrimaryCharges.GetHashCode();
      if (HasSecondaryCharges) hash ^= SecondaryCharges.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasRuneType) {
        output.WriteRawTag(32);
        output.WriteInt32(RuneType);
      }
      if (HasEntityId) {
        output.WriteRawTag(40);
        output.WriteInt32(EntityId);
      }
      if (HasItemLevel) {
        output.WriteRawTag(48);
        output.WriteInt32(ItemLevel);
      }
      if (HasPrimaryCharges) {
        output.WriteRawTag(56);
        output.WriteInt32(PrimaryCharges);
      }
      if (HasSecondaryCharges) {
        output.WriteRawTag(64);
        output.WriteInt32(SecondaryCharges);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasRuneType) {
        output.WriteRawTag(32);
        output.WriteInt32(RuneType);
      }
      if (HasEntityId) {
        output.WriteRawTag(40);
        output.WriteInt32(EntityId);
      }
      if (HasItemLevel) {
        output.WriteRawTag(48);
        output.WriteInt32(ItemLevel);
      }
      if (HasPrimaryCharges) {
        output.WriteRawTag(56);
        output.WriteInt32(PrimaryCharges);
      }
      if (HasSecondaryCharges) {
        output.WriteRawTag(64);
        output.WriteInt32(SecondaryCharges);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasTargetPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerId);
      }
      if (HasItemAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (HasRuneType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuneType);
      }
      if (HasEntityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (HasItemLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemLevel);
      }
      if (HasPrimaryCharges) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrimaryCharges);
      }
      if (HasSecondaryCharges) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondaryCharges);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_EnemyItemAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasTargetPlayerId) {
        TargetPlayerId = other.TargetPlayerId;
      }
      if (other.HasItemAbilityId) {
        ItemAbilityId = other.ItemAbilityId;
      }
      if (other.HasRuneType) {
        RuneType = other.RuneType;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasItemLevel) {
        ItemLevel = other.ItemLevel;
      }
      if (other.HasPrimaryCharges) {
        PrimaryCharges = other.PrimaryCharges;
      }
      if (other.HasSecondaryCharges) {
        SecondaryCharges = other.SecondaryCharges;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 32: {
            RuneType = input.ReadInt32();
            break;
          }
          case 40: {
            EntityId = input.ReadInt32();
            break;
          }
          case 48: {
            ItemLevel = input.ReadInt32();
            break;
          }
          case 56: {
            PrimaryCharges = input.ReadInt32();
            break;
          }
          case 64: {
            SecondaryCharges = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 32: {
            RuneType = input.ReadInt32();
            break;
          }
          case 40: {
            EntityId = input.ReadInt32();
            break;
          }
          case 48: {
            ItemLevel = input.ReadInt32();
            break;
          }
          case 56: {
            PrimaryCharges = input.ReadInt32();
            break;
          }
          case 64: {
            SecondaryCharges = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ModifierAlert : pb::IMessage<CDOTAUserMsg_ModifierAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ModifierAlert> _parser = new pb::MessageParser<CDOTAUserMsg_ModifierAlert>(() => new CDOTAUserMsg_ModifierAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ModifierAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ModifierAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ModifierAlert(CDOTAUserMsg_ModifierAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      className_ = other.className_;
      stackCount_ = other.stackCount_;
      isDebuff_ = other.isDebuff_;
      targetEntindex_ = other.targetEntindex_;
      secondsRemaining_ = other.secondsRemaining_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ModifierAlert Clone() {
      return new CDOTAUserMsg_ModifierAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "class_name" field.</summary>
    public const int ClassNameFieldNumber = 2;
    private readonly static string ClassNameDefaultValue = "";

    private string className_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassName {
      get { return className_ ?? ClassNameDefaultValue; }
      set {
        className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "class_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClassName {
      get { return className_ != null; }
    }
    /// <summary>Clears the value of the "class_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClassName() {
      className_ = null;
    }

    /// <summary>Field number for the "stack_count" field.</summary>
    public const int StackCountFieldNumber = 3;
    private readonly static uint StackCountDefaultValue = 0;

    private uint stackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StackCount {
      get { if ((_hasBits0 & 2) != 0) { return stackCount_; } else { return StackCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        stackCount_ = value;
      }
    }
    /// <summary>Gets whether the "stack_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStackCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "stack_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStackCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_debuff" field.</summary>
    public const int IsDebuffFieldNumber = 4;
    private readonly static bool IsDebuffDefaultValue = false;

    private bool isDebuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDebuff {
      get { if ((_hasBits0 & 4) != 0) { return isDebuff_; } else { return IsDebuffDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isDebuff_ = value;
      }
    }
    /// <summary>Gets whether the "is_debuff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsDebuff {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_debuff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsDebuff() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 5;
    private readonly static int TargetEntindexDefaultValue = -1;

    private int targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetEntindex {
      get { if ((_hasBits0 & 8) != 0) { return targetEntindex_; } else { return TargetEntindexDefaultValue; } }
      set {
        _hasBits0 |= 8;
        targetEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "target_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEntindex {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "target_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEntindex() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "seconds_remaining" field.</summary>
    public const int SecondsRemainingFieldNumber = 6;
    private readonly static float SecondsRemainingDefaultValue = 0F;

    private float secondsRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SecondsRemaining {
      get { if ((_hasBits0 & 16) != 0) { return secondsRemaining_; } else { return SecondsRemainingDefaultValue; } }
      set {
        _hasBits0 |= 16;
        secondsRemaining_ = value;
      }
    }
    /// <summary>Gets whether the "seconds_remaining" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecondsRemaining {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "seconds_remaining" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecondsRemaining() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ModifierAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ModifierAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ClassName != other.ClassName) return false;
      if (StackCount != other.StackCount) return false;
      if (IsDebuff != other.IsDebuff) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SecondsRemaining, other.SecondsRemaining)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasClassName) hash ^= ClassName.GetHashCode();
      if (HasStackCount) hash ^= StackCount.GetHashCode();
      if (HasIsDebuff) hash ^= IsDebuff.GetHashCode();
      if (HasTargetEntindex) hash ^= TargetEntindex.GetHashCode();
      if (HasSecondsRemaining) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SecondsRemaining);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasClassName) {
        output.WriteRawTag(18);
        output.WriteString(ClassName);
      }
      if (HasStackCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(StackCount);
      }
      if (HasIsDebuff) {
        output.WriteRawTag(32);
        output.WriteBool(IsDebuff);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(40);
        output.WriteInt32(TargetEntindex);
      }
      if (HasSecondsRemaining) {
        output.WriteRawTag(53);
        output.WriteFloat(SecondsRemaining);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasClassName) {
        output.WriteRawTag(18);
        output.WriteString(ClassName);
      }
      if (HasStackCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(StackCount);
      }
      if (HasIsDebuff) {
        output.WriteRawTag(32);
        output.WriteBool(IsDebuff);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(40);
        output.WriteInt32(TargetEntindex);
      }
      if (HasSecondsRemaining) {
        output.WriteRawTag(53);
        output.WriteFloat(SecondsRemaining);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasClassName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
      }
      if (HasStackCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StackCount);
      }
      if (HasIsDebuff) {
        size += 1 + 1;
      }
      if (HasTargetEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntindex);
      }
      if (HasSecondsRemaining) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ModifierAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasClassName) {
        ClassName = other.ClassName;
      }
      if (other.HasStackCount) {
        StackCount = other.StackCount;
      }
      if (other.HasIsDebuff) {
        IsDebuff = other.IsDebuff;
      }
      if (other.HasTargetEntindex) {
        TargetEntindex = other.TargetEntindex;
      }
      if (other.HasSecondsRemaining) {
        SecondsRemaining = other.SecondsRemaining;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            ClassName = input.ReadString();
            break;
          }
          case 24: {
            StackCount = input.ReadUInt32();
            break;
          }
          case 32: {
            IsDebuff = input.ReadBool();
            break;
          }
          case 40: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 53: {
            SecondsRemaining = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            ClassName = input.ReadString();
            break;
          }
          case 24: {
            StackCount = input.ReadUInt32();
            break;
          }
          case 32: {
            IsDebuff = input.ReadBool();
            break;
          }
          case 40: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 53: {
            SecondsRemaining = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_HPManaAlert : pb::IMessage<CDOTAUserMsg_HPManaAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_HPManaAlert> _parser = new pb::MessageParser<CDOTAUserMsg_HPManaAlert>(() => new CDOTAUserMsg_HPManaAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HPManaAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HPManaAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HPManaAlert(CDOTAUserMsg_HPManaAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      targetEntindex_ = other.targetEntindex_;
      showRawValues_ = other.showRawValues_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HPManaAlert Clone() {
      return new CDOTAUserMsg_HPManaAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 2;
    private readonly static int TargetEntindexDefaultValue = -1;

    private int targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetEntindex {
      get { if ((_hasBits0 & 2) != 0) { return targetEntindex_; } else { return TargetEntindexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "target_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEntindex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEntindex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "show_raw_values" field.</summary>
    public const int ShowRawValuesFieldNumber = 3;
    private readonly static bool ShowRawValuesDefaultValue = false;

    private bool showRawValues_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowRawValues {
      get { if ((_hasBits0 & 4) != 0) { return showRawValues_; } else { return ShowRawValuesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        showRawValues_ = value;
      }
    }
    /// <summary>Gets whether the "show_raw_values" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShowRawValues {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "show_raw_values" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShowRawValues() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HPManaAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HPManaAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      if (ShowRawValues != other.ShowRawValues) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasTargetEntindex) hash ^= TargetEntindex.GetHashCode();
      if (HasShowRawValues) hash ^= ShowRawValues.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetEntindex);
      }
      if (HasShowRawValues) {
        output.WriteRawTag(24);
        output.WriteBool(ShowRawValues);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetEntindex);
      }
      if (HasShowRawValues) {
        output.WriteRawTag(24);
        output.WriteBool(ShowRawValues);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasTargetEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntindex);
      }
      if (HasShowRawValues) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HPManaAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasTargetEntindex) {
        TargetEntindex = other.TargetEntindex;
      }
      if (other.HasShowRawValues) {
        ShowRawValues = other.ShowRawValues;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 24: {
            ShowRawValues = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 24: {
            ShowRawValues = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_NeutralCampAlert : pb::IMessage<CDOTAUserMsg_NeutralCampAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_NeutralCampAlert> _parser = new pb::MessageParser<CDOTAUserMsg_NeutralCampAlert>(() => new CDOTAUserMsg_NeutralCampAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_NeutralCampAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NeutralCampAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NeutralCampAlert(CDOTAUserMsg_NeutralCampAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      spawnerEntindex_ = other.spawnerEntindex_;
      unitEntindex_ = other.unitEntindex_;
      stackCount_ = other.stackCount_;
      campType_ = other.campType_;
      stackRequest_ = other.stackRequest_;
      stackIntention_ = other.stackIntention_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NeutralCampAlert Clone() {
      return new CDOTAUserMsg_NeutralCampAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "spawner_entindex" field.</summary>
    public const int SpawnerEntindexFieldNumber = 2;
    private readonly static int SpawnerEntindexDefaultValue = -1;

    private int spawnerEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnerEntindex {
      get { if ((_hasBits0 & 2) != 0) { return spawnerEntindex_; } else { return SpawnerEntindexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        spawnerEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "spawner_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpawnerEntindex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "spawner_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpawnerEntindex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "unit_entindex" field.</summary>
    public const int UnitEntindexFieldNumber = 3;
    private readonly static int UnitEntindexDefaultValue = -1;

    private int unitEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitEntindex {
      get { if ((_hasBits0 & 4) != 0) { return unitEntindex_; } else { return UnitEntindexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        unitEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "unit_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnitEntindex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "unit_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnitEntindex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "stack_count" field.</summary>
    public const int StackCountFieldNumber = 4;
    private readonly static int StackCountDefaultValue = 0;

    private int stackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StackCount {
      get { if ((_hasBits0 & 8) != 0) { return stackCount_; } else { return StackCountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        stackCount_ = value;
      }
    }
    /// <summary>Gets whether the "stack_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStackCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "stack_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStackCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "camp_type" field.</summary>
    public const int CampTypeFieldNumber = 5;
    private readonly static int CampTypeDefaultValue = 0;

    private int campType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CampType {
      get { if ((_hasBits0 & 16) != 0) { return campType_; } else { return CampTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        campType_ = value;
      }
    }
    /// <summary>Gets whether the "camp_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCampType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "camp_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCampType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "stack_request" field.</summary>
    public const int StackRequestFieldNumber = 6;
    private readonly static bool StackRequestDefaultValue = false;

    private bool stackRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StackRequest {
      get { if ((_hasBits0 & 32) != 0) { return stackRequest_; } else { return StackRequestDefaultValue; } }
      set {
        _hasBits0 |= 32;
        stackRequest_ = value;
      }
    }
    /// <summary>Gets whether the "stack_request" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStackRequest {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "stack_request" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStackRequest() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "stack_intention" field.</summary>
    public const int StackIntentionFieldNumber = 7;
    private readonly static bool StackIntentionDefaultValue = false;

    private bool stackIntention_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StackIntention {
      get { if ((_hasBits0 & 64) != 0) { return stackIntention_; } else { return StackIntentionDefaultValue; } }
      set {
        _hasBits0 |= 64;
        stackIntention_ = value;
      }
    }
    /// <summary>Gets whether the "stack_intention" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStackIntention {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "stack_intention" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStackIntention() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_NeutralCampAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_NeutralCampAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (SpawnerEntindex != other.SpawnerEntindex) return false;
      if (UnitEntindex != other.UnitEntindex) return false;
      if (StackCount != other.StackCount) return false;
      if (CampType != other.CampType) return false;
      if (StackRequest != other.StackRequest) return false;
      if (StackIntention != other.StackIntention) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasSpawnerEntindex) hash ^= SpawnerEntindex.GetHashCode();
      if (HasUnitEntindex) hash ^= UnitEntindex.GetHashCode();
      if (HasStackCount) hash ^= StackCount.GetHashCode();
      if (HasCampType) hash ^= CampType.GetHashCode();
      if (HasStackRequest) hash ^= StackRequest.GetHashCode();
      if (HasStackIntention) hash ^= StackIntention.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasSpawnerEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(SpawnerEntindex);
      }
      if (HasUnitEntindex) {
        output.WriteRawTag(24);
        output.WriteInt32(UnitEntindex);
      }
      if (HasStackCount) {
        output.WriteRawTag(32);
        output.WriteInt32(StackCount);
      }
      if (HasCampType) {
        output.WriteRawTag(40);
        output.WriteInt32(CampType);
      }
      if (HasStackRequest) {
        output.WriteRawTag(48);
        output.WriteBool(StackRequest);
      }
      if (HasStackIntention) {
        output.WriteRawTag(56);
        output.WriteBool(StackIntention);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasSpawnerEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(SpawnerEntindex);
      }
      if (HasUnitEntindex) {
        output.WriteRawTag(24);
        output.WriteInt32(UnitEntindex);
      }
      if (HasStackCount) {
        output.WriteRawTag(32);
        output.WriteInt32(StackCount);
      }
      if (HasCampType) {
        output.WriteRawTag(40);
        output.WriteInt32(CampType);
      }
      if (HasStackRequest) {
        output.WriteRawTag(48);
        output.WriteBool(StackRequest);
      }
      if (HasStackIntention) {
        output.WriteRawTag(56);
        output.WriteBool(StackIntention);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasSpawnerEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnerEntindex);
      }
      if (HasUnitEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitEntindex);
      }
      if (HasStackCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StackCount);
      }
      if (HasCampType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CampType);
      }
      if (HasStackRequest) {
        size += 1 + 1;
      }
      if (HasStackIntention) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_NeutralCampAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasSpawnerEntindex) {
        SpawnerEntindex = other.SpawnerEntindex;
      }
      if (other.HasUnitEntindex) {
        UnitEntindex = other.UnitEntindex;
      }
      if (other.HasStackCount) {
        StackCount = other.StackCount;
      }
      if (other.HasCampType) {
        CampType = other.CampType;
      }
      if (other.HasStackRequest) {
        StackRequest = other.StackRequest;
      }
      if (other.HasStackIntention) {
        StackIntention = other.StackIntention;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            SpawnerEntindex = input.ReadInt32();
            break;
          }
          case 24: {
            UnitEntindex = input.ReadInt32();
            break;
          }
          case 32: {
            StackCount = input.ReadInt32();
            break;
          }
          case 40: {
            CampType = input.ReadInt32();
            break;
          }
          case 48: {
            StackRequest = input.ReadBool();
            break;
          }
          case 56: {
            StackIntention = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            SpawnerEntindex = input.ReadInt32();
            break;
          }
          case 24: {
            UnitEntindex = input.ReadInt32();
            break;
          }
          case 32: {
            StackCount = input.ReadInt32();
            break;
          }
          case 40: {
            CampType = input.ReadInt32();
            break;
          }
          case 48: {
            StackRequest = input.ReadBool();
            break;
          }
          case 56: {
            StackIntention = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_GlyphAlert : pb::IMessage<CDOTAUserMsg_GlyphAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_GlyphAlert> _parser = new pb::MessageParser<CDOTAUserMsg_GlyphAlert>(() => new CDOTAUserMsg_GlyphAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_GlyphAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlyphAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlyphAlert(CDOTAUserMsg_GlyphAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      negative_ = other.negative_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GlyphAlert Clone() {
      return new CDOTAUserMsg_GlyphAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "negative" field.</summary>
    public const int NegativeFieldNumber = 2;
    private readonly static bool NegativeDefaultValue = false;

    private bool negative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Negative {
      get { if ((_hasBits0 & 2) != 0) { return negative_; } else { return NegativeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        negative_ = value;
      }
    }
    /// <summary>Gets whether the "negative" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNegative {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "negative" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNegative() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_GlyphAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_GlyphAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Negative != other.Negative) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasNegative) hash ^= Negative.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasNegative) {
        output.WriteRawTag(16);
        output.WriteBool(Negative);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasNegative) {
        output.WriteRawTag(16);
        output.WriteBool(Negative);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasNegative) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_GlyphAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasNegative) {
        Negative = other.Negative;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Negative = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Negative = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_RadarAlert : pb::IMessage<CDOTAUserMsg_RadarAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_RadarAlert> _parser = new pb::MessageParser<CDOTAUserMsg_RadarAlert>(() => new CDOTAUserMsg_RadarAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_RadarAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RadarAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RadarAlert(CDOTAUserMsg_RadarAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      negative_ = other.negative_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RadarAlert Clone() {
      return new CDOTAUserMsg_RadarAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "negative" field.</summary>
    public const int NegativeFieldNumber = 2;
    private readonly static bool NegativeDefaultValue = false;

    private bool negative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Negative {
      get { if ((_hasBits0 & 2) != 0) { return negative_; } else { return NegativeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        negative_ = value;
      }
    }
    /// <summary>Gets whether the "negative" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNegative {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "negative" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNegative() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_RadarAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_RadarAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Negative != other.Negative) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasNegative) hash ^= Negative.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasNegative) {
        output.WriteRawTag(16);
        output.WriteBool(Negative);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasNegative) {
        output.WriteRawTag(16);
        output.WriteBool(Negative);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasNegative) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_RadarAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasNegative) {
        Negative = other.Negative;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Negative = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Negative = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_RoshanTimer : pb::IMessage<CDOTAUserMsg_RoshanTimer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_RoshanTimer> _parser = new pb::MessageParser<CDOTAUserMsg_RoshanTimer>(() => new CDOTAUserMsg_RoshanTimer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_RoshanTimer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RoshanTimer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RoshanTimer(CDOTAUserMsg_RoshanTimer other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      negative_ = other.negative_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RoshanTimer Clone() {
      return new CDOTAUserMsg_RoshanTimer(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "negative" field.</summary>
    public const int NegativeFieldNumber = 2;
    private readonly static bool NegativeDefaultValue = false;

    private bool negative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Negative {
      get { if ((_hasBits0 & 2) != 0) { return negative_; } else { return NegativeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        negative_ = value;
      }
    }
    /// <summary>Gets whether the "negative" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNegative {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "negative" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNegative() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_RoshanTimer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_RoshanTimer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Negative != other.Negative) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasNegative) hash ^= Negative.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasNegative) {
        output.WriteRawTag(16);
        output.WriteBool(Negative);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasNegative) {
        output.WriteRawTag(16);
        output.WriteBool(Negative);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasNegative) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_RoshanTimer other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasNegative) {
        Negative = other.Negative;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Negative = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Negative = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_WillPurchaseAlert : pb::IMessage<CDOTAUserMsg_WillPurchaseAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_WillPurchaseAlert> _parser = new pb::MessageParser<CDOTAUserMsg_WillPurchaseAlert>(() => new CDOTAUserMsg_WillPurchaseAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_WillPurchaseAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WillPurchaseAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WillPurchaseAlert(CDOTAUserMsg_WillPurchaseAlert other) : this() {
      _hasBits0 = other._hasBits0;
      itemAbilityId_ = other.itemAbilityId_;
      playerId_ = other.playerId_;
      goldRemaining_ = other.goldRemaining_;
      suggestionPlayerId_ = other.suggestionPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WillPurchaseAlert Clone() {
      return new CDOTAUserMsg_WillPurchaseAlert(this);
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 1;
    private readonly static int ItemAbilityIdDefaultValue = -1;

    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { if ((_hasBits0 & 1) != 0) { return itemAbilityId_; } else { return ItemAbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemAbilityId_ = value;
      }
    }
    /// <summary>Gets whether the "item_ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemAbilityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemAbilityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 2) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "gold_remaining" field.</summary>
    public const int GoldRemainingFieldNumber = 3;
    private readonly static uint GoldRemainingDefaultValue = 0;

    private uint goldRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoldRemaining {
      get { if ((_hasBits0 & 4) != 0) { return goldRemaining_; } else { return GoldRemainingDefaultValue; } }
      set {
        _hasBits0 |= 4;
        goldRemaining_ = value;
      }
    }
    /// <summary>Gets whether the "gold_remaining" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoldRemaining {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "gold_remaining" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoldRemaining() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "suggestion_player_id" field.</summary>
    public const int SuggestionPlayerIdFieldNumber = 4;
    private readonly static int SuggestionPlayerIdDefaultValue = -1;

    private int suggestionPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuggestionPlayerId {
      get { if ((_hasBits0 & 8) != 0) { return suggestionPlayerId_; } else { return SuggestionPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        suggestionPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "suggestion_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuggestionPlayerId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "suggestion_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuggestionPlayerId() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_WillPurchaseAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_WillPurchaseAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemAbilityId != other.ItemAbilityId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (GoldRemaining != other.GoldRemaining) return false;
      if (SuggestionPlayerId != other.SuggestionPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemAbilityId) hash ^= ItemAbilityId.GetHashCode();
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasGoldRemaining) hash ^= GoldRemaining.GetHashCode();
      if (HasSuggestionPlayerId) hash ^= SuggestionPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemAbilityId) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (HasGoldRemaining) {
        output.WriteRawTag(24);
        output.WriteUInt32(GoldRemaining);
      }
      if (HasSuggestionPlayerId) {
        output.WriteRawTag(32);
        output.WriteInt32(SuggestionPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemAbilityId) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (HasGoldRemaining) {
        output.WriteRawTag(24);
        output.WriteUInt32(GoldRemaining);
      }
      if (HasSuggestionPlayerId) {
        output.WriteRawTag(32);
        output.WriteInt32(SuggestionPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasGoldRemaining) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldRemaining);
      }
      if (HasSuggestionPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuggestionPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_WillPurchaseAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasItemAbilityId) {
        ItemAbilityId = other.ItemAbilityId;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasGoldRemaining) {
        GoldRemaining = other.GoldRemaining;
      }
      if (other.HasSuggestionPlayerId) {
        SuggestionPlayerId = other.SuggestionPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            GoldRemaining = input.ReadUInt32();
            break;
          }
          case 32: {
            SuggestionPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            GoldRemaining = input.ReadUInt32();
            break;
          }
          case 32: {
            SuggestionPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_EmptyTeleportAlert : pb::IMessage<CDOTAUserMsg_EmptyTeleportAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_EmptyTeleportAlert> _parser = new pb::MessageParser<CDOTAUserMsg_EmptyTeleportAlert>(() => new CDOTAUserMsg_EmptyTeleportAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_EmptyTeleportAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EmptyTeleportAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EmptyTeleportAlert(CDOTAUserMsg_EmptyTeleportAlert other) : this() {
      _hasBits0 = other._hasBits0;
      sourcePlayerId_ = other.sourcePlayerId_;
      targetPlayerId_ = other.targetPlayerId_;
      cooldownSeconds_ = other.cooldownSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EmptyTeleportAlert Clone() {
      return new CDOTAUserMsg_EmptyTeleportAlert(this);
    }

    /// <summary>Field number for the "source_player_id" field.</summary>
    public const int SourcePlayerIdFieldNumber = 1;
    private readonly static int SourcePlayerIdDefaultValue = -1;

    private int sourcePlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerId {
      get { if ((_hasBits0 & 1) != 0) { return sourcePlayerId_; } else { return SourcePlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sourcePlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "source_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourcePlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourcePlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_player_id" field.</summary>
    public const int TargetPlayerIdFieldNumber = 2;
    private readonly static int TargetPlayerIdDefaultValue = -1;

    private int targetPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerId {
      get { if ((_hasBits0 & 2) != 0) { return targetPlayerId_; } else { return TargetPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "target_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetPlayerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cooldown_seconds" field.</summary>
    public const int CooldownSecondsFieldNumber = 3;
    private readonly static int CooldownSecondsDefaultValue = 0;

    private int cooldownSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CooldownSeconds {
      get { if ((_hasBits0 & 4) != 0) { return cooldownSeconds_; } else { return CooldownSecondsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cooldownSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "cooldown_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCooldownSeconds {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cooldown_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCooldownSeconds() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_EmptyTeleportAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_EmptyTeleportAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerId != other.SourcePlayerId) return false;
      if (TargetPlayerId != other.TargetPlayerId) return false;
      if (CooldownSeconds != other.CooldownSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSourcePlayerId) hash ^= SourcePlayerId.GetHashCode();
      if (HasTargetPlayerId) hash ^= TargetPlayerId.GetHashCode();
      if (HasCooldownSeconds) hash ^= CooldownSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasCooldownSeconds) {
        output.WriteRawTag(24);
        output.WriteInt32(CooldownSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasCooldownSeconds) {
        output.WriteRawTag(24);
        output.WriteInt32(CooldownSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSourcePlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerId);
      }
      if (HasCooldownSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CooldownSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_EmptyTeleportAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasSourcePlayerId) {
        SourcePlayerId = other.SourcePlayerId;
      }
      if (other.HasTargetPlayerId) {
        TargetPlayerId = other.TargetPlayerId;
      }
      if (other.HasCooldownSeconds) {
        CooldownSeconds = other.CooldownSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            CooldownSeconds = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            CooldownSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_MarsArenaOfBloodAttack : pb::IMessage<CDOTAUserMsg_MarsArenaOfBloodAttack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_MarsArenaOfBloodAttack> _parser = new pb::MessageParser<CDOTAUserMsg_MarsArenaOfBloodAttack>(() => new CDOTAUserMsg_MarsArenaOfBloodAttack());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MarsArenaOfBloodAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MarsArenaOfBloodAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MarsArenaOfBloodAttack(CDOTAUserMsg_MarsArenaOfBloodAttack other) : this() {
      _hasBits0 = other._hasBits0;
      sourceEhandle_ = other.sourceEhandle_;
      targetEhandle_ = other.targetEhandle_;
      warriorIndex_ = other.warriorIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MarsArenaOfBloodAttack Clone() {
      return new CDOTAUserMsg_MarsArenaOfBloodAttack(this);
    }

    /// <summary>Field number for the "source_ehandle" field.</summary>
    public const int SourceEhandleFieldNumber = 1;
    private readonly static uint SourceEhandleDefaultValue = 16777215;

    private uint sourceEhandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceEhandle {
      get { if ((_hasBits0 & 1) != 0) { return sourceEhandle_; } else { return SourceEhandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sourceEhandle_ = value;
      }
    }
    /// <summary>Gets whether the "source_ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceEhandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source_ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceEhandle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_ehandle" field.</summary>
    public const int TargetEhandleFieldNumber = 2;
    private readonly static uint TargetEhandleDefaultValue = 16777215;

    private uint targetEhandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetEhandle {
      get { if ((_hasBits0 & 2) != 0) { return targetEhandle_; } else { return TargetEhandleDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetEhandle_ = value;
      }
    }
    /// <summary>Gets whether the "target_ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEhandle {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEhandle() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "warrior_index" field.</summary>
    public const int WarriorIndexFieldNumber = 3;
    private readonly static int WarriorIndexDefaultValue = 0;

    private int warriorIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarriorIndex {
      get { if ((_hasBits0 & 4) != 0) { return warriorIndex_; } else { return WarriorIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        warriorIndex_ = value;
      }
    }
    /// <summary>Gets whether the "warrior_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWarriorIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "warrior_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWarriorIndex() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MarsArenaOfBloodAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MarsArenaOfBloodAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceEhandle != other.SourceEhandle) return false;
      if (TargetEhandle != other.TargetEhandle) return false;
      if (WarriorIndex != other.WarriorIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSourceEhandle) hash ^= SourceEhandle.GetHashCode();
      if (HasTargetEhandle) hash ^= TargetEhandle.GetHashCode();
      if (HasWarriorIndex) hash ^= WarriorIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSourceEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(SourceEhandle);
      }
      if (HasTargetEhandle) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetEhandle);
      }
      if (HasWarriorIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(WarriorIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSourceEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(SourceEhandle);
      }
      if (HasTargetEhandle) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetEhandle);
      }
      if (HasWarriorIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(WarriorIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSourceEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceEhandle);
      }
      if (HasTargetEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEhandle);
      }
      if (HasWarriorIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarriorIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MarsArenaOfBloodAttack other) {
      if (other == null) {
        return;
      }
      if (other.HasSourceEhandle) {
        SourceEhandle = other.SourceEhandle;
      }
      if (other.HasTargetEhandle) {
        TargetEhandle = other.TargetEhandle;
      }
      if (other.HasWarriorIndex) {
        WarriorIndex = other.WarriorIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceEhandle = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetEhandle = input.ReadUInt32();
            break;
          }
          case 24: {
            WarriorIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourceEhandle = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetEhandle = input.ReadUInt32();
            break;
          }
          case 24: {
            WarriorIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_BuyBackStateAlert : pb::IMessage<CDOTAUserMsg_BuyBackStateAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_BuyBackStateAlert> _parser = new pb::MessageParser<CDOTAUserMsg_BuyBackStateAlert>(() => new CDOTAUserMsg_BuyBackStateAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_BuyBackStateAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BuyBackStateAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BuyBackStateAlert(CDOTAUserMsg_BuyBackStateAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BuyBackStateAlert Clone() {
      return new CDOTAUserMsg_BuyBackStateAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_BuyBackStateAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_BuyBackStateAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_BuyBackStateAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_QuickBuyAlert : pb::IMessage<CDOTAUserMsg_QuickBuyAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_QuickBuyAlert> _parser = new pb::MessageParser<CDOTAUserMsg_QuickBuyAlert>(() => new CDOTAUserMsg_QuickBuyAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_QuickBuyAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QuickBuyAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QuickBuyAlert(CDOTAUserMsg_QuickBuyAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      itemAbilityId_ = other.itemAbilityId_;
      goldCost_ = other.goldCost_;
      itemCooldownSeconds_ = other.itemCooldownSeconds_;
      showBuyback_ = other.showBuyback_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QuickBuyAlert Clone() {
      return new CDOTAUserMsg_QuickBuyAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 2;
    private readonly static int ItemAbilityIdDefaultValue = -1;

    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { if ((_hasBits0 & 2) != 0) { return itemAbilityId_; } else { return ItemAbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        itemAbilityId_ = value;
      }
    }
    /// <summary>Gets whether the "item_ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemAbilityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "item_ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemAbilityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "gold_cost" field.</summary>
    public const int GoldCostFieldNumber = 3;
    private readonly static int GoldCostDefaultValue = 0;

    private int goldCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoldCost {
      get { if ((_hasBits0 & 4) != 0) { return goldCost_; } else { return GoldCostDefaultValue; } }
      set {
        _hasBits0 |= 4;
        goldCost_ = value;
      }
    }
    /// <summary>Gets whether the "gold_cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoldCost {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "gold_cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoldCost() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "item_cooldown_seconds" field.</summary>
    public const int ItemCooldownSecondsFieldNumber = 4;
    private readonly static int ItemCooldownSecondsDefaultValue = 0;

    private int itemCooldownSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCooldownSeconds {
      get { if ((_hasBits0 & 8) != 0) { return itemCooldownSeconds_; } else { return ItemCooldownSecondsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        itemCooldownSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "item_cooldown_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemCooldownSeconds {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "item_cooldown_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemCooldownSeconds() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "show_buyback" field.</summary>
    public const int ShowBuybackFieldNumber = 5;
    private readonly static bool ShowBuybackDefaultValue = false;

    private bool showBuyback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBuyback {
      get { if ((_hasBits0 & 16) != 0) { return showBuyback_; } else { return ShowBuybackDefaultValue; } }
      set {
        _hasBits0 |= 16;
        showBuyback_ = value;
      }
    }
    /// <summary>Gets whether the "show_buyback" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShowBuyback {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "show_buyback" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShowBuyback() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_QuickBuyAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_QuickBuyAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ItemAbilityId != other.ItemAbilityId) return false;
      if (GoldCost != other.GoldCost) return false;
      if (ItemCooldownSeconds != other.ItemCooldownSeconds) return false;
      if (ShowBuyback != other.ShowBuyback) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasItemAbilityId) hash ^= ItemAbilityId.GetHashCode();
      if (HasGoldCost) hash ^= GoldCost.GetHashCode();
      if (HasItemCooldownSeconds) hash ^= ItemCooldownSeconds.GetHashCode();
      if (HasShowBuyback) hash ^= ShowBuyback.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasGoldCost) {
        output.WriteRawTag(24);
        output.WriteInt32(GoldCost);
      }
      if (HasItemCooldownSeconds) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemCooldownSeconds);
      }
      if (HasShowBuyback) {
        output.WriteRawTag(40);
        output.WriteBool(ShowBuyback);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasGoldCost) {
        output.WriteRawTag(24);
        output.WriteInt32(GoldCost);
      }
      if (HasItemCooldownSeconds) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemCooldownSeconds);
      }
      if (HasShowBuyback) {
        output.WriteRawTag(40);
        output.WriteBool(ShowBuyback);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasItemAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (HasGoldCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldCost);
      }
      if (HasItemCooldownSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCooldownSeconds);
      }
      if (HasShowBuyback) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_QuickBuyAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasItemAbilityId) {
        ItemAbilityId = other.ItemAbilityId;
      }
      if (other.HasGoldCost) {
        GoldCost = other.GoldCost;
      }
      if (other.HasItemCooldownSeconds) {
        ItemCooldownSeconds = other.ItemCooldownSeconds;
      }
      if (other.HasShowBuyback) {
        ShowBuyback = other.ShowBuyback;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 24: {
            GoldCost = input.ReadInt32();
            break;
          }
          case 32: {
            ItemCooldownSeconds = input.ReadInt32();
            break;
          }
          case 40: {
            ShowBuyback = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 24: {
            GoldCost = input.ReadInt32();
            break;
          }
          case 32: {
            ItemCooldownSeconds = input.ReadInt32();
            break;
          }
          case 40: {
            ShowBuyback = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CourierKilledAlert : pb::IMessage<CDOTAUserMsg_CourierKilledAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CourierKilledAlert> _parser = new pb::MessageParser<CDOTAUserMsg_CourierKilledAlert>(() => new CDOTAUserMsg_CourierKilledAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CourierKilledAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CourierKilledAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CourierKilledAlert(CDOTAUserMsg_CourierKilledAlert other) : this() {
      _hasBits0 = other._hasBits0;
      team_ = other.team_;
      goldValue_ = other.goldValue_;
      entityHandle_ = other.entityHandle_;
      timestamp_ = other.timestamp_;
      lostItems_ = other.lostItems_.Clone();
      killerPlayerId_ = other.killerPlayerId_;
      owningPlayerId_ = other.owningPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CourierKilledAlert Clone() {
      return new CDOTAUserMsg_CourierKilledAlert(this);
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 1;
    private readonly static uint TeamDefaultValue = 0;

    private uint team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Team {
      get { if ((_hasBits0 & 1) != 0) { return team_; } else { return TeamDefaultValue; } }
      set {
        _hasBits0 |= 1;
        team_ = value;
      }
    }
    /// <summary>Gets whether the "team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeam {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeam() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "gold_value" field.</summary>
    public const int GoldValueFieldNumber = 2;
    private readonly static uint GoldValueDefaultValue = 0;

    private uint goldValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoldValue {
      get { if ((_hasBits0 & 2) != 0) { return goldValue_; } else { return GoldValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        goldValue_ = value;
      }
    }
    /// <summary>Gets whether the "gold_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoldValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "gold_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoldValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "entity_handle" field.</summary>
    public const int EntityHandleFieldNumber = 3;
    private readonly static uint EntityHandleDefaultValue = 16777215;

    private uint entityHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityHandle {
      get { if ((_hasBits0 & 4) != 0) { return entityHandle_; } else { return EntityHandleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        entityHandle_ = value;
      }
    }
    /// <summary>Gets whether the "entity_handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityHandle {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "entity_handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityHandle() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private readonly static int TimestampDefaultValue = 0;

    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { if ((_hasBits0 & 8) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 8;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "lost_items" field.</summary>
    public const int LostItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_CourierKilledAlert.Types.LostItem> _repeated_lostItems_codec
        = pb::FieldCodec.ForMessage(42, global::Steam.Protos.Dota2.CDOTAUserMsg_CourierKilledAlert.Types.LostItem.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_CourierKilledAlert.Types.LostItem> lostItems_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_CourierKilledAlert.Types.LostItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_CourierKilledAlert.Types.LostItem> LostItems {
      get { return lostItems_; }
    }

    /// <summary>Field number for the "killer_player_id" field.</summary>
    public const int KillerPlayerIdFieldNumber = 6;
    private readonly static int KillerPlayerIdDefaultValue = -1;

    private int killerPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillerPlayerId {
      get { if ((_hasBits0 & 16) != 0) { return killerPlayerId_; } else { return KillerPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        killerPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "killer_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKillerPlayerId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "killer_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKillerPlayerId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "owning_player_id" field.</summary>
    public const int OwningPlayerIdFieldNumber = 7;
    private readonly static int OwningPlayerIdDefaultValue = -1;

    private int owningPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwningPlayerId {
      get { if ((_hasBits0 & 32) != 0) { return owningPlayerId_; } else { return OwningPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 32;
        owningPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "owning_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwningPlayerId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "owning_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwningPlayerId() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CourierKilledAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CourierKilledAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Team != other.Team) return false;
      if (GoldValue != other.GoldValue) return false;
      if (EntityHandle != other.EntityHandle) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!lostItems_.Equals(other.lostItems_)) return false;
      if (KillerPlayerId != other.KillerPlayerId) return false;
      if (OwningPlayerId != other.OwningPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTeam) hash ^= Team.GetHashCode();
      if (HasGoldValue) hash ^= GoldValue.GetHashCode();
      if (HasEntityHandle) hash ^= EntityHandle.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      hash ^= lostItems_.GetHashCode();
      if (HasKillerPlayerId) hash ^= KillerPlayerId.GetHashCode();
      if (HasOwningPlayerId) hash ^= OwningPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTeam) {
        output.WriteRawTag(8);
        output.WriteUInt32(Team);
      }
      if (HasGoldValue) {
        output.WriteRawTag(16);
        output.WriteUInt32(GoldValue);
      }
      if (HasEntityHandle) {
        output.WriteRawTag(24);
        output.WriteUInt32(EntityHandle);
      }
      if (HasTimestamp) {
        output.WriteRawTag(32);
        output.WriteInt32(Timestamp);
      }
      lostItems_.WriteTo(output, _repeated_lostItems_codec);
      if (HasKillerPlayerId) {
        output.WriteRawTag(48);
        output.WriteInt32(KillerPlayerId);
      }
      if (HasOwningPlayerId) {
        output.WriteRawTag(56);
        output.WriteInt32(OwningPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTeam) {
        output.WriteRawTag(8);
        output.WriteUInt32(Team);
      }
      if (HasGoldValue) {
        output.WriteRawTag(16);
        output.WriteUInt32(GoldValue);
      }
      if (HasEntityHandle) {
        output.WriteRawTag(24);
        output.WriteUInt32(EntityHandle);
      }
      if (HasTimestamp) {
        output.WriteRawTag(32);
        output.WriteInt32(Timestamp);
      }
      lostItems_.WriteTo(ref output, _repeated_lostItems_codec);
      if (HasKillerPlayerId) {
        output.WriteRawTag(48);
        output.WriteInt32(KillerPlayerId);
      }
      if (HasOwningPlayerId) {
        output.WriteRawTag(56);
        output.WriteInt32(OwningPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTeam) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
      }
      if (HasGoldValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldValue);
      }
      if (HasEntityHandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityHandle);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      size += lostItems_.CalculateSize(_repeated_lostItems_codec);
      if (HasKillerPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillerPlayerId);
      }
      if (HasOwningPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwningPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CourierKilledAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasTeam) {
        Team = other.Team;
      }
      if (other.HasGoldValue) {
        GoldValue = other.GoldValue;
      }
      if (other.HasEntityHandle) {
        EntityHandle = other.EntityHandle;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      lostItems_.Add(other.lostItems_);
      if (other.HasKillerPlayerId) {
        KillerPlayerId = other.KillerPlayerId;
      }
      if (other.HasOwningPlayerId) {
        OwningPlayerId = other.OwningPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Team = input.ReadUInt32();
            break;
          }
          case 16: {
            GoldValue = input.ReadUInt32();
            break;
          }
          case 24: {
            EntityHandle = input.ReadUInt32();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 42: {
            lostItems_.AddEntriesFrom(input, _repeated_lostItems_codec);
            break;
          }
          case 48: {
            KillerPlayerId = input.ReadInt32();
            break;
          }
          case 56: {
            OwningPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Team = input.ReadUInt32();
            break;
          }
          case 16: {
            GoldValue = input.ReadUInt32();
            break;
          }
          case 24: {
            EntityHandle = input.ReadUInt32();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 42: {
            lostItems_.AddEntriesFrom(ref input, _repeated_lostItems_codec);
            break;
          }
          case 48: {
            KillerPlayerId = input.ReadInt32();
            break;
          }
          case 56: {
            OwningPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_CourierKilledAlert message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class LostItem : pb::IMessage<LostItem>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<LostItem> _parser = new pb::MessageParser<LostItem>(() => new LostItem());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LostItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_CourierKilledAlert.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LostItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LostItem(LostItem other) : this() {
          _hasBits0 = other._hasBits0;
          itemAbilityId_ = other.itemAbilityId_;
          quantity_ = other.quantity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LostItem Clone() {
          return new LostItem(this);
        }

        /// <summary>Field number for the "item_ability_id" field.</summary>
        public const int ItemAbilityIdFieldNumber = 1;
        private readonly static int ItemAbilityIdDefaultValue = -1;

        private int itemAbilityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ItemAbilityId {
          get { if ((_hasBits0 & 1) != 0) { return itemAbilityId_; } else { return ItemAbilityIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            itemAbilityId_ = value;
          }
        }
        /// <summary>Gets whether the "item_ability_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasItemAbilityId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "item_ability_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearItemAbilityId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "quantity" field.</summary>
        public const int QuantityFieldNumber = 2;
        private readonly static uint QuantityDefaultValue = 0;

        private uint quantity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Quantity {
          get { if ((_hasBits0 & 2) != 0) { return quantity_; } else { return QuantityDefaultValue; } }
          set {
            _hasBits0 |= 2;
            quantity_ = value;
          }
        }
        /// <summary>Gets whether the "quantity" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasQuantity {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "quantity" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQuantity() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LostItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LostItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemAbilityId != other.ItemAbilityId) return false;
          if (Quantity != other.Quantity) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasItemAbilityId) hash ^= ItemAbilityId.GetHashCode();
          if (HasQuantity) hash ^= Quantity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasItemAbilityId) {
            output.WriteRawTag(8);
            output.WriteInt32(ItemAbilityId);
          }
          if (HasQuantity) {
            output.WriteRawTag(16);
            output.WriteUInt32(Quantity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasItemAbilityId) {
            output.WriteRawTag(8);
            output.WriteInt32(ItemAbilityId);
          }
          if (HasQuantity) {
            output.WriteRawTag(16);
            output.WriteUInt32(Quantity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasItemAbilityId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
          }
          if (HasQuantity) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LostItem other) {
          if (other == null) {
            return;
          }
          if (other.HasItemAbilityId) {
            ItemAbilityId = other.ItemAbilityId;
          }
          if (other.HasQuantity) {
            Quantity = other.Quantity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemAbilityId = input.ReadInt32();
                break;
              }
              case 16: {
                Quantity = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ItemAbilityId = input.ReadInt32();
                break;
              }
              case 16: {
                Quantity = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_MinimapEvent : pb::IMessage<CDOTAUserMsg_MinimapEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_MinimapEvent> _parser = new pb::MessageParser<CDOTAUserMsg_MinimapEvent>(() => new CDOTAUserMsg_MinimapEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MinimapEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MinimapEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MinimapEvent(CDOTAUserMsg_MinimapEvent other) : this() {
      _hasBits0 = other._hasBits0;
      eventType_ = other.eventType_;
      entityHandle_ = other.entityHandle_;
      x_ = other.x_;
      y_ = other.y_;
      duration_ = other.duration_;
      targetEntityHandle_ = other.targetEntityHandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MinimapEvent Clone() {
      return new CDOTAUserMsg_MinimapEvent(this);
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private readonly static int EventTypeDefaultValue = 0;

    private int eventType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventType {
      get { if ((_hasBits0 & 1) != 0) { return eventType_; } else { return EventTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventType_ = value;
      }
    }
    /// <summary>Gets whether the "event_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "entity_handle" field.</summary>
    public const int EntityHandleFieldNumber = 2;
    private readonly static uint EntityHandleDefaultValue = 16777215;

    private uint entityHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityHandle {
      get { if ((_hasBits0 & 2) != 0) { return entityHandle_; } else { return EntityHandleDefaultValue; } }
      set {
        _hasBits0 |= 2;
        entityHandle_ = value;
      }
    }
    /// <summary>Gets whether the "entity_handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityHandle {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "entity_handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityHandle() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 4) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 4;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 8) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 8;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 5;
    private readonly static int DurationDefaultValue = 0;

    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { if ((_hasBits0 & 16) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 16;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "target_entity_handle" field.</summary>
    public const int TargetEntityHandleFieldNumber = 6;
    private readonly static uint TargetEntityHandleDefaultValue = 16777215;

    private uint targetEntityHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetEntityHandle {
      get { if ((_hasBits0 & 32) != 0) { return targetEntityHandle_; } else { return TargetEntityHandleDefaultValue; } }
      set {
        _hasBits0 |= 32;
        targetEntityHandle_ = value;
      }
    }
    /// <summary>Gets whether the "target_entity_handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEntityHandle {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "target_entity_handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEntityHandle() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MinimapEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MinimapEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (EntityHandle != other.EntityHandle) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Duration != other.Duration) return false;
      if (TargetEntityHandle != other.TargetEntityHandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventType) hash ^= EventType.GetHashCode();
      if (HasEntityHandle) hash ^= EntityHandle.GetHashCode();
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasTargetEntityHandle) hash ^= TargetEntityHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventType) {
        output.WriteRawTag(8);
        output.WriteInt32(EventType);
      }
      if (HasEntityHandle) {
        output.WriteRawTag(16);
        output.WriteUInt32(EntityHandle);
      }
      if (HasX) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (HasDuration) {
        output.WriteRawTag(40);
        output.WriteInt32(Duration);
      }
      if (HasTargetEntityHandle) {
        output.WriteRawTag(48);
        output.WriteUInt32(TargetEntityHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventType) {
        output.WriteRawTag(8);
        output.WriteInt32(EventType);
      }
      if (HasEntityHandle) {
        output.WriteRawTag(16);
        output.WriteUInt32(EntityHandle);
      }
      if (HasX) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (HasDuration) {
        output.WriteRawTag(40);
        output.WriteInt32(Duration);
      }
      if (HasTargetEntityHandle) {
        output.WriteRawTag(48);
        output.WriteUInt32(TargetEntityHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventType);
      }
      if (HasEntityHandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityHandle);
      }
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (HasTargetEntityHandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntityHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MinimapEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasEventType) {
        EventType = other.EventType;
      }
      if (other.HasEntityHandle) {
        EntityHandle = other.EntityHandle;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasTargetEntityHandle) {
        TargetEntityHandle = other.TargetEntityHandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventType = input.ReadInt32();
            break;
          }
          case 16: {
            EntityHandle = input.ReadUInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Duration = input.ReadInt32();
            break;
          }
          case 48: {
            TargetEntityHandle = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EventType = input.ReadInt32();
            break;
          }
          case 16: {
            EntityHandle = input.ReadUInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Duration = input.ReadInt32();
            break;
          }
          case 48: {
            TargetEntityHandle = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_MapLine : pb::IMessage<CDOTAUserMsg_MapLine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_MapLine> _parser = new pb::MessageParser<CDOTAUserMsg_MapLine>(() => new CDOTAUserMsg_MapLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MapLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MapLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MapLine(CDOTAUserMsg_MapLine other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      mapline_ = other.mapline_ != null ? other.mapline_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MapLine Clone() {
      return new CDOTAUserMsg_MapLine(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "mapline" field.</summary>
    public const int MaplineFieldNumber = 2;
    private global::Steam.Protos.Dota2.CDOTAMsg_MapLine mapline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAMsg_MapLine Mapline {
      get { return mapline_; }
      set {
        mapline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MapLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MapLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(Mapline, other.Mapline)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (mapline_ != null) hash ^= Mapline.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (mapline_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mapline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (mapline_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mapline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (mapline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mapline);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MapLine other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.mapline_ != null) {
        if (mapline_ == null) {
          Mapline = new global::Steam.Protos.Dota2.CDOTAMsg_MapLine();
        }
        Mapline.MergeFrom(other.Mapline);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (mapline_ == null) {
              Mapline = new global::Steam.Protos.Dota2.CDOTAMsg_MapLine();
            }
            input.ReadMessage(Mapline);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (mapline_ == null) {
              Mapline = new global::Steam.Protos.Dota2.CDOTAMsg_MapLine();
            }
            input.ReadMessage(Mapline);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_MinimapDebugPoint : pb::IMessage<CDOTAUserMsg_MinimapDebugPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_MinimapDebugPoint> _parser = new pb::MessageParser<CDOTAUserMsg_MinimapDebugPoint>(() => new CDOTAUserMsg_MinimapDebugPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MinimapDebugPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MinimapDebugPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MinimapDebugPoint(CDOTAUserMsg_MinimapDebugPoint other) : this() {
      _hasBits0 = other._hasBits0;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      color_ = other.color_;
      size_ = other.size_;
      duration_ = other.duration_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MinimapDebugPoint Clone() {
      return new CDOTAUserMsg_MinimapDebugPoint(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgVector location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private readonly static uint ColorDefaultValue = 0;

    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { if ((_hasBits0 & 1) != 0) { return color_; } else { return ColorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        color_ = value;
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColor() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private readonly static int SizeDefaultValue = 0;

    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { if ((_hasBits0 & 2) != 0) { return size_; } else { return SizeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        size_ = value;
      }
    }
    /// <summary>Gets whether the "size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSize {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSize() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private readonly static float DurationDefaultValue = 0F;

    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { if ((_hasBits0 & 4) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 5;
    private readonly static int IndexDefaultValue = 0;

    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { if ((_hasBits0 & 8) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 8;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MinimapDebugPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MinimapDebugPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (Color != other.Color) return false;
      if (Size != other.Size) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (HasColor) hash ^= Color.GetHashCode();
      if (HasSize) hash ^= Size.GetHashCode();
      if (HasDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (HasIndex) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (HasColor) {
        output.WriteRawTag(16);
        output.WriteUInt32(Color);
      }
      if (HasSize) {
        output.WriteRawTag(24);
        output.WriteInt32(Size);
      }
      if (HasDuration) {
        output.WriteRawTag(37);
        output.WriteFloat(Duration);
      }
      if (HasIndex) {
        output.WriteRawTag(40);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (HasColor) {
        output.WriteRawTag(16);
        output.WriteUInt32(Color);
      }
      if (HasSize) {
        output.WriteRawTag(24);
        output.WriteInt32(Size);
      }
      if (HasDuration) {
        output.WriteRawTag(37);
        output.WriteFloat(Duration);
      }
      if (HasIndex) {
        output.WriteRawTag(40);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (HasSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (HasDuration) {
        size += 1 + 4;
      }
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MinimapDebugPoint other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Steam.Protos.Dota2.CMsgVector();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      if (other.HasSize) {
        Size = other.Size;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Location);
            break;
          }
          case 16: {
            Color = input.ReadUInt32();
            break;
          }
          case 24: {
            Size = input.ReadInt32();
            break;
          }
          case 37: {
            Duration = input.ReadFloat();
            break;
          }
          case 40: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Location);
            break;
          }
          case 16: {
            Color = input.ReadUInt32();
            break;
          }
          case 24: {
            Size = input.ReadInt32();
            break;
          }
          case 37: {
            Duration = input.ReadFloat();
            break;
          }
          case 40: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CreateLinearProjectile : pb::IMessage<CDOTAUserMsg_CreateLinearProjectile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CreateLinearProjectile> _parser = new pb::MessageParser<CDOTAUserMsg_CreateLinearProjectile>(() => new CDOTAUserMsg_CreateLinearProjectile());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CreateLinearProjectile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CreateLinearProjectile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CreateLinearProjectile(CDOTAUserMsg_CreateLinearProjectile other) : this() {
      _hasBits0 = other._hasBits0;
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      entindex_ = other.entindex_;
      particleIndex_ = other.particleIndex_;
      handle_ = other.handle_;
      acceleration_ = other.acceleration_ != null ? other.acceleration_.Clone() : null;
      maxSpeed_ = other.maxSpeed_;
      fowRadius_ = other.fowRadius_;
      stickyFowReveal_ = other.stickyFowReveal_;
      distance_ = other.distance_;
      colorgemcolor_ = other.colorgemcolor_;
      particleCpData_ = other.particleCpData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CreateLinearProjectile Clone() {
      return new CDOTAUserMsg_CreateLinearProjectile(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private global::Steam.Protos.Dota2.CMsgVector2D velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector2D Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 4;
    private readonly static int EntindexDefaultValue = -1;

    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entindex {
      get { if ((_hasBits0 & 1) != 0) { return entindex_; } else { return EntindexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entindex_ = value;
      }
    }
    /// <summary>Gets whether the "entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntindex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntindex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "particle_index" field.</summary>
    public const int ParticleIndexFieldNumber = 5;
    private readonly static ulong ParticleIndexDefaultValue = 0UL;

    private ulong particleIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ParticleIndex {
      get { if ((_hasBits0 & 2) != 0) { return particleIndex_; } else { return ParticleIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        particleIndex_ = value;
      }
    }
    /// <summary>Gets whether the "particle_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParticleIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "particle_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParticleIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 6;
    private readonly static int HandleDefaultValue = 0;

    private int handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handle {
      get { if ((_hasBits0 & 4) != 0) { return handle_; } else { return HandleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        handle_ = value;
      }
    }
    /// <summary>Gets whether the "handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHandle {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHandle() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 7;
    private global::Steam.Protos.Dota2.CMsgVector2D acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector2D Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "max_speed" field.</summary>
    public const int MaxSpeedFieldNumber = 8;
    private readonly static float MaxSpeedDefaultValue = 0F;

    private float maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSpeed {
      get { if ((_hasBits0 & 8) != 0) { return maxSpeed_; } else { return MaxSpeedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        maxSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "max_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxSpeed {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxSpeed() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "fow_radius" field.</summary>
    public const int FowRadiusFieldNumber = 9;
    private readonly static float FowRadiusDefaultValue = 0F;

    private float fowRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FowRadius {
      get { if ((_hasBits0 & 16) != 0) { return fowRadius_; } else { return FowRadiusDefaultValue; } }
      set {
        _hasBits0 |= 16;
        fowRadius_ = value;
      }
    }
    /// <summary>Gets whether the "fow_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFowRadius {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "fow_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFowRadius() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "sticky_fow_reveal" field.</summary>
    public const int StickyFowRevealFieldNumber = 10;
    private readonly static bool StickyFowRevealDefaultValue = false;

    private bool stickyFowReveal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StickyFowReveal {
      get { if ((_hasBits0 & 32) != 0) { return stickyFowReveal_; } else { return StickyFowRevealDefaultValue; } }
      set {
        _hasBits0 |= 32;
        stickyFowReveal_ = value;
      }
    }
    /// <summary>Gets whether the "sticky_fow_reveal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStickyFowReveal {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "sticky_fow_reveal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStickyFowReveal() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 11;
    private readonly static float DistanceDefaultValue = 0F;

    private float distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Distance {
      get { if ((_hasBits0 & 64) != 0) { return distance_; } else { return DistanceDefaultValue; } }
      set {
        _hasBits0 |= 64;
        distance_ = value;
      }
    }
    /// <summary>Gets whether the "distance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDistance {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "distance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDistance() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "colorgemcolor" field.</summary>
    public const int ColorgemcolorFieldNumber = 12;
    private readonly static uint ColorgemcolorDefaultValue = 0;

    private uint colorgemcolor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Colorgemcolor {
      get { if ((_hasBits0 & 128) != 0) { return colorgemcolor_; } else { return ColorgemcolorDefaultValue; } }
      set {
        _hasBits0 |= 128;
        colorgemcolor_ = value;
      }
    }
    /// <summary>Gets whether the "colorgemcolor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColorgemcolor {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "colorgemcolor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColorgemcolor() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "particle_cp_data" field.</summary>
    public const int ParticleCpDataFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData> _repeated_particleCpData_codec
        = pb::FieldCodec.ForMessage(106, global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData> particleCpData_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData> ParticleCpData {
      get { return particleCpData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CreateLinearProjectile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CreateLinearProjectile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (Entindex != other.Entindex) return false;
      if (ParticleIndex != other.ParticleIndex) return false;
      if (Handle != other.Handle) return false;
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSpeed, other.MaxSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FowRadius, other.FowRadius)) return false;
      if (StickyFowReveal != other.StickyFowReveal) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
      if (Colorgemcolor != other.Colorgemcolor) return false;
      if(!particleCpData_.Equals(other.particleCpData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (HasEntindex) hash ^= Entindex.GetHashCode();
      if (HasParticleIndex) hash ^= ParticleIndex.GetHashCode();
      if (HasHandle) hash ^= Handle.GetHashCode();
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (HasMaxSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSpeed);
      if (HasFowRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FowRadius);
      if (HasStickyFowReveal) hash ^= StickyFowReveal.GetHashCode();
      if (HasDistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
      if (HasColorgemcolor) hash ^= Colorgemcolor.GetHashCode();
      hash ^= particleCpData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      if (HasEntindex) {
        output.WriteRawTag(32);
        output.WriteInt32(Entindex);
      }
      if (HasParticleIndex) {
        output.WriteRawTag(40);
        output.WriteUInt64(ParticleIndex);
      }
      if (HasHandle) {
        output.WriteRawTag(48);
        output.WriteInt32(Handle);
      }
      if (acceleration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Acceleration);
      }
      if (HasMaxSpeed) {
        output.WriteRawTag(69);
        output.WriteFloat(MaxSpeed);
      }
      if (HasFowRadius) {
        output.WriteRawTag(77);
        output.WriteFloat(FowRadius);
      }
      if (HasStickyFowReveal) {
        output.WriteRawTag(80);
        output.WriteBool(StickyFowReveal);
      }
      if (HasDistance) {
        output.WriteRawTag(93);
        output.WriteFloat(Distance);
      }
      if (HasColorgemcolor) {
        output.WriteRawTag(101);
        output.WriteFixed32(Colorgemcolor);
      }
      particleCpData_.WriteTo(output, _repeated_particleCpData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      if (HasEntindex) {
        output.WriteRawTag(32);
        output.WriteInt32(Entindex);
      }
      if (HasParticleIndex) {
        output.WriteRawTag(40);
        output.WriteUInt64(ParticleIndex);
      }
      if (HasHandle) {
        output.WriteRawTag(48);
        output.WriteInt32(Handle);
      }
      if (acceleration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Acceleration);
      }
      if (HasMaxSpeed) {
        output.WriteRawTag(69);
        output.WriteFloat(MaxSpeed);
      }
      if (HasFowRadius) {
        output.WriteRawTag(77);
        output.WriteFloat(FowRadius);
      }
      if (HasStickyFowReveal) {
        output.WriteRawTag(80);
        output.WriteBool(StickyFowReveal);
      }
      if (HasDistance) {
        output.WriteRawTag(93);
        output.WriteFloat(Distance);
      }
      if (HasColorgemcolor) {
        output.WriteRawTag(101);
        output.WriteFixed32(Colorgemcolor);
      }
      particleCpData_.WriteTo(ref output, _repeated_particleCpData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (HasEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
      }
      if (HasParticleIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ParticleIndex);
      }
      if (HasHandle) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
      }
      if (acceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (HasMaxSpeed) {
        size += 1 + 4;
      }
      if (HasFowRadius) {
        size += 1 + 4;
      }
      if (HasStickyFowReveal) {
        size += 1 + 1;
      }
      if (HasDistance) {
        size += 1 + 4;
      }
      if (HasColorgemcolor) {
        size += 1 + 4;
      }
      size += particleCpData_.CalculateSize(_repeated_particleCpData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CreateLinearProjectile other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          Origin = new global::Steam.Protos.Dota2.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Steam.Protos.Dota2.CMsgVector2D();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.HasEntindex) {
        Entindex = other.Entindex;
      }
      if (other.HasParticleIndex) {
        ParticleIndex = other.ParticleIndex;
      }
      if (other.HasHandle) {
        Handle = other.Handle;
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          Acceleration = new global::Steam.Protos.Dota2.CMsgVector2D();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      if (other.HasMaxSpeed) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.HasFowRadius) {
        FowRadius = other.FowRadius;
      }
      if (other.HasStickyFowReveal) {
        StickyFowReveal = other.StickyFowReveal;
      }
      if (other.HasDistance) {
        Distance = other.Distance;
      }
      if (other.HasColorgemcolor) {
        Colorgemcolor = other.Colorgemcolor;
      }
      particleCpData_.Add(other.particleCpData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              Origin = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              Velocity = new global::Steam.Protos.Dota2.CMsgVector2D();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 32: {
            Entindex = input.ReadInt32();
            break;
          }
          case 40: {
            ParticleIndex = input.ReadUInt64();
            break;
          }
          case 48: {
            Handle = input.ReadInt32();
            break;
          }
          case 58: {
            if (acceleration_ == null) {
              Acceleration = new global::Steam.Protos.Dota2.CMsgVector2D();
            }
            input.ReadMessage(Acceleration);
            break;
          }
          case 69: {
            MaxSpeed = input.ReadFloat();
            break;
          }
          case 77: {
            FowRadius = input.ReadFloat();
            break;
          }
          case 80: {
            StickyFowReveal = input.ReadBool();
            break;
          }
          case 93: {
            Distance = input.ReadFloat();
            break;
          }
          case 101: {
            Colorgemcolor = input.ReadFixed32();
            break;
          }
          case 106: {
            particleCpData_.AddEntriesFrom(input, _repeated_particleCpData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (origin_ == null) {
              Origin = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              Velocity = new global::Steam.Protos.Dota2.CMsgVector2D();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 32: {
            Entindex = input.ReadInt32();
            break;
          }
          case 40: {
            ParticleIndex = input.ReadUInt64();
            break;
          }
          case 48: {
            Handle = input.ReadInt32();
            break;
          }
          case 58: {
            if (acceleration_ == null) {
              Acceleration = new global::Steam.Protos.Dota2.CMsgVector2D();
            }
            input.ReadMessage(Acceleration);
            break;
          }
          case 69: {
            MaxSpeed = input.ReadFloat();
            break;
          }
          case 77: {
            FowRadius = input.ReadFloat();
            break;
          }
          case 80: {
            StickyFowReveal = input.ReadBool();
            break;
          }
          case 93: {
            Distance = input.ReadFloat();
            break;
          }
          case 101: {
            Colorgemcolor = input.ReadFixed32();
            break;
          }
          case 106: {
            particleCpData_.AddEntriesFrom(ref input, _repeated_particleCpData_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_DestroyLinearProjectile : pb::IMessage<CDOTAUserMsg_DestroyLinearProjectile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_DestroyLinearProjectile> _parser = new pb::MessageParser<CDOTAUserMsg_DestroyLinearProjectile>(() => new CDOTAUserMsg_DestroyLinearProjectile());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DestroyLinearProjectile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DestroyLinearProjectile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DestroyLinearProjectile(CDOTAUserMsg_DestroyLinearProjectile other) : this() {
      _hasBits0 = other._hasBits0;
      handle_ = other.handle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DestroyLinearProjectile Clone() {
      return new CDOTAUserMsg_DestroyLinearProjectile(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private readonly static int HandleDefaultValue = 0;

    private int handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handle {
      get { if ((_hasBits0 & 1) != 0) { return handle_; } else { return HandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        handle_ = value;
      }
    }
    /// <summary>Gets whether the "handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHandle() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DestroyLinearProjectile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DestroyLinearProjectile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHandle) hash ^= Handle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHandle) {
        output.WriteRawTag(8);
        output.WriteInt32(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHandle) {
        output.WriteRawTag(8);
        output.WriteInt32(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHandle) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DestroyLinearProjectile other) {
      if (other == null) {
        return;
      }
      if (other.HasHandle) {
        Handle = other.Handle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Handle = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Handle = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_DodgeTrackingProjectiles : pb::IMessage<CDOTAUserMsg_DodgeTrackingProjectiles>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_DodgeTrackingProjectiles> _parser = new pb::MessageParser<CDOTAUserMsg_DodgeTrackingProjectiles>(() => new CDOTAUserMsg_DodgeTrackingProjectiles());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DodgeTrackingProjectiles> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DodgeTrackingProjectiles() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DodgeTrackingProjectiles(CDOTAUserMsg_DodgeTrackingProjectiles other) : this() {
      _hasBits0 = other._hasBits0;
      entindex_ = other.entindex_;
      attacksOnly_ = other.attacksOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DodgeTrackingProjectiles Clone() {
      return new CDOTAUserMsg_DodgeTrackingProjectiles(this);
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 1;
    private readonly static int EntindexDefaultValue = -1;

    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entindex {
      get { if ((_hasBits0 & 1) != 0) { return entindex_; } else { return EntindexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entindex_ = value;
      }
    }
    /// <summary>Gets whether the "entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntindex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntindex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "attacks_only" field.</summary>
    public const int AttacksOnlyFieldNumber = 2;
    private readonly static bool AttacksOnlyDefaultValue = false;

    private bool attacksOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AttacksOnly {
      get { if ((_hasBits0 & 2) != 0) { return attacksOnly_; } else { return AttacksOnlyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        attacksOnly_ = value;
      }
    }
    /// <summary>Gets whether the "attacks_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttacksOnly {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "attacks_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttacksOnly() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DodgeTrackingProjectiles);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DodgeTrackingProjectiles other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entindex != other.Entindex) return false;
      if (AttacksOnly != other.AttacksOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntindex) hash ^= Entindex.GetHashCode();
      if (HasAttacksOnly) hash ^= AttacksOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEntindex) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (HasAttacksOnly) {
        output.WriteRawTag(16);
        output.WriteBool(AttacksOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEntindex) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (HasAttacksOnly) {
        output.WriteRawTag(16);
        output.WriteBool(AttacksOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
      }
      if (HasAttacksOnly) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DodgeTrackingProjectiles other) {
      if (other == null) {
        return;
      }
      if (other.HasEntindex) {
        Entindex = other.Entindex;
      }
      if (other.HasAttacksOnly) {
        AttacksOnly = other.AttacksOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 16: {
            AttacksOnly = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 16: {
            AttacksOnly = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SpectatorPlayerClick : pb::IMessage<CDOTAUserMsg_SpectatorPlayerClick>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SpectatorPlayerClick> _parser = new pb::MessageParser<CDOTAUserMsg_SpectatorPlayerClick>(() => new CDOTAUserMsg_SpectatorPlayerClick());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SpectatorPlayerClick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerClick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerClick(CDOTAUserMsg_SpectatorPlayerClick other) : this() {
      _hasBits0 = other._hasBits0;
      entindex_ = other.entindex_;
      orderType_ = other.orderType_;
      targetIndex_ = other.targetIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerClick Clone() {
      return new CDOTAUserMsg_SpectatorPlayerClick(this);
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 1;
    private readonly static int EntindexDefaultValue = -1;

    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entindex {
      get { if ((_hasBits0 & 1) != 0) { return entindex_; } else { return EntindexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entindex_ = value;
      }
    }
    /// <summary>Gets whether the "entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntindex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntindex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 2;
    private readonly static int OrderTypeDefaultValue = 0;

    private int orderType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderType {
      get { if ((_hasBits0 & 2) != 0) { return orderType_; } else { return OrderTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        orderType_ = value;
      }
    }
    /// <summary>Gets whether the "order_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrderType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "order_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrderType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "target_index" field.</summary>
    public const int TargetIndexFieldNumber = 3;
    private readonly static int TargetIndexDefaultValue = 0;

    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { if ((_hasBits0 & 4) != 0) { return targetIndex_; } else { return TargetIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        targetIndex_ = value;
      }
    }
    /// <summary>Gets whether the "target_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "target_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetIndex() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SpectatorPlayerClick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SpectatorPlayerClick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entindex != other.Entindex) return false;
      if (OrderType != other.OrderType) return false;
      if (TargetIndex != other.TargetIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntindex) hash ^= Entindex.GetHashCode();
      if (HasOrderType) hash ^= OrderType.GetHashCode();
      if (HasTargetIndex) hash ^= TargetIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEntindex) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (HasOrderType) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderType);
      }
      if (HasTargetIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEntindex) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (HasOrderType) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderType);
      }
      if (HasTargetIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
      }
      if (HasOrderType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
      }
      if (HasTargetIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SpectatorPlayerClick other) {
      if (other == null) {
        return;
      }
      if (other.HasEntindex) {
        Entindex = other.Entindex;
      }
      if (other.HasOrderType) {
        OrderType = other.OrderType;
      }
      if (other.HasTargetIndex) {
        TargetIndex = other.TargetIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 16: {
            OrderType = input.ReadInt32();
            break;
          }
          case 24: {
            TargetIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 16: {
            OrderType = input.ReadInt32();
            break;
          }
          case 24: {
            TargetIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SpectatorPlayerUnitOrders : pb::IMessage<CDOTAUserMsg_SpectatorPlayerUnitOrders>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SpectatorPlayerUnitOrders> _parser = new pb::MessageParser<CDOTAUserMsg_SpectatorPlayerUnitOrders>(() => new CDOTAUserMsg_SpectatorPlayerUnitOrders());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SpectatorPlayerUnitOrders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerUnitOrders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerUnitOrders(CDOTAUserMsg_SpectatorPlayerUnitOrders other) : this() {
      _hasBits0 = other._hasBits0;
      entindex_ = other.entindex_;
      orderType_ = other.orderType_;
      units_ = other.units_.Clone();
      targetIndex_ = other.targetIndex_;
      abilityId_ = other.abilityId_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      queue_ = other.queue_;
      sequenceNumber_ = other.sequenceNumber_;
      flags_ = other.flags_;
      lastOrderLatency_ = other.lastOrderLatency_;
      ping_ = other.ping_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpectatorPlayerUnitOrders Clone() {
      return new CDOTAUserMsg_SpectatorPlayerUnitOrders(this);
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 1;
    private readonly static int EntindexDefaultValue = -1;

    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entindex {
      get { if ((_hasBits0 & 1) != 0) { return entindex_; } else { return EntindexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entindex_ = value;
      }
    }
    /// <summary>Gets whether the "entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntindex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntindex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 2;
    private readonly static int OrderTypeDefaultValue = 0;

    private int orderType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderType {
      get { if ((_hasBits0 & 2) != 0) { return orderType_; } else { return OrderTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        orderType_ = value;
      }
    }
    /// <summary>Gets whether the "order_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrderType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "order_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrderType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_units_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> units_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "target_index" field.</summary>
    public const int TargetIndexFieldNumber = 4;
    private readonly static int TargetIndexDefaultValue = 0;

    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { if ((_hasBits0 & 4) != 0) { return targetIndex_; } else { return TargetIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        targetIndex_ = value;
      }
    }
    /// <summary>Gets whether the "target_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "target_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetIndex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 5;
    private readonly static int AbilityIdDefaultValue = -1;

    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { if ((_hasBits0 & 8) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        abilityId_ = value;
      }
    }
    /// <summary>Gets whether the "ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private global::Steam.Protos.Dota2.CMsgVector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 7;
    private readonly static bool QueueDefaultValue = false;

    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { if ((_hasBits0 & 16) != 0) { return queue_; } else { return QueueDefaultValue; } }
      set {
        _hasBits0 |= 16;
        queue_ = value;
      }
    }
    /// <summary>Gets whether the "queue" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQueue {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "queue" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQueue() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "sequence_number" field.</summary>
    public const int SequenceNumberFieldNumber = 8;
    private readonly static int SequenceNumberDefaultValue = 0;

    private int sequenceNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceNumber {
      get { if ((_hasBits0 & 32) != 0) { return sequenceNumber_; } else { return SequenceNumberDefaultValue; } }
      set {
        _hasBits0 |= 32;
        sequenceNumber_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceNumber {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "sequence_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceNumber() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 9;
    private readonly static uint FlagsDefaultValue = 0;

    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { if ((_hasBits0 & 64) != 0) { return flags_; } else { return FlagsDefaultValue; } }
      set {
        _hasBits0 |= 64;
        flags_ = value;
      }
    }
    /// <summary>Gets whether the "flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlags {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlags() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "last_order_latency" field.</summary>
    public const int LastOrderLatencyFieldNumber = 10;
    private readonly static uint LastOrderLatencyDefaultValue = 0;

    private uint lastOrderLatency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastOrderLatency {
      get { if ((_hasBits0 & 128) != 0) { return lastOrderLatency_; } else { return LastOrderLatencyDefaultValue; } }
      set {
        _hasBits0 |= 128;
        lastOrderLatency_ = value;
      }
    }
    /// <summary>Gets whether the "last_order_latency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastOrderLatency {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "last_order_latency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastOrderLatency() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 11;
    private readonly static uint PingDefaultValue = 0;

    private uint ping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ping {
      get { if ((_hasBits0 & 256) != 0) { return ping_; } else { return PingDefaultValue; } }
      set {
        _hasBits0 |= 256;
        ping_ = value;
      }
    }
    /// <summary>Gets whether the "ping" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPing {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "ping" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPing() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SpectatorPlayerUnitOrders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SpectatorPlayerUnitOrders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entindex != other.Entindex) return false;
      if (OrderType != other.OrderType) return false;
      if(!units_.Equals(other.units_)) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (AbilityId != other.AbilityId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Queue != other.Queue) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      if (Flags != other.Flags) return false;
      if (LastOrderLatency != other.LastOrderLatency) return false;
      if (Ping != other.Ping) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntindex) hash ^= Entindex.GetHashCode();
      if (HasOrderType) hash ^= OrderType.GetHashCode();
      hash ^= units_.GetHashCode();
      if (HasTargetIndex) hash ^= TargetIndex.GetHashCode();
      if (HasAbilityId) hash ^= AbilityId.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (HasQueue) hash ^= Queue.GetHashCode();
      if (HasSequenceNumber) hash ^= SequenceNumber.GetHashCode();
      if (HasFlags) hash ^= Flags.GetHashCode();
      if (HasLastOrderLatency) hash ^= LastOrderLatency.GetHashCode();
      if (HasPing) hash ^= Ping.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEntindex) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (HasOrderType) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderType);
      }
      units_.WriteTo(output, _repeated_units_codec);
      if (HasTargetIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetIndex);
      }
      if (HasAbilityId) {
        output.WriteRawTag(40);
        output.WriteInt32(AbilityId);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
      if (HasQueue) {
        output.WriteRawTag(56);
        output.WriteBool(Queue);
      }
      if (HasSequenceNumber) {
        output.WriteRawTag(64);
        output.WriteInt32(SequenceNumber);
      }
      if (HasFlags) {
        output.WriteRawTag(72);
        output.WriteUInt32(Flags);
      }
      if (HasLastOrderLatency) {
        output.WriteRawTag(80);
        output.WriteUInt32(LastOrderLatency);
      }
      if (HasPing) {
        output.WriteRawTag(88);
        output.WriteUInt32(Ping);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEntindex) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (HasOrderType) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderType);
      }
      units_.WriteTo(ref output, _repeated_units_codec);
      if (HasTargetIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetIndex);
      }
      if (HasAbilityId) {
        output.WriteRawTag(40);
        output.WriteInt32(AbilityId);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
      if (HasQueue) {
        output.WriteRawTag(56);
        output.WriteBool(Queue);
      }
      if (HasSequenceNumber) {
        output.WriteRawTag(64);
        output.WriteInt32(SequenceNumber);
      }
      if (HasFlags) {
        output.WriteRawTag(72);
        output.WriteUInt32(Flags);
      }
      if (HasLastOrderLatency) {
        output.WriteRawTag(80);
        output.WriteUInt32(LastOrderLatency);
      }
      if (HasPing) {
        output.WriteRawTag(88);
        output.WriteUInt32(Ping);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
      }
      if (HasOrderType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      if (HasTargetIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (HasAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (HasQueue) {
        size += 1 + 1;
      }
      if (HasSequenceNumber) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNumber);
      }
      if (HasFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (HasLastOrderLatency) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastOrderLatency);
      }
      if (HasPing) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ping);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SpectatorPlayerUnitOrders other) {
      if (other == null) {
        return;
      }
      if (other.HasEntindex) {
        Entindex = other.Entindex;
      }
      if (other.HasOrderType) {
        OrderType = other.OrderType;
      }
      units_.Add(other.units_);
      if (other.HasTargetIndex) {
        TargetIndex = other.TargetIndex;
      }
      if (other.HasAbilityId) {
        AbilityId = other.AbilityId;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Steam.Protos.Dota2.CMsgVector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.HasQueue) {
        Queue = other.Queue;
      }
      if (other.HasSequenceNumber) {
        SequenceNumber = other.SequenceNumber;
      }
      if (other.HasFlags) {
        Flags = other.Flags;
      }
      if (other.HasLastOrderLatency) {
        LastOrderLatency = other.LastOrderLatency;
      }
      if (other.HasPing) {
        Ping = other.Ping;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 16: {
            OrderType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 32: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 40: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 50: {
            if (position_ == null) {
              Position = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 56: {
            Queue = input.ReadBool();
            break;
          }
          case 64: {
            SequenceNumber = input.ReadInt32();
            break;
          }
          case 72: {
            Flags = input.ReadUInt32();
            break;
          }
          case 80: {
            LastOrderLatency = input.ReadUInt32();
            break;
          }
          case 88: {
            Ping = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 16: {
            OrderType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            units_.AddEntriesFrom(ref input, _repeated_units_codec);
            break;
          }
          case 32: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 40: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 50: {
            if (position_ == null) {
              Position = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 56: {
            Queue = input.ReadBool();
            break;
          }
          case 64: {
            SequenceNumber = input.ReadInt32();
            break;
          }
          case 72: {
            Flags = input.ReadUInt32();
            break;
          }
          case 80: {
            LastOrderLatency = input.ReadUInt32();
            break;
          }
          case 88: {
            Ping = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_NevermoreRequiem : pb::IMessage<CDOTAUserMsg_NevermoreRequiem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_NevermoreRequiem> _parser = new pb::MessageParser<CDOTAUserMsg_NevermoreRequiem>(() => new CDOTAUserMsg_NevermoreRequiem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_NevermoreRequiem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NevermoreRequiem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NevermoreRequiem(CDOTAUserMsg_NevermoreRequiem other) : this() {
      _hasBits0 = other._hasBits0;
      entityHandle_ = other.entityHandle_;
      lines_ = other.lines_;
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      reverse_ = other.reverse_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NevermoreRequiem Clone() {
      return new CDOTAUserMsg_NevermoreRequiem(this);
    }

    /// <summary>Field number for the "entity_handle" field.</summary>
    public const int EntityHandleFieldNumber = 1;
    private readonly static uint EntityHandleDefaultValue = 16777215;

    private uint entityHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityHandle {
      get { if ((_hasBits0 & 1) != 0) { return entityHandle_; } else { return EntityHandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entityHandle_ = value;
      }
    }
    /// <summary>Gets whether the "entity_handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityHandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityHandle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 2;
    private readonly static int LinesDefaultValue = 0;

    private int lines_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lines {
      get { if ((_hasBits0 & 2) != 0) { return lines_; } else { return LinesDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lines_ = value;
      }
    }
    /// <summary>Gets whether the "lines" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLines {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lines" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLines() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 3;
    private global::Steam.Protos.Dota2.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "reverse" field.</summary>
    public const int ReverseFieldNumber = 4;
    private readonly static bool ReverseDefaultValue = false;

    private bool reverse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reverse {
      get { if ((_hasBits0 & 4) != 0) { return reverse_; } else { return ReverseDefaultValue; } }
      set {
        _hasBits0 |= 4;
        reverse_ = value;
      }
    }
    /// <summary>Gets whether the "reverse" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReverse {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "reverse" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReverse() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_NevermoreRequiem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_NevermoreRequiem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityHandle != other.EntityHandle) return false;
      if (Lines != other.Lines) return false;
      if (!object.Equals(Origin, other.Origin)) return false;
      if (Reverse != other.Reverse) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityHandle) hash ^= EntityHandle.GetHashCode();
      if (HasLines) hash ^= Lines.GetHashCode();
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (HasReverse) hash ^= Reverse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEntityHandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityHandle);
      }
      if (HasLines) {
        output.WriteRawTag(16);
        output.WriteInt32(Lines);
      }
      if (origin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Origin);
      }
      if (HasReverse) {
        output.WriteRawTag(32);
        output.WriteBool(Reverse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEntityHandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityHandle);
      }
      if (HasLines) {
        output.WriteRawTag(16);
        output.WriteInt32(Lines);
      }
      if (origin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Origin);
      }
      if (HasReverse) {
        output.WriteRawTag(32);
        output.WriteBool(Reverse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntityHandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityHandle);
      }
      if (HasLines) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lines);
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (HasReverse) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_NevermoreRequiem other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityHandle) {
        EntityHandle = other.EntityHandle;
      }
      if (other.HasLines) {
        Lines = other.Lines;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          Origin = new global::Steam.Protos.Dota2.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.HasReverse) {
        Reverse = other.Reverse;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityHandle = input.ReadUInt32();
            break;
          }
          case 16: {
            Lines = input.ReadInt32();
            break;
          }
          case 26: {
            if (origin_ == null) {
              Origin = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 32: {
            Reverse = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityHandle = input.ReadUInt32();
            break;
          }
          case 16: {
            Lines = input.ReadInt32();
            break;
          }
          case 26: {
            if (origin_ == null) {
              Origin = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 32: {
            Reverse = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_InvalidCommand : pb::IMessage<CDOTAUserMsg_InvalidCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_InvalidCommand> _parser = new pb::MessageParser<CDOTAUserMsg_InvalidCommand>(() => new CDOTAUserMsg_InvalidCommand());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_InvalidCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_InvalidCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_InvalidCommand(CDOTAUserMsg_InvalidCommand other) : this() {
      _hasBits0 = other._hasBits0;
      message_ = other.message_;
      sequenceNumber_ = other.sequenceNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_InvalidCommand Clone() {
      return new CDOTAUserMsg_InvalidCommand(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "sequence_number" field.</summary>
    public const int SequenceNumberFieldNumber = 2;
    private readonly static int SequenceNumberDefaultValue = 0;

    private int sequenceNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceNumber {
      get { if ((_hasBits0 & 1) != 0) { return sequenceNumber_; } else { return SequenceNumberDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sequenceNumber_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceNumber {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sequence_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceNumber() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_InvalidCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_InvalidCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasSequenceNumber) hash ^= SequenceNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMessage) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (HasSequenceNumber) {
        output.WriteRawTag(16);
        output.WriteInt32(SequenceNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMessage) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (HasSequenceNumber) {
        output.WriteRawTag(16);
        output.WriteInt32(SequenceNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HasSequenceNumber) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_InvalidCommand other) {
      if (other == null) {
        return;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      if (other.HasSequenceNumber) {
        SequenceNumber = other.SequenceNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 16: {
            SequenceNumber = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 16: {
            SequenceNumber = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_HudError : pb::IMessage<CDOTAUserMsg_HudError>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_HudError> _parser = new pb::MessageParser<CDOTAUserMsg_HudError>(() => new CDOTAUserMsg_HudError());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HudError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HudError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HudError(CDOTAUserMsg_HudError other) : this() {
      _hasBits0 = other._hasBits0;
      orderId_ = other.orderId_;
      sequenceNumber_ = other.sequenceNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HudError Clone() {
      return new CDOTAUserMsg_HudError(this);
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private readonly static int OrderIdDefaultValue = 0;

    private int orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderId {
      get { if ((_hasBits0 & 1) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        orderId_ = value;
      }
    }
    /// <summary>Gets whether the "order_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrderId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "order_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrderId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sequence_number" field.</summary>
    public const int SequenceNumberFieldNumber = 2;
    private readonly static int SequenceNumberDefaultValue = 0;

    private int sequenceNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceNumber {
      get { if ((_hasBits0 & 2) != 0) { return sequenceNumber_; } else { return SequenceNumberDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sequenceNumber_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceNumber {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sequence_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceNumber() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HudError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HudError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasSequenceNumber) hash ^= SequenceNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOrderId) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderId);
      }
      if (HasSequenceNumber) {
        output.WriteRawTag(16);
        output.WriteInt32(SequenceNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOrderId) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderId);
      }
      if (HasSequenceNumber) {
        output.WriteRawTag(16);
        output.WriteInt32(SequenceNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderId);
      }
      if (HasSequenceNumber) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HudError other) {
      if (other == null) {
        return;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasSequenceNumber) {
        SequenceNumber = other.SequenceNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrderId = input.ReadInt32();
            break;
          }
          case 16: {
            SequenceNumber = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OrderId = input.ReadInt32();
            break;
          }
          case 16: {
            SequenceNumber = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SharedCooldown : pb::IMessage<CDOTAUserMsg_SharedCooldown>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SharedCooldown> _parser = new pb::MessageParser<CDOTAUserMsg_SharedCooldown>(() => new CDOTAUserMsg_SharedCooldown());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SharedCooldown> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SharedCooldown() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SharedCooldown(CDOTAUserMsg_SharedCooldown other) : this() {
      _hasBits0 = other._hasBits0;
      entindex_ = other.entindex_;
      name_ = other.name_;
      cooldown_ = other.cooldown_;
      nameIndex_ = other.nameIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SharedCooldown Clone() {
      return new CDOTAUserMsg_SharedCooldown(this);
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 1;
    private readonly static int EntindexDefaultValue = -1;

    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entindex {
      get { if ((_hasBits0 & 1) != 0) { return entindex_; } else { return EntindexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entindex_ = value;
      }
    }
    /// <summary>Gets whether the "entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntindex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntindex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "cooldown" field.</summary>
    public const int CooldownFieldNumber = 3;
    private readonly static float CooldownDefaultValue = 0F;

    private float cooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cooldown {
      get { if ((_hasBits0 & 2) != 0) { return cooldown_; } else { return CooldownDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cooldown_ = value;
      }
    }
    /// <summary>Gets whether the "cooldown" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCooldown {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cooldown" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCooldown() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name_index" field.</summary>
    public const int NameIndexFieldNumber = 4;
    private readonly static int NameIndexDefaultValue = 0;

    private int nameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameIndex {
      get { if ((_hasBits0 & 4) != 0) { return nameIndex_; } else { return NameIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        nameIndex_ = value;
      }
    }
    /// <summary>Gets whether the "name_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNameIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "name_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNameIndex() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SharedCooldown);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SharedCooldown other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entindex != other.Entindex) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cooldown, other.Cooldown)) return false;
      if (NameIndex != other.NameIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntindex) hash ^= Entindex.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasCooldown) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cooldown);
      if (HasNameIndex) hash ^= NameIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEntindex) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasCooldown) {
        output.WriteRawTag(29);
        output.WriteFloat(Cooldown);
      }
      if (HasNameIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(NameIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEntindex) {
        output.WriteRawTag(8);
        output.WriteInt32(Entindex);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasCooldown) {
        output.WriteRawTag(29);
        output.WriteFloat(Cooldown);
      }
      if (HasNameIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(NameIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasCooldown) {
        size += 1 + 4;
      }
      if (HasNameIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SharedCooldown other) {
      if (other == null) {
        return;
      }
      if (other.HasEntindex) {
        Entindex = other.Entindex;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCooldown) {
        Cooldown = other.Cooldown;
      }
      if (other.HasNameIndex) {
        NameIndex = other.NameIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            Cooldown = input.ReadFloat();
            break;
          }
          case 32: {
            NameIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entindex = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            Cooldown = input.ReadFloat();
            break;
          }
          case 32: {
            NameIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SetNextAutobuyItem : pb::IMessage<CDOTAUserMsg_SetNextAutobuyItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SetNextAutobuyItem> _parser = new pb::MessageParser<CDOTAUserMsg_SetNextAutobuyItem>(() => new CDOTAUserMsg_SetNextAutobuyItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SetNextAutobuyItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SetNextAutobuyItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SetNextAutobuyItem(CDOTAUserMsg_SetNextAutobuyItem other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SetNextAutobuyItem Clone() {
      return new CDOTAUserMsg_SetNextAutobuyItem(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SetNextAutobuyItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SetNextAutobuyItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SetNextAutobuyItem other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_HalloweenDrops : pb::IMessage<CDOTAUserMsg_HalloweenDrops>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_HalloweenDrops> _parser = new pb::MessageParser<CDOTAUserMsg_HalloweenDrops>(() => new CDOTAUserMsg_HalloweenDrops());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HalloweenDrops> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HalloweenDrops() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HalloweenDrops(CDOTAUserMsg_HalloweenDrops other) : this() {
      _hasBits0 = other._hasBits0;
      itemDefs_ = other.itemDefs_.Clone();
      playerIds_ = other.playerIds_.Clone();
      prizeList_ = other.prizeList_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HalloweenDrops Clone() {
      return new CDOTAUserMsg_HalloweenDrops(this);
    }

    /// <summary>Field number for the "item_defs" field.</summary>
    public const int ItemDefsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_itemDefs_codec
        = pb::FieldCodec.ForUInt32(8);
    private readonly pbc::RepeatedField<uint> itemDefs_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemDefs {
      get { return itemDefs_; }
    }

    /// <summary>Field number for the "player_ids" field.</summary>
    public const int PlayerIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    /// <summary>Field number for the "prize_list" field.</summary>
    public const int PrizeListFieldNumber = 3;
    private readonly static uint PrizeListDefaultValue = 0;

    private uint prizeList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrizeList {
      get { if ((_hasBits0 & 1) != 0) { return prizeList_; } else { return PrizeListDefaultValue; } }
      set {
        _hasBits0 |= 1;
        prizeList_ = value;
      }
    }
    /// <summary>Gets whether the "prize_list" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrizeList {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "prize_list" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrizeList() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HalloweenDrops);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HalloweenDrops other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemDefs_.Equals(other.itemDefs_)) return false;
      if(!playerIds_.Equals(other.playerIds_)) return false;
      if (PrizeList != other.PrizeList) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemDefs_.GetHashCode();
      hash ^= playerIds_.GetHashCode();
      if (HasPrizeList) hash ^= PrizeList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      itemDefs_.WriteTo(output, _repeated_itemDefs_codec);
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
      if (HasPrizeList) {
        output.WriteRawTag(24);
        output.WriteUInt32(PrizeList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      itemDefs_.WriteTo(ref output, _repeated_itemDefs_codec);
      playerIds_.WriteTo(ref output, _repeated_playerIds_codec);
      if (HasPrizeList) {
        output.WriteRawTag(24);
        output.WriteUInt32(PrizeList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemDefs_.CalculateSize(_repeated_itemDefs_codec);
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      if (HasPrizeList) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrizeList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HalloweenDrops other) {
      if (other == null) {
        return;
      }
      itemDefs_.Add(other.itemDefs_);
      playerIds_.Add(other.playerIds_);
      if (other.HasPrizeList) {
        PrizeList = other.PrizeList;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            itemDefs_.AddEntriesFrom(input, _repeated_itemDefs_codec);
            break;
          }
          case 18:
          case 16: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
          case 24: {
            PrizeList = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            itemDefs_.AddEntriesFrom(ref input, _repeated_itemDefs_codec);
            break;
          }
          case 18:
          case 16: {
            playerIds_.AddEntriesFrom(ref input, _repeated_playerIds_codec);
            break;
          }
          case 24: {
            PrizeList = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CourierLeftFountainAlert : pb::IMessage<CDOTAUserMsg_CourierLeftFountainAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CourierLeftFountainAlert> _parser = new pb::MessageParser<CDOTAUserMsg_CourierLeftFountainAlert>(() => new CDOTAUserMsg_CourierLeftFountainAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CourierLeftFountainAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CourierLeftFountainAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CourierLeftFountainAlert(CDOTAUserMsg_CourierLeftFountainAlert other) : this() {
      _hasBits0 = other._hasBits0;
      owningPlayerId_ = other.owningPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CourierLeftFountainAlert Clone() {
      return new CDOTAUserMsg_CourierLeftFountainAlert(this);
    }

    /// <summary>Field number for the "owning_player_id" field.</summary>
    public const int OwningPlayerIdFieldNumber = 1;
    private readonly static int OwningPlayerIdDefaultValue = -1;

    private int owningPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwningPlayerId {
      get { if ((_hasBits0 & 1) != 0) { return owningPlayerId_; } else { return OwningPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        owningPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "owning_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwningPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "owning_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwningPlayerId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CourierLeftFountainAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CourierLeftFountainAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwningPlayerId != other.OwningPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOwningPlayerId) hash ^= OwningPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOwningPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(OwningPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOwningPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(OwningPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOwningPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwningPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CourierLeftFountainAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasOwningPlayerId) {
        OwningPlayerId = other.OwningPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OwningPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OwningPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAResponseQuerySerialized : pb::IMessage<CDOTAResponseQuerySerialized>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAResponseQuerySerialized> _parser = new pb::MessageParser<CDOTAResponseQuerySerialized>(() => new CDOTAResponseQuerySerialized());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAResponseQuerySerialized> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAResponseQuerySerialized() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAResponseQuerySerialized(CDOTAResponseQuerySerialized other) : this() {
      facts_ = other.facts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAResponseQuerySerialized Clone() {
      return new CDOTAResponseQuerySerialized(this);
    }

    /// <summary>Field number for the "facts" field.</summary>
    public const int FactsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact> _repeated_facts_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact> facts_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact> Facts {
      get { return facts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAResponseQuerySerialized);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAResponseQuerySerialized other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!facts_.Equals(other.facts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= facts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      facts_.WriteTo(output, _repeated_facts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      facts_.WriteTo(ref output, _repeated_facts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += facts_.CalculateSize(_repeated_facts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAResponseQuerySerialized other) {
      if (other == null) {
        return;
      }
      facts_.Add(other.facts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            facts_.AddEntriesFrom(input, _repeated_facts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            facts_.AddEntriesFrom(ref input, _repeated_facts_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAResponseQuerySerialized message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Fact : pb::IMessage<Fact>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Fact> _parser = new pb::MessageParser<Fact>(() => new Fact());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Fact> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fact() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fact(Fact other) : this() {
          _hasBits0 = other._hasBits0;
          key_ = other.key_;
          valtype_ = other.valtype_;
          valNumeric_ = other.valNumeric_;
          valString_ = other.valString_;
          valStringtableIndex_ = other.valStringtableIndex_;
          valIntNumeric_ = other.valIntNumeric_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fact Clone() {
          return new Fact(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private readonly static int KeyDefaultValue = 0;

        private int key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Key {
          get { if ((_hasBits0 & 1) != 0) { return key_; } else { return KeyDefaultValue; } }
          set {
            _hasBits0 |= 1;
            key_ = value;
          }
        }
        /// <summary>Gets whether the "key" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKey {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "key" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKey() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "valtype" field.</summary>
        public const int ValtypeFieldNumber = 2;
        private readonly static global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact.Types.ValueType ValtypeDefaultValue = global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact.Types.ValueType.Numeric;

        private global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact.Types.ValueType valtype_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact.Types.ValueType Valtype {
          get { if ((_hasBits0 & 2) != 0) { return valtype_; } else { return ValtypeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            valtype_ = value;
          }
        }
        /// <summary>Gets whether the "valtype" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValtype {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "valtype" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValtype() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "val_numeric" field.</summary>
        public const int ValNumericFieldNumber = 3;
        private readonly static float ValNumericDefaultValue = 0F;

        private float valNumeric_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ValNumeric {
          get { if ((_hasBits0 & 4) != 0) { return valNumeric_; } else { return ValNumericDefaultValue; } }
          set {
            _hasBits0 |= 4;
            valNumeric_ = value;
          }
        }
        /// <summary>Gets whether the "val_numeric" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValNumeric {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "val_numeric" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValNumeric() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "val_string" field.</summary>
        public const int ValStringFieldNumber = 4;
        private readonly static string ValStringDefaultValue = "";

        private string valString_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ValString {
          get { return valString_ ?? ValStringDefaultValue; }
          set {
            valString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "val_string" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValString {
          get { return valString_ != null; }
        }
        /// <summary>Clears the value of the "val_string" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValString() {
          valString_ = null;
        }

        /// <summary>Field number for the "val_stringtable_index" field.</summary>
        public const int ValStringtableIndexFieldNumber = 5;
        private readonly static int ValStringtableIndexDefaultValue = 0;

        private int valStringtableIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ValStringtableIndex {
          get { if ((_hasBits0 & 8) != 0) { return valStringtableIndex_; } else { return ValStringtableIndexDefaultValue; } }
          set {
            _hasBits0 |= 8;
            valStringtableIndex_ = value;
          }
        }
        /// <summary>Gets whether the "val_stringtable_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValStringtableIndex {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "val_stringtable_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValStringtableIndex() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "val_int_numeric" field.</summary>
        public const int ValIntNumericFieldNumber = 6;
        private readonly static int ValIntNumericDefaultValue = 0;

        private int valIntNumeric_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ValIntNumeric {
          get { if ((_hasBits0 & 16) != 0) { return valIntNumeric_; } else { return ValIntNumericDefaultValue; } }
          set {
            _hasBits0 |= 16;
            valIntNumeric_ = value;
          }
        }
        /// <summary>Gets whether the "val_int_numeric" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValIntNumeric {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "val_int_numeric" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValIntNumeric() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Fact);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Fact other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (Valtype != other.Valtype) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ValNumeric, other.ValNumeric)) return false;
          if (ValString != other.ValString) return false;
          if (ValStringtableIndex != other.ValStringtableIndex) return false;
          if (ValIntNumeric != other.ValIntNumeric) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasKey) hash ^= Key.GetHashCode();
          if (HasValtype) hash ^= Valtype.GetHashCode();
          if (HasValNumeric) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ValNumeric);
          if (HasValString) hash ^= ValString.GetHashCode();
          if (HasValStringtableIndex) hash ^= ValStringtableIndex.GetHashCode();
          if (HasValIntNumeric) hash ^= ValIntNumeric.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasKey) {
            output.WriteRawTag(8);
            output.WriteInt32(Key);
          }
          if (HasValtype) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Valtype);
          }
          if (HasValNumeric) {
            output.WriteRawTag(29);
            output.WriteFloat(ValNumeric);
          }
          if (HasValString) {
            output.WriteRawTag(34);
            output.WriteString(ValString);
          }
          if (HasValStringtableIndex) {
            output.WriteRawTag(40);
            output.WriteInt32(ValStringtableIndex);
          }
          if (HasValIntNumeric) {
            output.WriteRawTag(48);
            output.WriteSInt32(ValIntNumeric);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasKey) {
            output.WriteRawTag(8);
            output.WriteInt32(Key);
          }
          if (HasValtype) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Valtype);
          }
          if (HasValNumeric) {
            output.WriteRawTag(29);
            output.WriteFloat(ValNumeric);
          }
          if (HasValString) {
            output.WriteRawTag(34);
            output.WriteString(ValString);
          }
          if (HasValStringtableIndex) {
            output.WriteRawTag(40);
            output.WriteInt32(ValStringtableIndex);
          }
          if (HasValIntNumeric) {
            output.WriteRawTag(48);
            output.WriteSInt32(ValIntNumeric);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasKey) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
          }
          if (HasValtype) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Valtype);
          }
          if (HasValNumeric) {
            size += 1 + 4;
          }
          if (HasValString) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ValString);
          }
          if (HasValStringtableIndex) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValStringtableIndex);
          }
          if (HasValIntNumeric) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ValIntNumeric);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Fact other) {
          if (other == null) {
            return;
          }
          if (other.HasKey) {
            Key = other.Key;
          }
          if (other.HasValtype) {
            Valtype = other.Valtype;
          }
          if (other.HasValNumeric) {
            ValNumeric = other.ValNumeric;
          }
          if (other.HasValString) {
            ValString = other.ValString;
          }
          if (other.HasValStringtableIndex) {
            ValStringtableIndex = other.ValStringtableIndex;
          }
          if (other.HasValIntNumeric) {
            ValIntNumeric = other.ValIntNumeric;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Key = input.ReadInt32();
                break;
              }
              case 16: {
                Valtype = (global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact.Types.ValueType) input.ReadEnum();
                break;
              }
              case 29: {
                ValNumeric = input.ReadFloat();
                break;
              }
              case 34: {
                ValString = input.ReadString();
                break;
              }
              case 40: {
                ValStringtableIndex = input.ReadInt32();
                break;
              }
              case 48: {
                ValIntNumeric = input.ReadSInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Key = input.ReadInt32();
                break;
              }
              case 16: {
                Valtype = (global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized.Types.Fact.Types.ValueType) input.ReadEnum();
                break;
              }
              case 29: {
                ValNumeric = input.ReadFloat();
                break;
              }
              case 34: {
                ValString = input.ReadString();
                break;
              }
              case 40: {
                ValStringtableIndex = input.ReadInt32();
                break;
              }
              case 48: {
                ValIntNumeric = input.ReadSInt32();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Fact message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum ValueType {
            [pbr::OriginalName("NUMERIC")] Numeric = 1,
            [pbr::OriginalName("STRING")] String = 2,
            [pbr::OriginalName("STRINGTABLE_INDEX")] StringtableIndex = 3,
            [pbr::OriginalName("INT_NUMERIC")] IntNumeric = 4,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CDOTASpeechMatchOnClient : pb::IMessage<CDOTASpeechMatchOnClient>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTASpeechMatchOnClient> _parser = new pb::MessageParser<CDOTASpeechMatchOnClient>(() => new CDOTASpeechMatchOnClient());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTASpeechMatchOnClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTASpeechMatchOnClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTASpeechMatchOnClient(CDOTASpeechMatchOnClient other) : this() {
      _hasBits0 = other._hasBits0;
      speechConcept_ = other.speechConcept_;
      recipientType_ = other.recipientType_;
      responsequery_ = other.responsequery_ != null ? other.responsequery_.Clone() : null;
      randomseed_ = other.randomseed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTASpeechMatchOnClient Clone() {
      return new CDOTASpeechMatchOnClient(this);
    }

    /// <summary>Field number for the "speech_concept" field.</summary>
    public const int SpeechConceptFieldNumber = 1;
    private readonly static int SpeechConceptDefaultValue = 0;

    private int speechConcept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeechConcept {
      get { if ((_hasBits0 & 1) != 0) { return speechConcept_; } else { return SpeechConceptDefaultValue; } }
      set {
        _hasBits0 |= 1;
        speechConcept_ = value;
      }
    }
    /// <summary>Gets whether the "speech_concept" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpeechConcept {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "speech_concept" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpeechConcept() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "recipient_type" field.</summary>
    public const int RecipientTypeFieldNumber = 2;
    private readonly static int RecipientTypeDefaultValue = 0;

    private int recipientType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecipientType {
      get { if ((_hasBits0 & 2) != 0) { return recipientType_; } else { return RecipientTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        recipientType_ = value;
      }
    }
    /// <summary>Gets whether the "recipient_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecipientType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "recipient_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecipientType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "responsequery" field.</summary>
    public const int ResponsequeryFieldNumber = 3;
    private global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized responsequery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized Responsequery {
      get { return responsequery_; }
      set {
        responsequery_ = value;
      }
    }

    /// <summary>Field number for the "randomseed" field.</summary>
    public const int RandomseedFieldNumber = 4;
    private readonly static int RandomseedDefaultValue = 0;

    private int randomseed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Randomseed {
      get { if ((_hasBits0 & 4) != 0) { return randomseed_; } else { return RandomseedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        randomseed_ = value;
      }
    }
    /// <summary>Gets whether the "randomseed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRandomseed {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "randomseed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRandomseed() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTASpeechMatchOnClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTASpeechMatchOnClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeechConcept != other.SpeechConcept) return false;
      if (RecipientType != other.RecipientType) return false;
      if (!object.Equals(Responsequery, other.Responsequery)) return false;
      if (Randomseed != other.Randomseed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSpeechConcept) hash ^= SpeechConcept.GetHashCode();
      if (HasRecipientType) hash ^= RecipientType.GetHashCode();
      if (responsequery_ != null) hash ^= Responsequery.GetHashCode();
      if (HasRandomseed) hash ^= Randomseed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSpeechConcept) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeechConcept);
      }
      if (HasRecipientType) {
        output.WriteRawTag(16);
        output.WriteInt32(RecipientType);
      }
      if (responsequery_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Responsequery);
      }
      if (HasRandomseed) {
        output.WriteRawTag(37);
        output.WriteSFixed32(Randomseed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSpeechConcept) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeechConcept);
      }
      if (HasRecipientType) {
        output.WriteRawTag(16);
        output.WriteInt32(RecipientType);
      }
      if (responsequery_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Responsequery);
      }
      if (HasRandomseed) {
        output.WriteRawTag(37);
        output.WriteSFixed32(Randomseed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSpeechConcept) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeechConcept);
      }
      if (HasRecipientType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecipientType);
      }
      if (responsequery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Responsequery);
      }
      if (HasRandomseed) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTASpeechMatchOnClient other) {
      if (other == null) {
        return;
      }
      if (other.HasSpeechConcept) {
        SpeechConcept = other.SpeechConcept;
      }
      if (other.HasRecipientType) {
        RecipientType = other.RecipientType;
      }
      if (other.responsequery_ != null) {
        if (responsequery_ == null) {
          Responsequery = new global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized();
        }
        Responsequery.MergeFrom(other.Responsequery);
      }
      if (other.HasRandomseed) {
        Randomseed = other.Randomseed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeechConcept = input.ReadInt32();
            break;
          }
          case 16: {
            RecipientType = input.ReadInt32();
            break;
          }
          case 26: {
            if (responsequery_ == null) {
              Responsequery = new global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized();
            }
            input.ReadMessage(Responsequery);
            break;
          }
          case 37: {
            Randomseed = input.ReadSFixed32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeechConcept = input.ReadInt32();
            break;
          }
          case 16: {
            RecipientType = input.ReadInt32();
            break;
          }
          case 26: {
            if (responsequery_ == null) {
              Responsequery = new global::Steam.Protos.Dota2.CDOTAResponseQuerySerialized();
            }
            input.ReadMessage(Responsequery);
            break;
          }
          case 37: {
            Randomseed = input.ReadSFixed32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_UnitEvent : pb::IMessage<CDOTAUserMsg_UnitEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_UnitEvent> _parser = new pb::MessageParser<CDOTAUserMsg_UnitEvent>(() => new CDOTAUserMsg_UnitEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_UnitEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UnitEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UnitEvent(CDOTAUserMsg_UnitEvent other) : this() {
      _hasBits0 = other._hasBits0;
      msgType_ = other.msgType_;
      entityIndex_ = other.entityIndex_;
      speech_ = other.speech_ != null ? other.speech_.Clone() : null;
      speechMute_ = other.speechMute_ != null ? other.speechMute_.Clone() : null;
      addGesture_ = other.addGesture_ != null ? other.addGesture_.Clone() : null;
      removeGesture_ = other.removeGesture_ != null ? other.removeGesture_.Clone() : null;
      bloodImpact_ = other.bloodImpact_ != null ? other.bloodImpact_.Clone() : null;
      fadeGesture_ = other.fadeGesture_ != null ? other.fadeGesture_.Clone() : null;
      speechMatchOnClient_ = other.speechMatchOnClient_ != null ? other.speechMatchOnClient_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UnitEvent Clone() {
      return new CDOTAUserMsg_UnitEvent(this);
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EDotaEntityMessages MsgTypeDefaultValue = global::Steam.Protos.Dota2.EDotaEntityMessages.DotaUnitSpeech;

    private global::Steam.Protos.Dota2.EDotaEntityMessages msgType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EDotaEntityMessages MsgType {
      get { if ((_hasBits0 & 1) != 0) { return msgType_; } else { return MsgTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        msgType_ = value;
      }
    }
    /// <summary>Gets whether the "msg_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsgType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "msg_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "entity_index" field.</summary>
    public const int EntityIndexFieldNumber = 2;
    private readonly static int EntityIndexDefaultValue = 0;

    private int entityIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityIndex {
      get { if ((_hasBits0 & 2) != 0) { return entityIndex_; } else { return EntityIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        entityIndex_ = value;
      }
    }
    /// <summary>Gets whether the "entity_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "entity_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "speech" field.</summary>
    public const int SpeechFieldNumber = 3;
    private global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Speech speech_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Speech Speech {
      get { return speech_; }
      set {
        speech_ = value;
      }
    }

    /// <summary>Field number for the "speech_mute" field.</summary>
    public const int SpeechMuteFieldNumber = 4;
    private global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.SpeechMute speechMute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.SpeechMute SpeechMute {
      get { return speechMute_; }
      set {
        speechMute_ = value;
      }
    }

    /// <summary>Field number for the "add_gesture" field.</summary>
    public const int AddGestureFieldNumber = 5;
    private global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.AddGesture addGesture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.AddGesture AddGesture {
      get { return addGesture_; }
      set {
        addGesture_ = value;
      }
    }

    /// <summary>Field number for the "remove_gesture" field.</summary>
    public const int RemoveGestureFieldNumber = 6;
    private global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.RemoveGesture removeGesture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.RemoveGesture RemoveGesture {
      get { return removeGesture_; }
      set {
        removeGesture_ = value;
      }
    }

    /// <summary>Field number for the "blood_impact" field.</summary>
    public const int BloodImpactFieldNumber = 7;
    private global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.BloodImpact bloodImpact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.BloodImpact BloodImpact {
      get { return bloodImpact_; }
      set {
        bloodImpact_ = value;
      }
    }

    /// <summary>Field number for the "fade_gesture" field.</summary>
    public const int FadeGestureFieldNumber = 8;
    private global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.FadeGesture fadeGesture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.FadeGesture FadeGesture {
      get { return fadeGesture_; }
      set {
        fadeGesture_ = value;
      }
    }

    /// <summary>Field number for the "speech_match_on_client" field.</summary>
    public const int SpeechMatchOnClientFieldNumber = 9;
    private global::Steam.Protos.Dota2.CDOTASpeechMatchOnClient speechMatchOnClient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTASpeechMatchOnClient SpeechMatchOnClient {
      get { return speechMatchOnClient_; }
      set {
        speechMatchOnClient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_UnitEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_UnitEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (EntityIndex != other.EntityIndex) return false;
      if (!object.Equals(Speech, other.Speech)) return false;
      if (!object.Equals(SpeechMute, other.SpeechMute)) return false;
      if (!object.Equals(AddGesture, other.AddGesture)) return false;
      if (!object.Equals(RemoveGesture, other.RemoveGesture)) return false;
      if (!object.Equals(BloodImpact, other.BloodImpact)) return false;
      if (!object.Equals(FadeGesture, other.FadeGesture)) return false;
      if (!object.Equals(SpeechMatchOnClient, other.SpeechMatchOnClient)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMsgType) hash ^= MsgType.GetHashCode();
      if (HasEntityIndex) hash ^= EntityIndex.GetHashCode();
      if (speech_ != null) hash ^= Speech.GetHashCode();
      if (speechMute_ != null) hash ^= SpeechMute.GetHashCode();
      if (addGesture_ != null) hash ^= AddGesture.GetHashCode();
      if (removeGesture_ != null) hash ^= RemoveGesture.GetHashCode();
      if (bloodImpact_ != null) hash ^= BloodImpact.GetHashCode();
      if (fadeGesture_ != null) hash ^= FadeGesture.GetHashCode();
      if (speechMatchOnClient_ != null) hash ^= SpeechMatchOnClient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMsgType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MsgType);
      }
      if (HasEntityIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(EntityIndex);
      }
      if (speech_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Speech);
      }
      if (speechMute_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SpeechMute);
      }
      if (addGesture_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AddGesture);
      }
      if (removeGesture_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RemoveGesture);
      }
      if (bloodImpact_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BloodImpact);
      }
      if (fadeGesture_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FadeGesture);
      }
      if (speechMatchOnClient_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SpeechMatchOnClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMsgType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MsgType);
      }
      if (HasEntityIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(EntityIndex);
      }
      if (speech_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Speech);
      }
      if (speechMute_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SpeechMute);
      }
      if (addGesture_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AddGesture);
      }
      if (removeGesture_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RemoveGesture);
      }
      if (bloodImpact_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BloodImpact);
      }
      if (fadeGesture_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FadeGesture);
      }
      if (speechMatchOnClient_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SpeechMatchOnClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMsgType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (HasEntityIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityIndex);
      }
      if (speech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Speech);
      }
      if (speechMute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeechMute);
      }
      if (addGesture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddGesture);
      }
      if (removeGesture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveGesture);
      }
      if (bloodImpact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BloodImpact);
      }
      if (fadeGesture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FadeGesture);
      }
      if (speechMatchOnClient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeechMatchOnClient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_UnitEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasMsgType) {
        MsgType = other.MsgType;
      }
      if (other.HasEntityIndex) {
        EntityIndex = other.EntityIndex;
      }
      if (other.speech_ != null) {
        if (speech_ == null) {
          Speech = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Speech();
        }
        Speech.MergeFrom(other.Speech);
      }
      if (other.speechMute_ != null) {
        if (speechMute_ == null) {
          SpeechMute = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.SpeechMute();
        }
        SpeechMute.MergeFrom(other.SpeechMute);
      }
      if (other.addGesture_ != null) {
        if (addGesture_ == null) {
          AddGesture = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.AddGesture();
        }
        AddGesture.MergeFrom(other.AddGesture);
      }
      if (other.removeGesture_ != null) {
        if (removeGesture_ == null) {
          RemoveGesture = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.RemoveGesture();
        }
        RemoveGesture.MergeFrom(other.RemoveGesture);
      }
      if (other.bloodImpact_ != null) {
        if (bloodImpact_ == null) {
          BloodImpact = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.BloodImpact();
        }
        BloodImpact.MergeFrom(other.BloodImpact);
      }
      if (other.fadeGesture_ != null) {
        if (fadeGesture_ == null) {
          FadeGesture = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.FadeGesture();
        }
        FadeGesture.MergeFrom(other.FadeGesture);
      }
      if (other.speechMatchOnClient_ != null) {
        if (speechMatchOnClient_ == null) {
          SpeechMatchOnClient = new global::Steam.Protos.Dota2.CDOTASpeechMatchOnClient();
        }
        SpeechMatchOnClient.MergeFrom(other.SpeechMatchOnClient);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgType = (global::Steam.Protos.Dota2.EDotaEntityMessages) input.ReadEnum();
            break;
          }
          case 16: {
            EntityIndex = input.ReadInt32();
            break;
          }
          case 26: {
            if (speech_ == null) {
              Speech = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Speech();
            }
            input.ReadMessage(Speech);
            break;
          }
          case 34: {
            if (speechMute_ == null) {
              SpeechMute = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.SpeechMute();
            }
            input.ReadMessage(SpeechMute);
            break;
          }
          case 42: {
            if (addGesture_ == null) {
              AddGesture = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.AddGesture();
            }
            input.ReadMessage(AddGesture);
            break;
          }
          case 50: {
            if (removeGesture_ == null) {
              RemoveGesture = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.RemoveGesture();
            }
            input.ReadMessage(RemoveGesture);
            break;
          }
          case 58: {
            if (bloodImpact_ == null) {
              BloodImpact = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.BloodImpact();
            }
            input.ReadMessage(BloodImpact);
            break;
          }
          case 66: {
            if (fadeGesture_ == null) {
              FadeGesture = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.FadeGesture();
            }
            input.ReadMessage(FadeGesture);
            break;
          }
          case 74: {
            if (speechMatchOnClient_ == null) {
              SpeechMatchOnClient = new global::Steam.Protos.Dota2.CDOTASpeechMatchOnClient();
            }
            input.ReadMessage(SpeechMatchOnClient);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MsgType = (global::Steam.Protos.Dota2.EDotaEntityMessages) input.ReadEnum();
            break;
          }
          case 16: {
            EntityIndex = input.ReadInt32();
            break;
          }
          case 26: {
            if (speech_ == null) {
              Speech = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Speech();
            }
            input.ReadMessage(Speech);
            break;
          }
          case 34: {
            if (speechMute_ == null) {
              SpeechMute = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.SpeechMute();
            }
            input.ReadMessage(SpeechMute);
            break;
          }
          case 42: {
            if (addGesture_ == null) {
              AddGesture = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.AddGesture();
            }
            input.ReadMessage(AddGesture);
            break;
          }
          case 50: {
            if (removeGesture_ == null) {
              RemoveGesture = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.RemoveGesture();
            }
            input.ReadMessage(RemoveGesture);
            break;
          }
          case 58: {
            if (bloodImpact_ == null) {
              BloodImpact = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.BloodImpact();
            }
            input.ReadMessage(BloodImpact);
            break;
          }
          case 66: {
            if (fadeGesture_ == null) {
              FadeGesture = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.FadeGesture();
            }
            input.ReadMessage(FadeGesture);
            break;
          }
          case 74: {
            if (speechMatchOnClient_ == null) {
              SpeechMatchOnClient = new global::Steam.Protos.Dota2.CDOTASpeechMatchOnClient();
            }
            input.ReadMessage(SpeechMatchOnClient);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_UnitEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Interval : pb::IMessage<Interval>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Interval> _parser = new pb::MessageParser<Interval>(() => new Interval());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Interval> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interval() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interval(Interval other) : this() {
          _hasBits0 = other._hasBits0;
          start_ = other.start_;
          range_ = other.range_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interval Clone() {
          return new Interval(this);
        }

        /// <summary>Field number for the "start" field.</summary>
        public const int StartFieldNumber = 1;
        private readonly static float StartDefaultValue = 0F;

        private float start_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Start {
          get { if ((_hasBits0 & 1) != 0) { return start_; } else { return StartDefaultValue; } }
          set {
            _hasBits0 |= 1;
            start_ = value;
          }
        }
        /// <summary>Gets whether the "start" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStart {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "start" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStart() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "range" field.</summary>
        public const int RangeFieldNumber = 2;
        private readonly static float RangeDefaultValue = 0F;

        private float range_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Range {
          get { if ((_hasBits0 & 2) != 0) { return range_; } else { return RangeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            range_ = value;
          }
        }
        /// <summary>Gets whether the "range" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRange {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "range" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRange() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Interval);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Interval other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Start, other.Start)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Range, other.Range)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasStart) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Start);
          if (HasRange) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Range);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasStart) {
            output.WriteRawTag(13);
            output.WriteFloat(Start);
          }
          if (HasRange) {
            output.WriteRawTag(21);
            output.WriteFloat(Range);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasStart) {
            output.WriteRawTag(13);
            output.WriteFloat(Start);
          }
          if (HasRange) {
            output.WriteRawTag(21);
            output.WriteFloat(Range);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasStart) {
            size += 1 + 4;
          }
          if (HasRange) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Interval other) {
          if (other == null) {
            return;
          }
          if (other.HasStart) {
            Start = other.Start;
          }
          if (other.HasRange) {
            Range = other.Range;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Start = input.ReadFloat();
                break;
              }
              case 21: {
                Range = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                Start = input.ReadFloat();
                break;
              }
              case 21: {
                Range = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Speech : pb::IMessage<Speech>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Speech> _parser = new pb::MessageParser<Speech>(() => new Speech());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Speech> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Speech() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Speech(Speech other) : this() {
          _hasBits0 = other._hasBits0;
          speechConcept_ = other.speechConcept_;
          response_ = other.response_;
          recipientType_ = other.recipientType_;
          muteable_ = other.muteable_;
          predelay_ = other.predelay_ != null ? other.predelay_.Clone() : null;
          flags_ = other.flags_;
          responseType_ = other.responseType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Speech Clone() {
          return new Speech(this);
        }

        /// <summary>Field number for the "speech_concept" field.</summary>
        public const int SpeechConceptFieldNumber = 1;
        private readonly static int SpeechConceptDefaultValue = 0;

        private int speechConcept_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SpeechConcept {
          get { if ((_hasBits0 & 1) != 0) { return speechConcept_; } else { return SpeechConceptDefaultValue; } }
          set {
            _hasBits0 |= 1;
            speechConcept_ = value;
          }
        }
        /// <summary>Gets whether the "speech_concept" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSpeechConcept {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "speech_concept" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSpeechConcept() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "response" field.</summary>
        public const int ResponseFieldNumber = 2;
        private readonly static string ResponseDefaultValue = "";

        private string response_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Response {
          get { return response_ ?? ResponseDefaultValue; }
          set {
            response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "response" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasResponse {
          get { return response_ != null; }
        }
        /// <summary>Clears the value of the "response" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearResponse() {
          response_ = null;
        }

        /// <summary>Field number for the "recipient_type" field.</summary>
        public const int RecipientTypeFieldNumber = 3;
        private readonly static int RecipientTypeDefaultValue = 0;

        private int recipientType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RecipientType {
          get { if ((_hasBits0 & 2) != 0) { return recipientType_; } else { return RecipientTypeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            recipientType_ = value;
          }
        }
        /// <summary>Gets whether the "recipient_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRecipientType {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "recipient_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRecipientType() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "muteable" field.</summary>
        public const int MuteableFieldNumber = 5;
        private readonly static bool MuteableDefaultValue = false;

        private bool muteable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Muteable {
          get { if ((_hasBits0 & 4) != 0) { return muteable_; } else { return MuteableDefaultValue; } }
          set {
            _hasBits0 |= 4;
            muteable_ = value;
          }
        }
        /// <summary>Gets whether the "muteable" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMuteable {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "muteable" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMuteable() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "predelay" field.</summary>
        public const int PredelayFieldNumber = 6;
        private global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Interval predelay_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Interval Predelay {
          get { return predelay_; }
          set {
            predelay_ = value;
          }
        }

        /// <summary>Field number for the "flags" field.</summary>
        public const int FlagsFieldNumber = 7;
        private readonly static uint FlagsDefaultValue = 0;

        private uint flags_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Flags {
          get { if ((_hasBits0 & 8) != 0) { return flags_; } else { return FlagsDefaultValue; } }
          set {
            _hasBits0 |= 8;
            flags_ = value;
          }
        }
        /// <summary>Gets whether the "flags" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFlags {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "flags" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFlags() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "response_type" field.</summary>
        public const int ResponseTypeFieldNumber = 8;
        private readonly static int ResponseTypeDefaultValue = 0;

        private int responseType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ResponseType {
          get { if ((_hasBits0 & 16) != 0) { return responseType_; } else { return ResponseTypeDefaultValue; } }
          set {
            _hasBits0 |= 16;
            responseType_ = value;
          }
        }
        /// <summary>Gets whether the "response_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasResponseType {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "response_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearResponseType() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Speech);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Speech other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SpeechConcept != other.SpeechConcept) return false;
          if (Response != other.Response) return false;
          if (RecipientType != other.RecipientType) return false;
          if (Muteable != other.Muteable) return false;
          if (!object.Equals(Predelay, other.Predelay)) return false;
          if (Flags != other.Flags) return false;
          if (ResponseType != other.ResponseType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSpeechConcept) hash ^= SpeechConcept.GetHashCode();
          if (HasResponse) hash ^= Response.GetHashCode();
          if (HasRecipientType) hash ^= RecipientType.GetHashCode();
          if (HasMuteable) hash ^= Muteable.GetHashCode();
          if (predelay_ != null) hash ^= Predelay.GetHashCode();
          if (HasFlags) hash ^= Flags.GetHashCode();
          if (HasResponseType) hash ^= ResponseType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasSpeechConcept) {
            output.WriteRawTag(8);
            output.WriteInt32(SpeechConcept);
          }
          if (HasResponse) {
            output.WriteRawTag(18);
            output.WriteString(Response);
          }
          if (HasRecipientType) {
            output.WriteRawTag(24);
            output.WriteInt32(RecipientType);
          }
          if (HasMuteable) {
            output.WriteRawTag(40);
            output.WriteBool(Muteable);
          }
          if (predelay_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Predelay);
          }
          if (HasFlags) {
            output.WriteRawTag(56);
            output.WriteUInt32(Flags);
          }
          if (HasResponseType) {
            output.WriteRawTag(64);
            output.WriteInt32(ResponseType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasSpeechConcept) {
            output.WriteRawTag(8);
            output.WriteInt32(SpeechConcept);
          }
          if (HasResponse) {
            output.WriteRawTag(18);
            output.WriteString(Response);
          }
          if (HasRecipientType) {
            output.WriteRawTag(24);
            output.WriteInt32(RecipientType);
          }
          if (HasMuteable) {
            output.WriteRawTag(40);
            output.WriteBool(Muteable);
          }
          if (predelay_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Predelay);
          }
          if (HasFlags) {
            output.WriteRawTag(56);
            output.WriteUInt32(Flags);
          }
          if (HasResponseType) {
            output.WriteRawTag(64);
            output.WriteInt32(ResponseType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSpeechConcept) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeechConcept);
          }
          if (HasResponse) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
          }
          if (HasRecipientType) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecipientType);
          }
          if (HasMuteable) {
            size += 1 + 1;
          }
          if (predelay_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Predelay);
          }
          if (HasFlags) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
          }
          if (HasResponseType) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResponseType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Speech other) {
          if (other == null) {
            return;
          }
          if (other.HasSpeechConcept) {
            SpeechConcept = other.SpeechConcept;
          }
          if (other.HasResponse) {
            Response = other.Response;
          }
          if (other.HasRecipientType) {
            RecipientType = other.RecipientType;
          }
          if (other.HasMuteable) {
            Muteable = other.Muteable;
          }
          if (other.predelay_ != null) {
            if (predelay_ == null) {
              Predelay = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Interval();
            }
            Predelay.MergeFrom(other.Predelay);
          }
          if (other.HasFlags) {
            Flags = other.Flags;
          }
          if (other.HasResponseType) {
            ResponseType = other.ResponseType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SpeechConcept = input.ReadInt32();
                break;
              }
              case 18: {
                Response = input.ReadString();
                break;
              }
              case 24: {
                RecipientType = input.ReadInt32();
                break;
              }
              case 40: {
                Muteable = input.ReadBool();
                break;
              }
              case 50: {
                if (predelay_ == null) {
                  Predelay = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Interval();
                }
                input.ReadMessage(Predelay);
                break;
              }
              case 56: {
                Flags = input.ReadUInt32();
                break;
              }
              case 64: {
                ResponseType = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                SpeechConcept = input.ReadInt32();
                break;
              }
              case 18: {
                Response = input.ReadString();
                break;
              }
              case 24: {
                RecipientType = input.ReadInt32();
                break;
              }
              case 40: {
                Muteable = input.ReadBool();
                break;
              }
              case 50: {
                if (predelay_ == null) {
                  Predelay = new global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Types.Interval();
                }
                input.ReadMessage(Predelay);
                break;
              }
              case 56: {
                Flags = input.ReadUInt32();
                break;
              }
              case 64: {
                ResponseType = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class SpeechMute : pb::IMessage<SpeechMute>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SpeechMute> _parser = new pb::MessageParser<SpeechMute>(() => new SpeechMute());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpeechMute> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeechMute() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeechMute(SpeechMute other) : this() {
          _hasBits0 = other._hasBits0;
          delay_ = other.delay_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeechMute Clone() {
          return new SpeechMute(this);
        }

        /// <summary>Field number for the "delay" field.</summary>
        public const int DelayFieldNumber = 1;
        private readonly static float DelayDefaultValue = 0.5F;

        private float delay_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Delay {
          get { if ((_hasBits0 & 1) != 0) { return delay_; } else { return DelayDefaultValue; } }
          set {
            _hasBits0 |= 1;
            delay_ = value;
          }
        }
        /// <summary>Gets whether the "delay" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDelay {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "delay" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDelay() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SpeechMute);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpeechMute other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Delay, other.Delay)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasDelay) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Delay);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasDelay) {
            output.WriteRawTag(13);
            output.WriteFloat(Delay);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasDelay) {
            output.WriteRawTag(13);
            output.WriteFloat(Delay);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasDelay) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpeechMute other) {
          if (other == null) {
            return;
          }
          if (other.HasDelay) {
            Delay = other.Delay;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Delay = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                Delay = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AddGesture : pb::IMessage<AddGesture>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AddGesture> _parser = new pb::MessageParser<AddGesture>(() => new AddGesture());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AddGesture> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddGesture() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddGesture(AddGesture other) : this() {
          _hasBits0 = other._hasBits0;
          activity_ = other.activity_;
          slot_ = other.slot_;
          fadeIn_ = other.fadeIn_;
          fadeOut_ = other.fadeOut_;
          playbackRate_ = other.playbackRate_;
          sequenceVariant_ = other.sequenceVariant_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddGesture Clone() {
          return new AddGesture(this);
        }

        /// <summary>Field number for the "activity" field.</summary>
        public const int ActivityFieldNumber = 1;
        private readonly static int ActivityDefaultValue = 0;

        private int activity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Activity {
          get { if ((_hasBits0 & 1) != 0) { return activity_; } else { return ActivityDefaultValue; } }
          set {
            _hasBits0 |= 1;
            activity_ = value;
          }
        }
        /// <summary>Gets whether the "activity" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActivity {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "activity" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActivity() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "slot" field.</summary>
        public const int SlotFieldNumber = 2;
        private readonly static int SlotDefaultValue = 0;

        private int slot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Slot {
          get { if ((_hasBits0 & 2) != 0) { return slot_; } else { return SlotDefaultValue; } }
          set {
            _hasBits0 |= 2;
            slot_ = value;
          }
        }
        /// <summary>Gets whether the "slot" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSlot {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "slot" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSlot() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "fade_in" field.</summary>
        public const int FadeInFieldNumber = 3;
        private readonly static float FadeInDefaultValue = 0F;

        private float fadeIn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FadeIn {
          get { if ((_hasBits0 & 4) != 0) { return fadeIn_; } else { return FadeInDefaultValue; } }
          set {
            _hasBits0 |= 4;
            fadeIn_ = value;
          }
        }
        /// <summary>Gets whether the "fade_in" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFadeIn {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "fade_in" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFadeIn() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "fade_out" field.</summary>
        public const int FadeOutFieldNumber = 4;
        private readonly static float FadeOutDefaultValue = 0.1F;

        private float fadeOut_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FadeOut {
          get { if ((_hasBits0 & 8) != 0) { return fadeOut_; } else { return FadeOutDefaultValue; } }
          set {
            _hasBits0 |= 8;
            fadeOut_ = value;
          }
        }
        /// <summary>Gets whether the "fade_out" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFadeOut {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "fade_out" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFadeOut() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "playback_rate" field.</summary>
        public const int PlaybackRateFieldNumber = 5;
        private readonly static float PlaybackRateDefaultValue = 1F;

        private float playbackRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PlaybackRate {
          get { if ((_hasBits0 & 16) != 0) { return playbackRate_; } else { return PlaybackRateDefaultValue; } }
          set {
            _hasBits0 |= 16;
            playbackRate_ = value;
          }
        }
        /// <summary>Gets whether the "playback_rate" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlaybackRate {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "playback_rate" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlaybackRate() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "sequence_variant" field.</summary>
        public const int SequenceVariantFieldNumber = 6;
        private readonly static int SequenceVariantDefaultValue = 0;

        private int sequenceVariant_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SequenceVariant {
          get { if ((_hasBits0 & 32) != 0) { return sequenceVariant_; } else { return SequenceVariantDefaultValue; } }
          set {
            _hasBits0 |= 32;
            sequenceVariant_ = value;
          }
        }
        /// <summary>Gets whether the "sequence_variant" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSequenceVariant {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "sequence_variant" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSequenceVariant() {
          _hasBits0 &= ~32;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AddGesture);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AddGesture other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Activity != other.Activity) return false;
          if (Slot != other.Slot) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FadeIn, other.FadeIn)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FadeOut, other.FadeOut)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlaybackRate, other.PlaybackRate)) return false;
          if (SequenceVariant != other.SequenceVariant) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasActivity) hash ^= Activity.GetHashCode();
          if (HasSlot) hash ^= Slot.GetHashCode();
          if (HasFadeIn) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FadeIn);
          if (HasFadeOut) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FadeOut);
          if (HasPlaybackRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlaybackRate);
          if (HasSequenceVariant) hash ^= SequenceVariant.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasActivity) {
            output.WriteRawTag(8);
            output.WriteInt32(Activity);
          }
          if (HasSlot) {
            output.WriteRawTag(16);
            output.WriteInt32(Slot);
          }
          if (HasFadeIn) {
            output.WriteRawTag(29);
            output.WriteFloat(FadeIn);
          }
          if (HasFadeOut) {
            output.WriteRawTag(37);
            output.WriteFloat(FadeOut);
          }
          if (HasPlaybackRate) {
            output.WriteRawTag(45);
            output.WriteFloat(PlaybackRate);
          }
          if (HasSequenceVariant) {
            output.WriteRawTag(48);
            output.WriteInt32(SequenceVariant);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasActivity) {
            output.WriteRawTag(8);
            output.WriteInt32(Activity);
          }
          if (HasSlot) {
            output.WriteRawTag(16);
            output.WriteInt32(Slot);
          }
          if (HasFadeIn) {
            output.WriteRawTag(29);
            output.WriteFloat(FadeIn);
          }
          if (HasFadeOut) {
            output.WriteRawTag(37);
            output.WriteFloat(FadeOut);
          }
          if (HasPlaybackRate) {
            output.WriteRawTag(45);
            output.WriteFloat(PlaybackRate);
          }
          if (HasSequenceVariant) {
            output.WriteRawTag(48);
            output.WriteInt32(SequenceVariant);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasActivity) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
          }
          if (HasSlot) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
          }
          if (HasFadeIn) {
            size += 1 + 4;
          }
          if (HasFadeOut) {
            size += 1 + 4;
          }
          if (HasPlaybackRate) {
            size += 1 + 4;
          }
          if (HasSequenceVariant) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceVariant);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AddGesture other) {
          if (other == null) {
            return;
          }
          if (other.HasActivity) {
            Activity = other.Activity;
          }
          if (other.HasSlot) {
            Slot = other.Slot;
          }
          if (other.HasFadeIn) {
            FadeIn = other.FadeIn;
          }
          if (other.HasFadeOut) {
            FadeOut = other.FadeOut;
          }
          if (other.HasPlaybackRate) {
            PlaybackRate = other.PlaybackRate;
          }
          if (other.HasSequenceVariant) {
            SequenceVariant = other.SequenceVariant;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Activity = input.ReadInt32();
                break;
              }
              case 16: {
                Slot = input.ReadInt32();
                break;
              }
              case 29: {
                FadeIn = input.ReadFloat();
                break;
              }
              case 37: {
                FadeOut = input.ReadFloat();
                break;
              }
              case 45: {
                PlaybackRate = input.ReadFloat();
                break;
              }
              case 48: {
                SequenceVariant = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Activity = input.ReadInt32();
                break;
              }
              case 16: {
                Slot = input.ReadInt32();
                break;
              }
              case 29: {
                FadeIn = input.ReadFloat();
                break;
              }
              case 37: {
                FadeOut = input.ReadFloat();
                break;
              }
              case 45: {
                PlaybackRate = input.ReadFloat();
                break;
              }
              case 48: {
                SequenceVariant = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class RemoveGesture : pb::IMessage<RemoveGesture>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RemoveGesture> _parser = new pb::MessageParser<RemoveGesture>(() => new RemoveGesture());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RemoveGesture> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveGesture() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveGesture(RemoveGesture other) : this() {
          _hasBits0 = other._hasBits0;
          activity_ = other.activity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveGesture Clone() {
          return new RemoveGesture(this);
        }

        /// <summary>Field number for the "activity" field.</summary>
        public const int ActivityFieldNumber = 1;
        private readonly static int ActivityDefaultValue = 0;

        private int activity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Activity {
          get { if ((_hasBits0 & 1) != 0) { return activity_; } else { return ActivityDefaultValue; } }
          set {
            _hasBits0 |= 1;
            activity_ = value;
          }
        }
        /// <summary>Gets whether the "activity" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActivity {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "activity" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActivity() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RemoveGesture);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RemoveGesture other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Activity != other.Activity) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasActivity) hash ^= Activity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasActivity) {
            output.WriteRawTag(8);
            output.WriteInt32(Activity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasActivity) {
            output.WriteRawTag(8);
            output.WriteInt32(Activity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasActivity) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RemoveGesture other) {
          if (other == null) {
            return;
          }
          if (other.HasActivity) {
            Activity = other.Activity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Activity = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Activity = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class BloodImpact : pb::IMessage<BloodImpact>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BloodImpact> _parser = new pb::MessageParser<BloodImpact>(() => new BloodImpact());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BloodImpact> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BloodImpact() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BloodImpact(BloodImpact other) : this() {
          _hasBits0 = other._hasBits0;
          scale_ = other.scale_;
          xNormal_ = other.xNormal_;
          yNormal_ = other.yNormal_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BloodImpact Clone() {
          return new BloodImpact(this);
        }

        /// <summary>Field number for the "scale" field.</summary>
        public const int ScaleFieldNumber = 1;
        private readonly static int ScaleDefaultValue = 0;

        private int scale_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Scale {
          get { if ((_hasBits0 & 1) != 0) { return scale_; } else { return ScaleDefaultValue; } }
          set {
            _hasBits0 |= 1;
            scale_ = value;
          }
        }
        /// <summary>Gets whether the "scale" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScale {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "scale" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScale() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "x_normal" field.</summary>
        public const int XNormalFieldNumber = 2;
        private readonly static int XNormalDefaultValue = 0;

        private int xNormal_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int XNormal {
          get { if ((_hasBits0 & 2) != 0) { return xNormal_; } else { return XNormalDefaultValue; } }
          set {
            _hasBits0 |= 2;
            xNormal_ = value;
          }
        }
        /// <summary>Gets whether the "x_normal" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasXNormal {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "x_normal" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearXNormal() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "y_normal" field.</summary>
        public const int YNormalFieldNumber = 3;
        private readonly static int YNormalDefaultValue = 0;

        private int yNormal_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int YNormal {
          get { if ((_hasBits0 & 4) != 0) { return yNormal_; } else { return YNormalDefaultValue; } }
          set {
            _hasBits0 |= 4;
            yNormal_ = value;
          }
        }
        /// <summary>Gets whether the "y_normal" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasYNormal {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "y_normal" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearYNormal() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BloodImpact);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BloodImpact other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Scale != other.Scale) return false;
          if (XNormal != other.XNormal) return false;
          if (YNormal != other.YNormal) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasScale) hash ^= Scale.GetHashCode();
          if (HasXNormal) hash ^= XNormal.GetHashCode();
          if (HasYNormal) hash ^= YNormal.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasScale) {
            output.WriteRawTag(8);
            output.WriteInt32(Scale);
          }
          if (HasXNormal) {
            output.WriteRawTag(16);
            output.WriteInt32(XNormal);
          }
          if (HasYNormal) {
            output.WriteRawTag(24);
            output.WriteInt32(YNormal);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasScale) {
            output.WriteRawTag(8);
            output.WriteInt32(Scale);
          }
          if (HasXNormal) {
            output.WriteRawTag(16);
            output.WriteInt32(XNormal);
          }
          if (HasYNormal) {
            output.WriteRawTag(24);
            output.WriteInt32(YNormal);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasScale) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scale);
          }
          if (HasXNormal) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(XNormal);
          }
          if (HasYNormal) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(YNormal);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BloodImpact other) {
          if (other == null) {
            return;
          }
          if (other.HasScale) {
            Scale = other.Scale;
          }
          if (other.HasXNormal) {
            XNormal = other.XNormal;
          }
          if (other.HasYNormal) {
            YNormal = other.YNormal;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Scale = input.ReadInt32();
                break;
              }
              case 16: {
                XNormal = input.ReadInt32();
                break;
              }
              case 24: {
                YNormal = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Scale = input.ReadInt32();
                break;
              }
              case 16: {
                XNormal = input.ReadInt32();
                break;
              }
              case 24: {
                YNormal = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class FadeGesture : pb::IMessage<FadeGesture>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<FadeGesture> _parser = new pb::MessageParser<FadeGesture>(() => new FadeGesture());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FadeGesture> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_UnitEvent.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FadeGesture() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FadeGesture(FadeGesture other) : this() {
          _hasBits0 = other._hasBits0;
          activity_ = other.activity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FadeGesture Clone() {
          return new FadeGesture(this);
        }

        /// <summary>Field number for the "activity" field.</summary>
        public const int ActivityFieldNumber = 1;
        private readonly static int ActivityDefaultValue = 0;

        private int activity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Activity {
          get { if ((_hasBits0 & 1) != 0) { return activity_; } else { return ActivityDefaultValue; } }
          set {
            _hasBits0 |= 1;
            activity_ = value;
          }
        }
        /// <summary>Gets whether the "activity" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasActivity {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "activity" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearActivity() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FadeGesture);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FadeGesture other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Activity != other.Activity) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasActivity) hash ^= Activity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasActivity) {
            output.WriteRawTag(8);
            output.WriteInt32(Activity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasActivity) {
            output.WriteRawTag(8);
            output.WriteInt32(Activity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasActivity) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FadeGesture other) {
          if (other == null) {
            return;
          }
          if (other.HasActivity) {
            Activity = other.Activity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Activity = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Activity = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_ItemPurchased : pb::IMessage<CDOTAUserMsg_ItemPurchased>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ItemPurchased> _parser = new pb::MessageParser<CDOTAUserMsg_ItemPurchased>(() => new CDOTAUserMsg_ItemPurchased());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ItemPurchased> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemPurchased() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemPurchased(CDOTAUserMsg_ItemPurchased other) : this() {
      _hasBits0 = other._hasBits0;
      itemAbilityId_ = other.itemAbilityId_;
      fromCombine_ = other.fromCombine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemPurchased Clone() {
      return new CDOTAUserMsg_ItemPurchased(this);
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 1;
    private readonly static int ItemAbilityIdDefaultValue = -1;

    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { if ((_hasBits0 & 1) != 0) { return itemAbilityId_; } else { return ItemAbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemAbilityId_ = value;
      }
    }
    /// <summary>Gets whether the "item_ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemAbilityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemAbilityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "from_combine" field.</summary>
    public const int FromCombineFieldNumber = 2;
    private readonly static bool FromCombineDefaultValue = false;

    private bool fromCombine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FromCombine {
      get { if ((_hasBits0 & 2) != 0) { return fromCombine_; } else { return FromCombineDefaultValue; } }
      set {
        _hasBits0 |= 2;
        fromCombine_ = value;
      }
    }
    /// <summary>Gets whether the "from_combine" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromCombine {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "from_combine" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFromCombine() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ItemPurchased);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ItemPurchased other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemAbilityId != other.ItemAbilityId) return false;
      if (FromCombine != other.FromCombine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemAbilityId) hash ^= ItemAbilityId.GetHashCode();
      if (HasFromCombine) hash ^= FromCombine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemAbilityId) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasFromCombine) {
        output.WriteRawTag(16);
        output.WriteBool(FromCombine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemAbilityId) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasFromCombine) {
        output.WriteRawTag(16);
        output.WriteBool(FromCombine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (HasFromCombine) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ItemPurchased other) {
      if (other == null) {
        return;
      }
      if (other.HasItemAbilityId) {
        ItemAbilityId = other.ItemAbilityId;
      }
      if (other.HasFromCombine) {
        FromCombine = other.FromCombine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            FromCombine = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            FromCombine = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ItemSold : pb::IMessage<CDOTAUserMsg_ItemSold>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ItemSold> _parser = new pb::MessageParser<CDOTAUserMsg_ItemSold>(() => new CDOTAUserMsg_ItemSold());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ItemSold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemSold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemSold(CDOTAUserMsg_ItemSold other) : this() {
      _hasBits0 = other._hasBits0;
      itemAbilityId_ = other.itemAbilityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemSold Clone() {
      return new CDOTAUserMsg_ItemSold(this);
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 1;
    private readonly static int ItemAbilityIdDefaultValue = -1;

    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { if ((_hasBits0 & 1) != 0) { return itemAbilityId_; } else { return ItemAbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemAbilityId_ = value;
      }
    }
    /// <summary>Gets whether the "item_ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemAbilityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemAbilityId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ItemSold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ItemSold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemAbilityId != other.ItemAbilityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemAbilityId) hash ^= ItemAbilityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemAbilityId) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemAbilityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemAbilityId) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemAbilityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ItemSold other) {
      if (other == null) {
        return;
      }
      if (other.HasItemAbilityId) {
        ItemAbilityId = other.ItemAbilityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ItemFound : pb::IMessage<CDOTAUserMsg_ItemFound>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ItemFound> _parser = new pb::MessageParser<CDOTAUserMsg_ItemFound>(() => new CDOTAUserMsg_ItemFound());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ItemFound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemFound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemFound(CDOTAUserMsg_ItemFound other) : this() {
      _hasBits0 = other._hasBits0;
      player_ = other.player_;
      quality_ = other.quality_;
      rarity_ = other.rarity_;
      method_ = other.method_;
      itemdef_ = other.itemdef_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ItemFound Clone() {
      return new CDOTAUserMsg_ItemFound(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private readonly static int PlayerDefaultValue = -1;

    private int player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { if ((_hasBits0 & 1) != 0) { return player_; } else { return PlayerDefaultValue; } }
      set {
        _hasBits0 |= 1;
        player_ = value;
      }
    }
    /// <summary>Gets whether the "player" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayer {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayer() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 2;
    private readonly static int QualityDefaultValue = 0;

    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { if ((_hasBits0 & 2) != 0) { return quality_; } else { return QualityDefaultValue; } }
      set {
        _hasBits0 |= 2;
        quality_ = value;
      }
    }
    /// <summary>Gets whether the "quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuality {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuality() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "rarity" field.</summary>
    public const int RarityFieldNumber = 3;
    private readonly static int RarityDefaultValue = 0;

    private int rarity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rarity {
      get { if ((_hasBits0 & 4) != 0) { return rarity_; } else { return RarityDefaultValue; } }
      set {
        _hasBits0 |= 4;
        rarity_ = value;
      }
    }
    /// <summary>Gets whether the "rarity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRarity {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "rarity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRarity() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 4;
    private readonly static int MethodDefaultValue = 0;

    private int method_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Method {
      get { if ((_hasBits0 & 8) != 0) { return method_; } else { return MethodDefaultValue; } }
      set {
        _hasBits0 |= 8;
        method_ = value;
      }
    }
    /// <summary>Gets whether the "method" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMethod {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "method" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMethod() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "itemdef" field.</summary>
    public const int ItemdefFieldNumber = 5;
    private readonly static uint ItemdefDefaultValue = 0;

    private uint itemdef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemdef {
      get { if ((_hasBits0 & 16) != 0) { return itemdef_; } else { return ItemdefDefaultValue; } }
      set {
        _hasBits0 |= 16;
        itemdef_ = value;
      }
    }
    /// <summary>Gets whether the "itemdef" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemdef {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "itemdef" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemdef() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ItemFound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ItemFound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (Quality != other.Quality) return false;
      if (Rarity != other.Rarity) return false;
      if (Method != other.Method) return false;
      if (Itemdef != other.Itemdef) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayer) hash ^= Player.GetHashCode();
      if (HasQuality) hash ^= Quality.GetHashCode();
      if (HasRarity) hash ^= Rarity.GetHashCode();
      if (HasMethod) hash ^= Method.GetHashCode();
      if (HasItemdef) hash ^= Itemdef.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayer) {
        output.WriteRawTag(8);
        output.WriteInt32(Player);
      }
      if (HasQuality) {
        output.WriteRawTag(16);
        output.WriteInt32(Quality);
      }
      if (HasRarity) {
        output.WriteRawTag(24);
        output.WriteInt32(Rarity);
      }
      if (HasMethod) {
        output.WriteRawTag(32);
        output.WriteInt32(Method);
      }
      if (HasItemdef) {
        output.WriteRawTag(40);
        output.WriteUInt32(Itemdef);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayer) {
        output.WriteRawTag(8);
        output.WriteInt32(Player);
      }
      if (HasQuality) {
        output.WriteRawTag(16);
        output.WriteInt32(Quality);
      }
      if (HasRarity) {
        output.WriteRawTag(24);
        output.WriteInt32(Rarity);
      }
      if (HasMethod) {
        output.WriteRawTag(32);
        output.WriteInt32(Method);
      }
      if (HasItemdef) {
        output.WriteRawTag(40);
        output.WriteUInt32(Itemdef);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayer) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (HasQuality) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (HasRarity) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rarity);
      }
      if (HasMethod) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Method);
      }
      if (HasItemdef) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemdef);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ItemFound other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayer) {
        Player = other.Player;
      }
      if (other.HasQuality) {
        Quality = other.Quality;
      }
      if (other.HasRarity) {
        Rarity = other.Rarity;
      }
      if (other.HasMethod) {
        Method = other.Method;
      }
      if (other.HasItemdef) {
        Itemdef = other.Itemdef;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadInt32();
            break;
          }
          case 16: {
            Quality = input.ReadInt32();
            break;
          }
          case 24: {
            Rarity = input.ReadInt32();
            break;
          }
          case 32: {
            Method = input.ReadInt32();
            break;
          }
          case 40: {
            Itemdef = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Player = input.ReadInt32();
            break;
          }
          case 16: {
            Quality = input.ReadInt32();
            break;
          }
          case 24: {
            Rarity = input.ReadInt32();
            break;
          }
          case 32: {
            Method = input.ReadInt32();
            break;
          }
          case 40: {
            Itemdef = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_OverheadEvent : pb::IMessage<CDOTAUserMsg_OverheadEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_OverheadEvent> _parser = new pb::MessageParser<CDOTAUserMsg_OverheadEvent>(() => new CDOTAUserMsg_OverheadEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_OverheadEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OverheadEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OverheadEvent(CDOTAUserMsg_OverheadEvent other) : this() {
      _hasBits0 = other._hasBits0;
      messageType_ = other.messageType_;
      value_ = other.value_;
      targetPlayerEntindex_ = other.targetPlayerEntindex_;
      targetEntindex_ = other.targetEntindex_;
      sourcePlayerEntindex_ = other.sourcePlayerEntindex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OverheadEvent Clone() {
      return new CDOTAUserMsg_OverheadEvent(this);
    }

    /// <summary>Field number for the "message_type" field.</summary>
    public const int MessageTypeFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.DOTA_OVERHEAD_ALERT MessageTypeDefaultValue = global::Steam.Protos.Dota2.DOTA_OVERHEAD_ALERT.OverheadAlertGold;

    private global::Steam.Protos.Dota2.DOTA_OVERHEAD_ALERT messageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_OVERHEAD_ALERT MessageType {
      get { if ((_hasBits0 & 1) != 0) { return messageType_; } else { return MessageTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        messageType_ = value;
      }
    }
    /// <summary>Gets whether the "message_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "message_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static int ValueDefaultValue = 0;

    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { if ((_hasBits0 & 2) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "target_player_entindex" field.</summary>
    public const int TargetPlayerEntindexFieldNumber = 3;
    private readonly static int TargetPlayerEntindexDefaultValue = -1;

    private int targetPlayerEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerEntindex {
      get { if ((_hasBits0 & 4) != 0) { return targetPlayerEntindex_; } else { return TargetPlayerEntindexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        targetPlayerEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "target_player_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetPlayerEntindex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "target_player_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetPlayerEntindex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 4;
    private readonly static int TargetEntindexDefaultValue = -1;

    private int targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetEntindex {
      get { if ((_hasBits0 & 8) != 0) { return targetEntindex_; } else { return TargetEntindexDefaultValue; } }
      set {
        _hasBits0 |= 8;
        targetEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "target_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEntindex {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "target_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEntindex() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "source_player_entindex" field.</summary>
    public const int SourcePlayerEntindexFieldNumber = 5;
    private readonly static int SourcePlayerEntindexDefaultValue = -1;

    private int sourcePlayerEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerEntindex {
      get { if ((_hasBits0 & 16) != 0) { return sourcePlayerEntindex_; } else { return SourcePlayerEntindexDefaultValue; } }
      set {
        _hasBits0 |= 16;
        sourcePlayerEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "source_player_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourcePlayerEntindex {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "source_player_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourcePlayerEntindex() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_OverheadEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_OverheadEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageType != other.MessageType) return false;
      if (Value != other.Value) return false;
      if (TargetPlayerEntindex != other.TargetPlayerEntindex) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      if (SourcePlayerEntindex != other.SourcePlayerEntindex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMessageType) hash ^= MessageType.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasTargetPlayerEntindex) hash ^= TargetPlayerEntindex.GetHashCode();
      if (HasTargetEntindex) hash ^= TargetEntindex.GetHashCode();
      if (HasSourcePlayerEntindex) hash ^= SourcePlayerEntindex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMessageType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MessageType);
      }
      if (HasValue) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (HasTargetPlayerEntindex) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetPlayerEntindex);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetEntindex);
      }
      if (HasSourcePlayerEntindex) {
        output.WriteRawTag(40);
        output.WriteInt32(SourcePlayerEntindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMessageType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MessageType);
      }
      if (HasValue) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (HasTargetPlayerEntindex) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetPlayerEntindex);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetEntindex);
      }
      if (HasSourcePlayerEntindex) {
        output.WriteRawTag(40);
        output.WriteInt32(SourcePlayerEntindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMessageType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (HasTargetPlayerEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerEntindex);
      }
      if (HasTargetEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntindex);
      }
      if (HasSourcePlayerEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerEntindex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_OverheadEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasMessageType) {
        MessageType = other.MessageType;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasTargetPlayerEntindex) {
        TargetPlayerEntindex = other.TargetPlayerEntindex;
      }
      if (other.HasTargetEntindex) {
        TargetEntindex = other.TargetEntindex;
      }
      if (other.HasSourcePlayerEntindex) {
        SourcePlayerEntindex = other.SourcePlayerEntindex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MessageType = (global::Steam.Protos.Dota2.DOTA_OVERHEAD_ALERT) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            TargetPlayerEntindex = input.ReadInt32();
            break;
          }
          case 32: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 40: {
            SourcePlayerEntindex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MessageType = (global::Steam.Protos.Dota2.DOTA_OVERHEAD_ALERT) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            TargetPlayerEntindex = input.ReadInt32();
            break;
          }
          case 32: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 40: {
            SourcePlayerEntindex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TutorialTipInfo : pb::IMessage<CDOTAUserMsg_TutorialTipInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TutorialTipInfo> _parser = new pb::MessageParser<CDOTAUserMsg_TutorialTipInfo>(() => new CDOTAUserMsg_TutorialTipInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TutorialTipInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialTipInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialTipInfo(CDOTAUserMsg_TutorialTipInfo other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      progress_ = other.progress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialTipInfo Clone() {
      return new CDOTAUserMsg_TutorialTipInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private readonly static int ProgressDefaultValue = 0;

    private int progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { if ((_hasBits0 & 1) != 0) { return progress_; } else { return ProgressDefaultValue; } }
      set {
        _hasBits0 |= 1;
        progress_ = value;
      }
    }
    /// <summary>Gets whether the "progress" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProgress {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "progress" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProgress() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TutorialTipInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TutorialTipInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Progress != other.Progress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasProgress) hash ^= Progress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasProgress) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasProgress) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasProgress) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TutorialTipInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasProgress) {
        Progress = other.Progress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TutorialFinish : pb::IMessage<CDOTAUserMsg_TutorialFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TutorialFinish> _parser = new pb::MessageParser<CDOTAUserMsg_TutorialFinish>(() => new CDOTAUserMsg_TutorialFinish());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TutorialFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialFinish(CDOTAUserMsg_TutorialFinish other) : this() {
      _hasBits0 = other._hasBits0;
      heading_ = other.heading_;
      emblem_ = other.emblem_;
      body_ = other.body_;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialFinish Clone() {
      return new CDOTAUserMsg_TutorialFinish(this);
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 1;
    private readonly static string HeadingDefaultValue = "";

    private string heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Heading {
      get { return heading_ ?? HeadingDefaultValue; }
      set {
        heading_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "heading" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeading {
      get { return heading_ != null; }
    }
    /// <summary>Clears the value of the "heading" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeading() {
      heading_ = null;
    }

    /// <summary>Field number for the "emblem" field.</summary>
    public const int EmblemFieldNumber = 2;
    private readonly static string EmblemDefaultValue = "";

    private string emblem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Emblem {
      get { return emblem_ ?? EmblemDefaultValue; }
      set {
        emblem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "emblem" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEmblem {
      get { return emblem_ != null; }
    }
    /// <summary>Clears the value of the "emblem" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEmblem() {
      emblem_ = null;
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 3;
    private readonly static string BodyDefaultValue = "";

    private string body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_ ?? BodyDefaultValue; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "body" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBody {
      get { return body_ != null; }
    }
    /// <summary>Clears the value of the "body" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBody() {
      body_ = null;
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 4;
    private readonly static bool SuccessDefaultValue = false;

    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { if ((_hasBits0 & 1) != 0) { return success_; } else { return SuccessDefaultValue; } }
      set {
        _hasBits0 |= 1;
        success_ = value;
      }
    }
    /// <summary>Gets whether the "success" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuccess {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "success" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuccess() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TutorialFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TutorialFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Heading != other.Heading) return false;
      if (Emblem != other.Emblem) return false;
      if (Body != other.Body) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeading) hash ^= Heading.GetHashCode();
      if (HasEmblem) hash ^= Emblem.GetHashCode();
      if (HasBody) hash ^= Body.GetHashCode();
      if (HasSuccess) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHeading) {
        output.WriteRawTag(10);
        output.WriteString(Heading);
      }
      if (HasEmblem) {
        output.WriteRawTag(18);
        output.WriteString(Emblem);
      }
      if (HasBody) {
        output.WriteRawTag(26);
        output.WriteString(Body);
      }
      if (HasSuccess) {
        output.WriteRawTag(32);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHeading) {
        output.WriteRawTag(10);
        output.WriteString(Heading);
      }
      if (HasEmblem) {
        output.WriteRawTag(18);
        output.WriteString(Emblem);
      }
      if (HasBody) {
        output.WriteRawTag(26);
        output.WriteString(Body);
      }
      if (HasSuccess) {
        output.WriteRawTag(32);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHeading) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Heading);
      }
      if (HasEmblem) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Emblem);
      }
      if (HasBody) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      if (HasSuccess) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TutorialFinish other) {
      if (other == null) {
        return;
      }
      if (other.HasHeading) {
        Heading = other.Heading;
      }
      if (other.HasEmblem) {
        Emblem = other.Emblem;
      }
      if (other.HasBody) {
        Body = other.Body;
      }
      if (other.HasSuccess) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Heading = input.ReadString();
            break;
          }
          case 18: {
            Emblem = input.ReadString();
            break;
          }
          case 26: {
            Body = input.ReadString();
            break;
          }
          case 32: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Heading = input.ReadString();
            break;
          }
          case 18: {
            Emblem = input.ReadString();
            break;
          }
          case 26: {
            Body = input.ReadString();
            break;
          }
          case 32: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TutorialMinimapPosition : pb::IMessage<CDOTAUserMsg_TutorialMinimapPosition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TutorialMinimapPosition> _parser = new pb::MessageParser<CDOTAUserMsg_TutorialMinimapPosition>(() => new CDOTAUserMsg_TutorialMinimapPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TutorialMinimapPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialMinimapPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialMinimapPosition(CDOTAUserMsg_TutorialMinimapPosition other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialMinimapPosition Clone() {
      return new CDOTAUserMsg_TutorialMinimapPosition(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TutorialMinimapPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TutorialMinimapPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TutorialMinimapPosition other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SendGenericToolTip : pb::IMessage<CDOTAUserMsg_SendGenericToolTip>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SendGenericToolTip> _parser = new pb::MessageParser<CDOTAUserMsg_SendGenericToolTip>(() => new CDOTAUserMsg_SendGenericToolTip());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SendGenericToolTip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendGenericToolTip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendGenericToolTip(CDOTAUserMsg_SendGenericToolTip other) : this() {
      _hasBits0 = other._hasBits0;
      title_ = other.title_;
      text_ = other.text_;
      entindex_ = other.entindex_;
      close_ = other.close_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendGenericToolTip Clone() {
      return new CDOTAUserMsg_SendGenericToolTip(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private readonly static string TitleDefaultValue = "";

    private string title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_ ?? TitleDefaultValue; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitle {
      get { return title_ != null; }
    }
    /// <summary>Clears the value of the "title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      title_ = null;
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private readonly static string TextDefaultValue = "";

    private string text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_ ?? TextDefaultValue; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasText {
      get { return text_ != null; }
    }
    /// <summary>Clears the value of the "text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearText() {
      text_ = null;
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 3;
    private readonly static int EntindexDefaultValue = 0;

    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Entindex {
      get { if ((_hasBits0 & 1) != 0) { return entindex_; } else { return EntindexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entindex_ = value;
      }
    }
    /// <summary>Gets whether the "entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntindex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntindex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 4;
    private readonly static bool CloseDefaultValue = false;

    private bool close_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Close {
      get { if ((_hasBits0 & 2) != 0) { return close_; } else { return CloseDefaultValue; } }
      set {
        _hasBits0 |= 2;
        close_ = value;
      }
    }
    /// <summary>Gets whether the "close" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClose {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "close" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClose() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SendGenericToolTip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SendGenericToolTip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Text != other.Text) return false;
      if (Entindex != other.Entindex) return false;
      if (Close != other.Close) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTitle) hash ^= Title.GetHashCode();
      if (HasText) hash ^= Text.GetHashCode();
      if (HasEntindex) hash ^= Entindex.GetHashCode();
      if (HasClose) hash ^= Close.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTitle) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (HasText) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (HasEntindex) {
        output.WriteRawTag(24);
        output.WriteInt32(Entindex);
      }
      if (HasClose) {
        output.WriteRawTag(32);
        output.WriteBool(Close);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTitle) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (HasText) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (HasEntindex) {
        output.WriteRawTag(24);
        output.WriteInt32(Entindex);
      }
      if (HasClose) {
        output.WriteRawTag(32);
        output.WriteBool(Close);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTitle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (HasText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (HasEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
      }
      if (HasClose) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SendGenericToolTip other) {
      if (other == null) {
        return;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasText) {
        Text = other.Text;
      }
      if (other.HasEntindex) {
        Entindex = other.Entindex;
      }
      if (other.HasClose) {
        Close = other.Close;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
          case 24: {
            Entindex = input.ReadInt32();
            break;
          }
          case 32: {
            Close = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
          case 24: {
            Entindex = input.ReadInt32();
            break;
          }
          case 32: {
            Close = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_WorldLine : pb::IMessage<CDOTAUserMsg_WorldLine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_WorldLine> _parser = new pb::MessageParser<CDOTAUserMsg_WorldLine>(() => new CDOTAUserMsg_WorldLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_WorldLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WorldLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WorldLine(CDOTAUserMsg_WorldLine other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      worldline_ = other.worldline_ != null ? other.worldline_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WorldLine Clone() {
      return new CDOTAUserMsg_WorldLine(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "worldline" field.</summary>
    public const int WorldlineFieldNumber = 2;
    private global::Steam.Protos.Dota2.CDOTAMsg_WorldLine worldline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAMsg_WorldLine Worldline {
      get { return worldline_; }
      set {
        worldline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_WorldLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_WorldLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(Worldline, other.Worldline)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (worldline_ != null) hash ^= Worldline.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (worldline_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Worldline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (worldline_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Worldline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (worldline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Worldline);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_WorldLine other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.worldline_ != null) {
        if (worldline_ == null) {
          Worldline = new global::Steam.Protos.Dota2.CDOTAMsg_WorldLine();
        }
        Worldline.MergeFrom(other.Worldline);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (worldline_ == null) {
              Worldline = new global::Steam.Protos.Dota2.CDOTAMsg_WorldLine();
            }
            input.ReadMessage(Worldline);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (worldline_ == null) {
              Worldline = new global::Steam.Protos.Dota2.CDOTAMsg_WorldLine();
            }
            input.ReadMessage(Worldline);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ChatWheel : pb::IMessage<CDOTAUserMsg_ChatWheel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ChatWheel> _parser = new pb::MessageParser<CDOTAUserMsg_ChatWheel>(() => new CDOTAUserMsg_ChatWheel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ChatWheel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatWheel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatWheel(CDOTAUserMsg_ChatWheel other) : this() {
      _hasBits0 = other._hasBits0;
      chatMessageId_ = other.chatMessageId_;
      playerId_ = other.playerId_;
      accountId_ = other.accountId_;
      paramHeroId_ = other.paramHeroId_;
      emoticonId_ = other.emoticonId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatWheel Clone() {
      return new CDOTAUserMsg_ChatWheel(this);
    }

    /// <summary>Field number for the "chat_message_id" field.</summary>
    public const int ChatMessageIdFieldNumber = 1;
    private readonly static uint ChatMessageIdDefaultValue = 4294967295;

    private uint chatMessageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatMessageId {
      get { if ((_hasBits0 & 1) != 0) { return chatMessageId_; } else { return ChatMessageIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chatMessageId_ = value;
      }
    }
    /// <summary>Gets whether the "chat_message_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChatMessageId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chat_message_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChatMessageId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 2) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 4) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "param_hero_id" field.</summary>
    public const int ParamHeroIdFieldNumber = 4;
    private readonly static int ParamHeroIdDefaultValue = 0;

    private int paramHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParamHeroId {
      get { if ((_hasBits0 & 8) != 0) { return paramHeroId_; } else { return ParamHeroIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        paramHeroId_ = value;
      }
    }
    /// <summary>Gets whether the "param_hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParamHeroId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "param_hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParamHeroId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "emoticon_id" field.</summary>
    public const int EmoticonIdFieldNumber = 5;
    private readonly static uint EmoticonIdDefaultValue = 0;

    private uint emoticonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EmoticonId {
      get { if ((_hasBits0 & 16) != 0) { return emoticonId_; } else { return EmoticonIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        emoticonId_ = value;
      }
    }
    /// <summary>Gets whether the "emoticon_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEmoticonId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "emoticon_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEmoticonId() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ChatWheel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ChatWheel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatMessageId != other.ChatMessageId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (AccountId != other.AccountId) return false;
      if (ParamHeroId != other.ParamHeroId) return false;
      if (EmoticonId != other.EmoticonId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChatMessageId) hash ^= ChatMessageId.GetHashCode();
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasParamHeroId) hash ^= ParamHeroId.GetHashCode();
      if (HasEmoticonId) hash ^= EmoticonId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChatMessageId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChatMessageId);
      }
      if (HasPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (HasAccountId) {
        output.WriteRawTag(24);
        output.WriteUInt32(AccountId);
      }
      if (HasParamHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(ParamHeroId);
      }
      if (HasEmoticonId) {
        output.WriteRawTag(40);
        output.WriteUInt32(EmoticonId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChatMessageId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChatMessageId);
      }
      if (HasPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (HasAccountId) {
        output.WriteRawTag(24);
        output.WriteUInt32(AccountId);
      }
      if (HasParamHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(ParamHeroId);
      }
      if (HasEmoticonId) {
        output.WriteRawTag(40);
        output.WriteUInt32(EmoticonId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChatMessageId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatMessageId);
      }
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      if (HasParamHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParamHeroId);
      }
      if (HasEmoticonId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EmoticonId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ChatWheel other) {
      if (other == null) {
        return;
      }
      if (other.HasChatMessageId) {
        ChatMessageId = other.ChatMessageId;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasParamHeroId) {
        ParamHeroId = other.ParamHeroId;
      }
      if (other.HasEmoticonId) {
        EmoticonId = other.EmoticonId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChatMessageId = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 32: {
            ParamHeroId = input.ReadInt32();
            break;
          }
          case 40: {
            EmoticonId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChatMessageId = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 32: {
            ParamHeroId = input.ReadInt32();
            break;
          }
          case 40: {
            EmoticonId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ReceivedXmasGift : pb::IMessage<CDOTAUserMsg_ReceivedXmasGift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ReceivedXmasGift> _parser = new pb::MessageParser<CDOTAUserMsg_ReceivedXmasGift>(() => new CDOTAUserMsg_ReceivedXmasGift());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ReceivedXmasGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ReceivedXmasGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ReceivedXmasGift(CDOTAUserMsg_ReceivedXmasGift other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      itemName_ = other.itemName_;
      inventorySlot_ = other.inventorySlot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ReceivedXmasGift Clone() {
      return new CDOTAUserMsg_ReceivedXmasGift(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_name" field.</summary>
    public const int ItemNameFieldNumber = 2;
    private readonly static string ItemNameDefaultValue = "";

    private string itemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemName {
      get { return itemName_ ?? ItemNameDefaultValue; }
      set {
        itemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "item_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemName {
      get { return itemName_ != null; }
    }
    /// <summary>Clears the value of the "item_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemName() {
      itemName_ = null;
    }

    /// <summary>Field number for the "inventory_slot" field.</summary>
    public const int InventorySlotFieldNumber = 3;
    private readonly static int InventorySlotDefaultValue = 0;

    private int inventorySlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InventorySlot {
      get { if ((_hasBits0 & 2) != 0) { return inventorySlot_; } else { return InventorySlotDefaultValue; } }
      set {
        _hasBits0 |= 2;
        inventorySlot_ = value;
      }
    }
    /// <summary>Gets whether the "inventory_slot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInventorySlot {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "inventory_slot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInventorySlot() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ReceivedXmasGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ReceivedXmasGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ItemName != other.ItemName) return false;
      if (InventorySlot != other.InventorySlot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasItemName) hash ^= ItemName.GetHashCode();
      if (HasInventorySlot) hash ^= InventorySlot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasItemName) {
        output.WriteRawTag(18);
        output.WriteString(ItemName);
      }
      if (HasInventorySlot) {
        output.WriteRawTag(24);
        output.WriteInt32(InventorySlot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasItemName) {
        output.WriteRawTag(18);
        output.WriteString(ItemName);
      }
      if (HasInventorySlot) {
        output.WriteRawTag(24);
        output.WriteInt32(InventorySlot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasItemName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemName);
      }
      if (HasInventorySlot) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InventorySlot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ReceivedXmasGift other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasItemName) {
        ItemName = other.ItemName;
      }
      if (other.HasInventorySlot) {
        InventorySlot = other.InventorySlot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            ItemName = input.ReadString();
            break;
          }
          case 24: {
            InventorySlot = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            ItemName = input.ReadString();
            break;
          }
          case 24: {
            InventorySlot = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ShowSurvey : pb::IMessage<CDOTAUserMsg_ShowSurvey>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ShowSurvey> _parser = new pb::MessageParser<CDOTAUserMsg_ShowSurvey>(() => new CDOTAUserMsg_ShowSurvey());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ShowSurvey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ShowSurvey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ShowSurvey(CDOTAUserMsg_ShowSurvey other) : this() {
      _hasBits0 = other._hasBits0;
      surveyId_ = other.surveyId_;
      matchId_ = other.matchId_;
      responseStyle_ = other.responseStyle_;
      teammateHeroId_ = other.teammateHeroId_;
      teammateName_ = other.teammateName_;
      teammateAccountId_ = other.teammateAccountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ShowSurvey Clone() {
      return new CDOTAUserMsg_ShowSurvey(this);
    }

    /// <summary>Field number for the "survey_id" field.</summary>
    public const int SurveyIdFieldNumber = 1;
    private readonly static int SurveyIdDefaultValue = 0;

    private int surveyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SurveyId {
      get { if ((_hasBits0 & 1) != 0) { return surveyId_; } else { return SurveyIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        surveyId_ = value;
      }
    }
    /// <summary>Gets whether the "survey_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSurveyId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "survey_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSurveyId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 2) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "response_style" field.</summary>
    public const int ResponseStyleFieldNumber = 3;
    private readonly static string ResponseStyleDefaultValue = "";

    private string responseStyle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResponseStyle {
      get { return responseStyle_ ?? ResponseStyleDefaultValue; }
      set {
        responseStyle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "response_style" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponseStyle {
      get { return responseStyle_ != null; }
    }
    /// <summary>Clears the value of the "response_style" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseStyle() {
      responseStyle_ = null;
    }

    /// <summary>Field number for the "teammate_hero_id" field.</summary>
    public const int TeammateHeroIdFieldNumber = 4;
    private readonly static int TeammateHeroIdDefaultValue = 0;

    private int teammateHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeammateHeroId {
      get { if ((_hasBits0 & 4) != 0) { return teammateHeroId_; } else { return TeammateHeroIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        teammateHeroId_ = value;
      }
    }
    /// <summary>Gets whether the "teammate_hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeammateHeroId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "teammate_hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeammateHeroId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "teammate_name" field.</summary>
    public const int TeammateNameFieldNumber = 5;
    private readonly static string TeammateNameDefaultValue = "";

    private string teammateName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeammateName {
      get { return teammateName_ ?? TeammateNameDefaultValue; }
      set {
        teammateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "teammate_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeammateName {
      get { return teammateName_ != null; }
    }
    /// <summary>Clears the value of the "teammate_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeammateName() {
      teammateName_ = null;
    }

    /// <summary>Field number for the "teammate_account_id" field.</summary>
    public const int TeammateAccountIdFieldNumber = 6;
    private readonly static uint TeammateAccountIdDefaultValue = 0;

    private uint teammateAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeammateAccountId {
      get { if ((_hasBits0 & 8) != 0) { return teammateAccountId_; } else { return TeammateAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        teammateAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "teammate_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeammateAccountId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "teammate_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeammateAccountId() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ShowSurvey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ShowSurvey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SurveyId != other.SurveyId) return false;
      if (MatchId != other.MatchId) return false;
      if (ResponseStyle != other.ResponseStyle) return false;
      if (TeammateHeroId != other.TeammateHeroId) return false;
      if (TeammateName != other.TeammateName) return false;
      if (TeammateAccountId != other.TeammateAccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSurveyId) hash ^= SurveyId.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasResponseStyle) hash ^= ResponseStyle.GetHashCode();
      if (HasTeammateHeroId) hash ^= TeammateHeroId.GetHashCode();
      if (HasTeammateName) hash ^= TeammateName.GetHashCode();
      if (HasTeammateAccountId) hash ^= TeammateAccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSurveyId) {
        output.WriteRawTag(8);
        output.WriteInt32(SurveyId);
      }
      if (HasMatchId) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (HasResponseStyle) {
        output.WriteRawTag(26);
        output.WriteString(ResponseStyle);
      }
      if (HasTeammateHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(TeammateHeroId);
      }
      if (HasTeammateName) {
        output.WriteRawTag(42);
        output.WriteString(TeammateName);
      }
      if (HasTeammateAccountId) {
        output.WriteRawTag(48);
        output.WriteUInt32(TeammateAccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSurveyId) {
        output.WriteRawTag(8);
        output.WriteInt32(SurveyId);
      }
      if (HasMatchId) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchId);
      }
      if (HasResponseStyle) {
        output.WriteRawTag(26);
        output.WriteString(ResponseStyle);
      }
      if (HasTeammateHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(TeammateHeroId);
      }
      if (HasTeammateName) {
        output.WriteRawTag(42);
        output.WriteString(TeammateName);
      }
      if (HasTeammateAccountId) {
        output.WriteRawTag(48);
        output.WriteUInt32(TeammateAccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSurveyId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurveyId);
      }
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      if (HasResponseStyle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResponseStyle);
      }
      if (HasTeammateHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeammateHeroId);
      }
      if (HasTeammateName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeammateName);
      }
      if (HasTeammateAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeammateAccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ShowSurvey other) {
      if (other == null) {
        return;
      }
      if (other.HasSurveyId) {
        SurveyId = other.SurveyId;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasResponseStyle) {
        ResponseStyle = other.ResponseStyle;
      }
      if (other.HasTeammateHeroId) {
        TeammateHeroId = other.TeammateHeroId;
      }
      if (other.HasTeammateName) {
        TeammateName = other.TeammateName;
      }
      if (other.HasTeammateAccountId) {
        TeammateAccountId = other.TeammateAccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SurveyId = input.ReadInt32();
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 26: {
            ResponseStyle = input.ReadString();
            break;
          }
          case 32: {
            TeammateHeroId = input.ReadInt32();
            break;
          }
          case 42: {
            TeammateName = input.ReadString();
            break;
          }
          case 48: {
            TeammateAccountId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SurveyId = input.ReadInt32();
            break;
          }
          case 16: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 26: {
            ResponseStyle = input.ReadString();
            break;
          }
          case 32: {
            TeammateHeroId = input.ReadInt32();
            break;
          }
          case 42: {
            TeammateName = input.ReadString();
            break;
          }
          case 48: {
            TeammateAccountId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_UpdateSharedContent : pb::IMessage<CDOTAUserMsg_UpdateSharedContent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_UpdateSharedContent> _parser = new pb::MessageParser<CDOTAUserMsg_UpdateSharedContent>(() => new CDOTAUserMsg_UpdateSharedContent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_UpdateSharedContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UpdateSharedContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UpdateSharedContent(CDOTAUserMsg_UpdateSharedContent other) : this() {
      _hasBits0 = other._hasBits0;
      slotType_ = other.slotType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UpdateSharedContent Clone() {
      return new CDOTAUserMsg_UpdateSharedContent(this);
    }

    /// <summary>Field number for the "slot_type" field.</summary>
    public const int SlotTypeFieldNumber = 1;
    private readonly static int SlotTypeDefaultValue = 0;

    private int slotType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotType {
      get { if ((_hasBits0 & 1) != 0) { return slotType_; } else { return SlotTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        slotType_ = value;
      }
    }
    /// <summary>Gets whether the "slot_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlotType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "slot_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlotType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_UpdateSharedContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_UpdateSharedContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SlotType != other.SlotType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSlotType) hash ^= SlotType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSlotType) {
        output.WriteRawTag(8);
        output.WriteInt32(SlotType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSlotType) {
        output.WriteRawTag(8);
        output.WriteInt32(SlotType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSlotType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_UpdateSharedContent other) {
      if (other == null) {
        return;
      }
      if (other.HasSlotType) {
        SlotType = other.SlotType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SlotType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SlotType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TutorialRequestExp : pb::IMessage<CDOTAUserMsg_TutorialRequestExp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TutorialRequestExp> _parser = new pb::MessageParser<CDOTAUserMsg_TutorialRequestExp>(() => new CDOTAUserMsg_TutorialRequestExp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TutorialRequestExp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialRequestExp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialRequestExp(CDOTAUserMsg_TutorialRequestExp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialRequestExp Clone() {
      return new CDOTAUserMsg_TutorialRequestExp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TutorialRequestExp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TutorialRequestExp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TutorialRequestExp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TutorialFade : pb::IMessage<CDOTAUserMsg_TutorialFade>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TutorialFade> _parser = new pb::MessageParser<CDOTAUserMsg_TutorialFade>(() => new CDOTAUserMsg_TutorialFade());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TutorialFade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialFade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialFade(CDOTAUserMsg_TutorialFade other) : this() {
      _hasBits0 = other._hasBits0;
      tgtAlpha_ = other.tgtAlpha_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialFade Clone() {
      return new CDOTAUserMsg_TutorialFade(this);
    }

    /// <summary>Field number for the "tgt_alpha" field.</summary>
    public const int TgtAlphaFieldNumber = 1;
    private readonly static int TgtAlphaDefaultValue = 0;

    private int tgtAlpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TgtAlpha {
      get { if ((_hasBits0 & 1) != 0) { return tgtAlpha_; } else { return TgtAlphaDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tgtAlpha_ = value;
      }
    }
    /// <summary>Gets whether the "tgt_alpha" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTgtAlpha {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tgt_alpha" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTgtAlpha() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TutorialFade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TutorialFade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TgtAlpha != other.TgtAlpha) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTgtAlpha) hash ^= TgtAlpha.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTgtAlpha) {
        output.WriteRawTag(8);
        output.WriteInt32(TgtAlpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTgtAlpha) {
        output.WriteRawTag(8);
        output.WriteInt32(TgtAlpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTgtAlpha) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TgtAlpha);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TutorialFade other) {
      if (other == null) {
        return;
      }
      if (other.HasTgtAlpha) {
        TgtAlpha = other.TgtAlpha;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TgtAlpha = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TgtAlpha = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TutorialPingMinimap : pb::IMessage<CDOTAUserMsg_TutorialPingMinimap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TutorialPingMinimap> _parser = new pb::MessageParser<CDOTAUserMsg_TutorialPingMinimap>(() => new CDOTAUserMsg_TutorialPingMinimap());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TutorialPingMinimap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialPingMinimap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialPingMinimap(CDOTAUserMsg_TutorialPingMinimap other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      entityIndex_ = other.entityIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TutorialPingMinimap Clone() {
      return new CDOTAUserMsg_TutorialPingMinimap(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 2;
    private readonly static float PosXDefaultValue = 0F;

    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { if ((_hasBits0 & 2) != 0) { return posX_; } else { return PosXDefaultValue; } }
      set {
        _hasBits0 |= 2;
        posX_ = value;
      }
    }
    /// <summary>Gets whether the "pos_x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosX {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "pos_x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosX() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 3;
    private readonly static float PosYDefaultValue = 0F;

    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { if ((_hasBits0 & 4) != 0) { return posY_; } else { return PosYDefaultValue; } }
      set {
        _hasBits0 |= 4;
        posY_ = value;
      }
    }
    /// <summary>Gets whether the "pos_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosY {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "pos_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosY() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 4;
    private readonly static float PosZDefaultValue = 0F;

    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { if ((_hasBits0 & 8) != 0) { return posZ_; } else { return PosZDefaultValue; } }
      set {
        _hasBits0 |= 8;
        posZ_ = value;
      }
    }
    /// <summary>Gets whether the "pos_z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosZ {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "pos_z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosZ() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "entity_index" field.</summary>
    public const int EntityIndexFieldNumber = 5;
    private readonly static int EntityIndexDefaultValue = 0;

    private int entityIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityIndex {
      get { if ((_hasBits0 & 16) != 0) { return entityIndex_; } else { return EntityIndexDefaultValue; } }
      set {
        _hasBits0 |= 16;
        entityIndex_ = value;
      }
    }
    /// <summary>Gets whether the "entity_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityIndex {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "entity_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityIndex() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TutorialPingMinimap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TutorialPingMinimap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (EntityIndex != other.EntityIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasPosX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (HasPosY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (HasPosZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (HasEntityIndex) hash ^= EntityIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasPosX) {
        output.WriteRawTag(21);
        output.WriteFloat(PosX);
      }
      if (HasPosY) {
        output.WriteRawTag(29);
        output.WriteFloat(PosY);
      }
      if (HasPosZ) {
        output.WriteRawTag(37);
        output.WriteFloat(PosZ);
      }
      if (HasEntityIndex) {
        output.WriteRawTag(40);
        output.WriteInt32(EntityIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasPosX) {
        output.WriteRawTag(21);
        output.WriteFloat(PosX);
      }
      if (HasPosY) {
        output.WriteRawTag(29);
        output.WriteFloat(PosY);
      }
      if (HasPosZ) {
        output.WriteRawTag(37);
        output.WriteFloat(PosZ);
      }
      if (HasEntityIndex) {
        output.WriteRawTag(40);
        output.WriteInt32(EntityIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasPosX) {
        size += 1 + 4;
      }
      if (HasPosY) {
        size += 1 + 4;
      }
      if (HasPosZ) {
        size += 1 + 4;
      }
      if (HasEntityIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TutorialPingMinimap other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasPosX) {
        PosX = other.PosX;
      }
      if (other.HasPosY) {
        PosY = other.PosY;
      }
      if (other.HasPosZ) {
        PosZ = other.PosZ;
      }
      if (other.HasEntityIndex) {
        EntityIndex = other.EntityIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 21: {
            PosX = input.ReadFloat();
            break;
          }
          case 29: {
            PosY = input.ReadFloat();
            break;
          }
          case 37: {
            PosZ = input.ReadFloat();
            break;
          }
          case 40: {
            EntityIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 21: {
            PosX = input.ReadFloat();
            break;
          }
          case 29: {
            PosY = input.ReadFloat();
            break;
          }
          case 37: {
            PosZ = input.ReadFloat();
            break;
          }
          case 40: {
            EntityIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_GamerulesStateChanged : pb::IMessage<CDOTAUserMsg_GamerulesStateChanged>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_GamerulesStateChanged> _parser = new pb::MessageParser<CDOTAUserMsg_GamerulesStateChanged>(() => new CDOTAUserMsg_GamerulesStateChanged());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_GamerulesStateChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GamerulesStateChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GamerulesStateChanged(CDOTAUserMsg_GamerulesStateChanged other) : this() {
      _hasBits0 = other._hasBits0;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GamerulesStateChanged Clone() {
      return new CDOTAUserMsg_GamerulesStateChanged(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private readonly static uint StateDefaultValue = 0;

    private uint state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_GamerulesStateChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_GamerulesStateChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasState) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasState) {
        output.WriteRawTag(8);
        output.WriteUInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasState) {
        output.WriteRawTag(8);
        output.WriteUInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_GamerulesStateChanged other) {
      if (other == null) {
        return;
      }
      if (other.HasState) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_AddQuestLogEntry : pb::IMessage<CDOTAUserMsg_AddQuestLogEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_AddQuestLogEntry> _parser = new pb::MessageParser<CDOTAUserMsg_AddQuestLogEntry>(() => new CDOTAUserMsg_AddQuestLogEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_AddQuestLogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AddQuestLogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AddQuestLogEntry(CDOTAUserMsg_AddQuestLogEntry other) : this() {
      npcName_ = other.npcName_;
      npcDialog_ = other.npcDialog_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AddQuestLogEntry Clone() {
      return new CDOTAUserMsg_AddQuestLogEntry(this);
    }

    /// <summary>Field number for the "npc_name" field.</summary>
    public const int NpcNameFieldNumber = 1;
    private readonly static string NpcNameDefaultValue = "";

    private string npcName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NpcName {
      get { return npcName_ ?? NpcNameDefaultValue; }
      set {
        npcName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "npc_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcName {
      get { return npcName_ != null; }
    }
    /// <summary>Clears the value of the "npc_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcName() {
      npcName_ = null;
    }

    /// <summary>Field number for the "npc_dialog" field.</summary>
    public const int NpcDialogFieldNumber = 2;
    private readonly static string NpcDialogDefaultValue = "";

    private string npcDialog_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NpcDialog {
      get { return npcDialog_ ?? NpcDialogDefaultValue; }
      set {
        npcDialog_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "npc_dialog" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcDialog {
      get { return npcDialog_ != null; }
    }
    /// <summary>Clears the value of the "npc_dialog" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcDialog() {
      npcDialog_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_AddQuestLogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_AddQuestLogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NpcName != other.NpcName) return false;
      if (NpcDialog != other.NpcDialog) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNpcName) hash ^= NpcName.GetHashCode();
      if (HasNpcDialog) hash ^= NpcDialog.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNpcName) {
        output.WriteRawTag(10);
        output.WriteString(NpcName);
      }
      if (HasNpcDialog) {
        output.WriteRawTag(18);
        output.WriteString(NpcDialog);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNpcName) {
        output.WriteRawTag(10);
        output.WriteString(NpcName);
      }
      if (HasNpcDialog) {
        output.WriteRawTag(18);
        output.WriteString(NpcDialog);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNpcName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NpcName);
      }
      if (HasNpcDialog) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NpcDialog);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_AddQuestLogEntry other) {
      if (other == null) {
        return;
      }
      if (other.HasNpcName) {
        NpcName = other.NpcName;
      }
      if (other.HasNpcDialog) {
        NpcDialog = other.NpcDialog;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NpcName = input.ReadString();
            break;
          }
          case 18: {
            NpcDialog = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            NpcName = input.ReadString();
            break;
          }
          case 18: {
            NpcDialog = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SendStatPopup : pb::IMessage<CDOTAUserMsg_SendStatPopup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SendStatPopup> _parser = new pb::MessageParser<CDOTAUserMsg_SendStatPopup>(() => new CDOTAUserMsg_SendStatPopup());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SendStatPopup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendStatPopup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendStatPopup(CDOTAUserMsg_SendStatPopup other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      statpopup_ = other.statpopup_ != null ? other.statpopup_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendStatPopup Clone() {
      return new CDOTAUserMsg_SendStatPopup(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "statpopup" field.</summary>
    public const int StatpopupFieldNumber = 2;
    private global::Steam.Protos.Dota2.CDOTAMsg_SendStatPopup statpopup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAMsg_SendStatPopup Statpopup {
      get { return statpopup_; }
      set {
        statpopup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SendStatPopup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SendStatPopup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(Statpopup, other.Statpopup)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (statpopup_ != null) hash ^= Statpopup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (statpopup_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Statpopup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (statpopup_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Statpopup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (statpopup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Statpopup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SendStatPopup other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.statpopup_ != null) {
        if (statpopup_ == null) {
          Statpopup = new global::Steam.Protos.Dota2.CDOTAMsg_SendStatPopup();
        }
        Statpopup.MergeFrom(other.Statpopup);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (statpopup_ == null) {
              Statpopup = new global::Steam.Protos.Dota2.CDOTAMsg_SendStatPopup();
            }
            input.ReadMessage(Statpopup);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (statpopup_ == null) {
              Statpopup = new global::Steam.Protos.Dota2.CDOTAMsg_SendStatPopup();
            }
            input.ReadMessage(Statpopup);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_DismissAllStatPopups : pb::IMessage<CDOTAUserMsg_DismissAllStatPopups>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_DismissAllStatPopups> _parser = new pb::MessageParser<CDOTAUserMsg_DismissAllStatPopups>(() => new CDOTAUserMsg_DismissAllStatPopups());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DismissAllStatPopups> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DismissAllStatPopups() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DismissAllStatPopups(CDOTAUserMsg_DismissAllStatPopups other) : this() {
      dismissallmsg_ = other.dismissallmsg_ != null ? other.dismissallmsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DismissAllStatPopups Clone() {
      return new CDOTAUserMsg_DismissAllStatPopups(this);
    }

    /// <summary>Field number for the "dismissallmsg" field.</summary>
    public const int DismissallmsgFieldNumber = 1;
    private global::Steam.Protos.Dota2.CDOTAMsg_DismissAllStatPopups dismissallmsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAMsg_DismissAllStatPopups Dismissallmsg {
      get { return dismissallmsg_; }
      set {
        dismissallmsg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DismissAllStatPopups);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DismissAllStatPopups other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Dismissallmsg, other.Dismissallmsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dismissallmsg_ != null) hash ^= Dismissallmsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dismissallmsg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dismissallmsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dismissallmsg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dismissallmsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dismissallmsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dismissallmsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DismissAllStatPopups other) {
      if (other == null) {
        return;
      }
      if (other.dismissallmsg_ != null) {
        if (dismissallmsg_ == null) {
          Dismissallmsg = new global::Steam.Protos.Dota2.CDOTAMsg_DismissAllStatPopups();
        }
        Dismissallmsg.MergeFrom(other.Dismissallmsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dismissallmsg_ == null) {
              Dismissallmsg = new global::Steam.Protos.Dota2.CDOTAMsg_DismissAllStatPopups();
            }
            input.ReadMessage(Dismissallmsg);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (dismissallmsg_ == null) {
              Dismissallmsg = new global::Steam.Protos.Dota2.CDOTAMsg_DismissAllStatPopups();
            }
            input.ReadMessage(Dismissallmsg);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SendRoshanSpectatorPhase : pb::IMessage<CDOTAUserMsg_SendRoshanSpectatorPhase>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SendRoshanSpectatorPhase> _parser = new pb::MessageParser<CDOTAUserMsg_SendRoshanSpectatorPhase>(() => new CDOTAUserMsg_SendRoshanSpectatorPhase());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SendRoshanSpectatorPhase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanSpectatorPhase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanSpectatorPhase(CDOTAUserMsg_SendRoshanSpectatorPhase other) : this() {
      _hasBits0 = other._hasBits0;
      phase_ = other.phase_;
      phaseStartTime_ = other.phaseStartTime_;
      phaseLength_ = other.phaseLength_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanSpectatorPhase Clone() {
      return new CDOTAUserMsg_SendRoshanSpectatorPhase(this);
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.DOTA_ROSHAN_PHASE PhaseDefaultValue = global::Steam.Protos.Dota2.DOTA_ROSHAN_PHASE.KSrspRoshanAlive;

    private global::Steam.Protos.Dota2.DOTA_ROSHAN_PHASE phase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_ROSHAN_PHASE Phase {
      get { if ((_hasBits0 & 1) != 0) { return phase_; } else { return PhaseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        phase_ = value;
      }
    }
    /// <summary>Gets whether the "phase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhase {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "phase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhase() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "phase_start_time" field.</summary>
    public const int PhaseStartTimeFieldNumber = 2;
    private readonly static int PhaseStartTimeDefaultValue = 0;

    private int phaseStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhaseStartTime {
      get { if ((_hasBits0 & 2) != 0) { return phaseStartTime_; } else { return PhaseStartTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        phaseStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "phase_start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhaseStartTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "phase_start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhaseStartTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "phase_length" field.</summary>
    public const int PhaseLengthFieldNumber = 3;
    private readonly static int PhaseLengthDefaultValue = 0;

    private int phaseLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhaseLength {
      get { if ((_hasBits0 & 4) != 0) { return phaseLength_; } else { return PhaseLengthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        phaseLength_ = value;
      }
    }
    /// <summary>Gets whether the "phase_length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhaseLength {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "phase_length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhaseLength() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SendRoshanSpectatorPhase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SendRoshanSpectatorPhase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phase != other.Phase) return false;
      if (PhaseStartTime != other.PhaseStartTime) return false;
      if (PhaseLength != other.PhaseLength) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPhase) hash ^= Phase.GetHashCode();
      if (HasPhaseStartTime) hash ^= PhaseStartTime.GetHashCode();
      if (HasPhaseLength) hash ^= PhaseLength.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPhase) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Phase);
      }
      if (HasPhaseStartTime) {
        output.WriteRawTag(16);
        output.WriteInt32(PhaseStartTime);
      }
      if (HasPhaseLength) {
        output.WriteRawTag(24);
        output.WriteInt32(PhaseLength);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPhase) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Phase);
      }
      if (HasPhaseStartTime) {
        output.WriteRawTag(16);
        output.WriteInt32(PhaseStartTime);
      }
      if (HasPhaseLength) {
        output.WriteRawTag(24);
        output.WriteInt32(PhaseLength);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPhase) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
      }
      if (HasPhaseStartTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhaseStartTime);
      }
      if (HasPhaseLength) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhaseLength);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SendRoshanSpectatorPhase other) {
      if (other == null) {
        return;
      }
      if (other.HasPhase) {
        Phase = other.Phase;
      }
      if (other.HasPhaseStartTime) {
        PhaseStartTime = other.PhaseStartTime;
      }
      if (other.HasPhaseLength) {
        PhaseLength = other.PhaseLength;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Phase = (global::Steam.Protos.Dota2.DOTA_ROSHAN_PHASE) input.ReadEnum();
            break;
          }
          case 16: {
            PhaseStartTime = input.ReadInt32();
            break;
          }
          case 24: {
            PhaseLength = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Phase = (global::Steam.Protos.Dota2.DOTA_ROSHAN_PHASE) input.ReadEnum();
            break;
          }
          case 16: {
            PhaseStartTime = input.ReadInt32();
            break;
          }
          case 24: {
            PhaseLength = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SendRoshanPopup : pb::IMessage<CDOTAUserMsg_SendRoshanPopup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SendRoshanPopup> _parser = new pb::MessageParser<CDOTAUserMsg_SendRoshanPopup>(() => new CDOTAUserMsg_SendRoshanPopup());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SendRoshanPopup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanPopup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanPopup(CDOTAUserMsg_SendRoshanPopup other) : this() {
      _hasBits0 = other._hasBits0;
      reclaimed_ = other.reclaimed_;
      gametime_ = other.gametime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendRoshanPopup Clone() {
      return new CDOTAUserMsg_SendRoshanPopup(this);
    }

    /// <summary>Field number for the "reclaimed" field.</summary>
    public const int ReclaimedFieldNumber = 1;
    private readonly static bool ReclaimedDefaultValue = false;

    private bool reclaimed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reclaimed {
      get { if ((_hasBits0 & 1) != 0) { return reclaimed_; } else { return ReclaimedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        reclaimed_ = value;
      }
    }
    /// <summary>Gets whether the "reclaimed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReclaimed {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reclaimed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReclaimed() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "gametime" field.</summary>
    public const int GametimeFieldNumber = 2;
    private readonly static int GametimeDefaultValue = 0;

    private int gametime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gametime {
      get { if ((_hasBits0 & 2) != 0) { return gametime_; } else { return GametimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gametime_ = value;
      }
    }
    /// <summary>Gets whether the "gametime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGametime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "gametime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGametime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SendRoshanPopup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SendRoshanPopup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reclaimed != other.Reclaimed) return false;
      if (Gametime != other.Gametime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReclaimed) hash ^= Reclaimed.GetHashCode();
      if (HasGametime) hash ^= Gametime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReclaimed) {
        output.WriteRawTag(8);
        output.WriteBool(Reclaimed);
      }
      if (HasGametime) {
        output.WriteRawTag(16);
        output.WriteInt32(Gametime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReclaimed) {
        output.WriteRawTag(8);
        output.WriteBool(Reclaimed);
      }
      if (HasGametime) {
        output.WriteRawTag(16);
        output.WriteInt32(Gametime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasReclaimed) {
        size += 1 + 1;
      }
      if (HasGametime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gametime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SendRoshanPopup other) {
      if (other == null) {
        return;
      }
      if (other.HasReclaimed) {
        Reclaimed = other.Reclaimed;
      }
      if (other.HasGametime) {
        Gametime = other.Gametime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Reclaimed = input.ReadBool();
            break;
          }
          case 16: {
            Gametime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Reclaimed = input.ReadBool();
            break;
          }
          case 16: {
            Gametime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SendFinalGold : pb::IMessage<CDOTAUserMsg_SendFinalGold>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SendFinalGold> _parser = new pb::MessageParser<CDOTAUserMsg_SendFinalGold>(() => new CDOTAUserMsg_SendFinalGold());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SendFinalGold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendFinalGold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendFinalGold(CDOTAUserMsg_SendFinalGold other) : this() {
      reliableGold_ = other.reliableGold_.Clone();
      unreliableGold_ = other.unreliableGold_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SendFinalGold Clone() {
      return new CDOTAUserMsg_SendFinalGold(this);
    }

    /// <summary>Field number for the "reliable_gold" field.</summary>
    public const int ReliableGoldFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_reliableGold_codec
        = pb::FieldCodec.ForUInt32(8);
    private readonly pbc::RepeatedField<uint> reliableGold_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ReliableGold {
      get { return reliableGold_; }
    }

    /// <summary>Field number for the "unreliable_gold" field.</summary>
    public const int UnreliableGoldFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_unreliableGold_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> unreliableGold_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnreliableGold {
      get { return unreliableGold_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SendFinalGold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SendFinalGold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reliableGold_.Equals(other.reliableGold_)) return false;
      if(!unreliableGold_.Equals(other.unreliableGold_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reliableGold_.GetHashCode();
      hash ^= unreliableGold_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      reliableGold_.WriteTo(output, _repeated_reliableGold_codec);
      unreliableGold_.WriteTo(output, _repeated_unreliableGold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      reliableGold_.WriteTo(ref output, _repeated_reliableGold_codec);
      unreliableGold_.WriteTo(ref output, _repeated_unreliableGold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reliableGold_.CalculateSize(_repeated_reliableGold_codec);
      size += unreliableGold_.CalculateSize(_repeated_unreliableGold_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SendFinalGold other) {
      if (other == null) {
        return;
      }
      reliableGold_.Add(other.reliableGold_);
      unreliableGold_.Add(other.unreliableGold_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            reliableGold_.AddEntriesFrom(input, _repeated_reliableGold_codec);
            break;
          }
          case 18:
          case 16: {
            unreliableGold_.AddEntriesFrom(input, _repeated_unreliableGold_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            reliableGold_.AddEntriesFrom(ref input, _repeated_reliableGold_codec);
            break;
          }
          case 18:
          case 16: {
            unreliableGold_.AddEntriesFrom(ref input, _repeated_unreliableGold_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CustomMsg : pb::IMessage<CDOTAUserMsg_CustomMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CustomMsg> _parser = new pb::MessageParser<CDOTAUserMsg_CustomMsg>(() => new CDOTAUserMsg_CustomMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CustomMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomMsg(CDOTAUserMsg_CustomMsg other) : this() {
      _hasBits0 = other._hasBits0;
      message_ = other.message_;
      playerId_ = other.playerId_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomMsg Clone() {
      return new CDOTAUserMsg_CustomMsg(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private readonly static int ValueDefaultValue = 0;

    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { if ((_hasBits0 & 2) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CustomMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CustomMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMessage) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (HasPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (HasValue) {
        output.WriteRawTag(24);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMessage) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (HasPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (HasValue) {
        output.WriteRawTag(24);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CustomMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CoachHUDPing : pb::IMessage<CDOTAUserMsg_CoachHUDPing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CoachHUDPing> _parser = new pb::MessageParser<CDOTAUserMsg_CoachHUDPing>(() => new CDOTAUserMsg_CoachHUDPing());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CoachHUDPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CoachHUDPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CoachHUDPing(CDOTAUserMsg_CoachHUDPing other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      hudPing_ = other.hudPing_ != null ? other.hudPing_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CoachHUDPing Clone() {
      return new CDOTAUserMsg_CoachHUDPing(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hud_ping" field.</summary>
    public const int HudPingFieldNumber = 2;
    private global::Steam.Protos.Dota2.CDOTAMsg_CoachHUDPing hudPing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAMsg_CoachHUDPing HudPing {
      get { return hudPing_; }
      set {
        hudPing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CoachHUDPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CoachHUDPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(HudPing, other.HudPing)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (hudPing_ != null) hash ^= HudPing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (hudPing_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HudPing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (hudPing_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HudPing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (hudPing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HudPing);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CoachHUDPing other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.hudPing_ != null) {
        if (hudPing_ == null) {
          HudPing = new global::Steam.Protos.Dota2.CDOTAMsg_CoachHUDPing();
        }
        HudPing.MergeFrom(other.HudPing);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (hudPing_ == null) {
              HudPing = new global::Steam.Protos.Dota2.CDOTAMsg_CoachHUDPing();
            }
            input.ReadMessage(HudPing);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (hudPing_ == null) {
              HudPing = new global::Steam.Protos.Dota2.CDOTAMsg_CoachHUDPing();
            }
            input.ReadMessage(HudPing);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ClientLoadGridNav : pb::IMessage<CDOTAUserMsg_ClientLoadGridNav>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ClientLoadGridNav> _parser = new pb::MessageParser<CDOTAUserMsg_ClientLoadGridNav>(() => new CDOTAUserMsg_ClientLoadGridNav());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ClientLoadGridNav> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ClientLoadGridNav() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ClientLoadGridNav(CDOTAUserMsg_ClientLoadGridNav other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ClientLoadGridNav Clone() {
      return new CDOTAUserMsg_ClientLoadGridNav(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ClientLoadGridNav);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ClientLoadGridNav other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ClientLoadGridNav other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TE_Projectile : pb::IMessage<CDOTAUserMsg_TE_Projectile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_Projectile> _parser = new pb::MessageParser<CDOTAUserMsg_TE_Projectile>(() => new CDOTAUserMsg_TE_Projectile());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_Projectile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_Projectile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_Projectile(CDOTAUserMsg_TE_Projectile other) : this() {
      _hasBits0 = other._hasBits0;
      source_ = other.source_;
      target_ = other.target_;
      moveSpeed_ = other.moveSpeed_;
      sourceAttachment_ = other.sourceAttachment_;
      particleSystemHandle_ = other.particleSystemHandle_;
      dodgeable_ = other.dodgeable_;
      isAttack_ = other.isAttack_;
      expireTime_ = other.expireTime_;
      maximpacttime_ = other.maximpacttime_;
      colorgemcolor_ = other.colorgemcolor_;
      launchTick_ = other.launchTick_;
      handle_ = other.handle_;
      targetLoc_ = other.targetLoc_ != null ? other.targetLoc_.Clone() : null;
      particleCpData_ = other.particleCpData_.Clone();
      additionalParticleSystemHandle_ = other.additionalParticleSystemHandle_;
      originalMoveSpeed_ = other.originalMoveSpeed_;
      ability_ = other.ability_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_Projectile Clone() {
      return new CDOTAUserMsg_TE_Projectile(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private readonly static uint SourceDefaultValue = 16777215;

    private uint source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Source {
      get { if ((_hasBits0 & 1) != 0) { return source_; } else { return SourceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        source_ = value;
      }
    }
    /// <summary>Gets whether the "source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSource {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSource() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private readonly static uint TargetDefaultValue = 16777215;

    private uint target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Target {
      get { if ((_hasBits0 & 2) != 0) { return target_; } else { return TargetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        target_ = value;
      }
    }
    /// <summary>Gets whether the "target" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "move_speed" field.</summary>
    public const int MoveSpeedFieldNumber = 3;
    private readonly static int MoveSpeedDefaultValue = 0;

    private int moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { if ((_hasBits0 & 4) != 0) { return moveSpeed_; } else { return MoveSpeedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        moveSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "move_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoveSpeed {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "move_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoveSpeed() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "source_attachment" field.</summary>
    public const int SourceAttachmentFieldNumber = 4;
    private readonly static int SourceAttachmentDefaultValue = 0;

    private int sourceAttachment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceAttachment {
      get { if ((_hasBits0 & 8) != 0) { return sourceAttachment_; } else { return SourceAttachmentDefaultValue; } }
      set {
        _hasBits0 |= 8;
        sourceAttachment_ = value;
      }
    }
    /// <summary>Gets whether the "source_attachment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceAttachment {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "source_attachment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceAttachment() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "particle_system_handle" field.</summary>
    public const int ParticleSystemHandleFieldNumber = 5;
    private readonly static long ParticleSystemHandleDefaultValue = 0L;

    private long particleSystemHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParticleSystemHandle {
      get { if ((_hasBits0 & 16) != 0) { return particleSystemHandle_; } else { return ParticleSystemHandleDefaultValue; } }
      set {
        _hasBits0 |= 16;
        particleSystemHandle_ = value;
      }
    }
    /// <summary>Gets whether the "particle_system_handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParticleSystemHandle {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "particle_system_handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParticleSystemHandle() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "dodgeable" field.</summary>
    public const int DodgeableFieldNumber = 6;
    private readonly static bool DodgeableDefaultValue = false;

    private bool dodgeable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dodgeable {
      get { if ((_hasBits0 & 32) != 0) { return dodgeable_; } else { return DodgeableDefaultValue; } }
      set {
        _hasBits0 |= 32;
        dodgeable_ = value;
      }
    }
    /// <summary>Gets whether the "dodgeable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDodgeable {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "dodgeable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDodgeable() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "is_attack" field.</summary>
    public const int IsAttackFieldNumber = 7;
    private readonly static bool IsAttackDefaultValue = false;

    private bool isAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttack {
      get { if ((_hasBits0 & 64) != 0) { return isAttack_; } else { return IsAttackDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isAttack_ = value;
      }
    }
    /// <summary>Gets whether the "is_attack" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAttack {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_attack" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAttack() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 9;
    private readonly static float ExpireTimeDefaultValue = 0F;

    private float expireTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExpireTime {
      get { if ((_hasBits0 & 128) != 0) { return expireTime_; } else { return ExpireTimeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        expireTime_ = value;
      }
    }
    /// <summary>Gets whether the "expire_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpireTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "expire_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpireTime() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "maximpacttime" field.</summary>
    public const int MaximpacttimeFieldNumber = 10;
    private readonly static float MaximpacttimeDefaultValue = 0F;

    private float maximpacttime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Maximpacttime {
      get { if ((_hasBits0 & 256) != 0) { return maximpacttime_; } else { return MaximpacttimeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        maximpacttime_ = value;
      }
    }
    /// <summary>Gets whether the "maximpacttime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaximpacttime {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "maximpacttime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaximpacttime() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "colorgemcolor" field.</summary>
    public const int ColorgemcolorFieldNumber = 11;
    private readonly static uint ColorgemcolorDefaultValue = 0;

    private uint colorgemcolor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Colorgemcolor {
      get { if ((_hasBits0 & 512) != 0) { return colorgemcolor_; } else { return ColorgemcolorDefaultValue; } }
      set {
        _hasBits0 |= 512;
        colorgemcolor_ = value;
      }
    }
    /// <summary>Gets whether the "colorgemcolor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColorgemcolor {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "colorgemcolor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColorgemcolor() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "launch_tick" field.</summary>
    public const int LaunchTickFieldNumber = 12;
    private readonly static int LaunchTickDefaultValue = 0;

    private int launchTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaunchTick {
      get { if ((_hasBits0 & 1024) != 0) { return launchTick_; } else { return LaunchTickDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        launchTick_ = value;
      }
    }
    /// <summary>Gets whether the "launch_tick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaunchTick {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "launch_tick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaunchTick() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 13;
    private readonly static int HandleDefaultValue = 0;

    private int handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handle {
      get { if ((_hasBits0 & 2048) != 0) { return handle_; } else { return HandleDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        handle_ = value;
      }
    }
    /// <summary>Gets whether the "handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHandle {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHandle() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "target_loc" field.</summary>
    public const int TargetLocFieldNumber = 14;
    private global::Steam.Protos.Dota2.CMsgVector targetLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector TargetLoc {
      get { return targetLoc_; }
      set {
        targetLoc_ = value;
      }
    }

    /// <summary>Field number for the "particle_cp_data" field.</summary>
    public const int ParticleCpDataFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData> _repeated_particleCpData_codec
        = pb::FieldCodec.ForMessage(122, global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData> particleCpData_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData> ParticleCpData {
      get { return particleCpData_; }
    }

    /// <summary>Field number for the "additional_particle_system_handle" field.</summary>
    public const int AdditionalParticleSystemHandleFieldNumber = 16;
    private readonly static long AdditionalParticleSystemHandleDefaultValue = 0L;

    private long additionalParticleSystemHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AdditionalParticleSystemHandle {
      get { if ((_hasBits0 & 4096) != 0) { return additionalParticleSystemHandle_; } else { return AdditionalParticleSystemHandleDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        additionalParticleSystemHandle_ = value;
      }
    }
    /// <summary>Gets whether the "additional_particle_system_handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdditionalParticleSystemHandle {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "additional_particle_system_handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdditionalParticleSystemHandle() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "original_move_speed" field.</summary>
    public const int OriginalMoveSpeedFieldNumber = 17;
    private readonly static int OriginalMoveSpeedDefaultValue = 0;

    private int originalMoveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginalMoveSpeed {
      get { if ((_hasBits0 & 8192) != 0) { return originalMoveSpeed_; } else { return OriginalMoveSpeedDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        originalMoveSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "original_move_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalMoveSpeed {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "original_move_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalMoveSpeed() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "ability" field.</summary>
    public const int AbilityFieldNumber = 18;
    private readonly static uint AbilityDefaultValue = 16777215;

    private uint ability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ability {
      get { if ((_hasBits0 & 16384) != 0) { return ability_; } else { return AbilityDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        ability_ = value;
      }
    }
    /// <summary>Gets whether the "ability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbility {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "ability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbility() {
      _hasBits0 &= ~16384;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_Projectile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_Projectile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (Target != other.Target) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (SourceAttachment != other.SourceAttachment) return false;
      if (ParticleSystemHandle != other.ParticleSystemHandle) return false;
      if (Dodgeable != other.Dodgeable) return false;
      if (IsAttack != other.IsAttack) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpireTime, other.ExpireTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Maximpacttime, other.Maximpacttime)) return false;
      if (Colorgemcolor != other.Colorgemcolor) return false;
      if (LaunchTick != other.LaunchTick) return false;
      if (Handle != other.Handle) return false;
      if (!object.Equals(TargetLoc, other.TargetLoc)) return false;
      if(!particleCpData_.Equals(other.particleCpData_)) return false;
      if (AdditionalParticleSystemHandle != other.AdditionalParticleSystemHandle) return false;
      if (OriginalMoveSpeed != other.OriginalMoveSpeed) return false;
      if (Ability != other.Ability) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSource) hash ^= Source.GetHashCode();
      if (HasTarget) hash ^= Target.GetHashCode();
      if (HasMoveSpeed) hash ^= MoveSpeed.GetHashCode();
      if (HasSourceAttachment) hash ^= SourceAttachment.GetHashCode();
      if (HasParticleSystemHandle) hash ^= ParticleSystemHandle.GetHashCode();
      if (HasDodgeable) hash ^= Dodgeable.GetHashCode();
      if (HasIsAttack) hash ^= IsAttack.GetHashCode();
      if (HasExpireTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpireTime);
      if (HasMaximpacttime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Maximpacttime);
      if (HasColorgemcolor) hash ^= Colorgemcolor.GetHashCode();
      if (HasLaunchTick) hash ^= LaunchTick.GetHashCode();
      if (HasHandle) hash ^= Handle.GetHashCode();
      if (targetLoc_ != null) hash ^= TargetLoc.GetHashCode();
      hash ^= particleCpData_.GetHashCode();
      if (HasAdditionalParticleSystemHandle) hash ^= AdditionalParticleSystemHandle.GetHashCode();
      if (HasOriginalMoveSpeed) hash ^= OriginalMoveSpeed.GetHashCode();
      if (HasAbility) hash ^= Ability.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSource) {
        output.WriteRawTag(8);
        output.WriteUInt32(Source);
      }
      if (HasTarget) {
        output.WriteRawTag(16);
        output.WriteUInt32(Target);
      }
      if (HasMoveSpeed) {
        output.WriteRawTag(24);
        output.WriteInt32(MoveSpeed);
      }
      if (HasSourceAttachment) {
        output.WriteRawTag(32);
        output.WriteInt32(SourceAttachment);
      }
      if (HasParticleSystemHandle) {
        output.WriteRawTag(40);
        output.WriteInt64(ParticleSystemHandle);
      }
      if (HasDodgeable) {
        output.WriteRawTag(48);
        output.WriteBool(Dodgeable);
      }
      if (HasIsAttack) {
        output.WriteRawTag(56);
        output.WriteBool(IsAttack);
      }
      if (HasExpireTime) {
        output.WriteRawTag(77);
        output.WriteFloat(ExpireTime);
      }
      if (HasMaximpacttime) {
        output.WriteRawTag(85);
        output.WriteFloat(Maximpacttime);
      }
      if (HasColorgemcolor) {
        output.WriteRawTag(93);
        output.WriteFixed32(Colorgemcolor);
      }
      if (HasLaunchTick) {
        output.WriteRawTag(96);
        output.WriteInt32(LaunchTick);
      }
      if (HasHandle) {
        output.WriteRawTag(104);
        output.WriteInt32(Handle);
      }
      if (targetLoc_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TargetLoc);
      }
      particleCpData_.WriteTo(output, _repeated_particleCpData_codec);
      if (HasAdditionalParticleSystemHandle) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(AdditionalParticleSystemHandle);
      }
      if (HasOriginalMoveSpeed) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(OriginalMoveSpeed);
      }
      if (HasAbility) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Ability);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSource) {
        output.WriteRawTag(8);
        output.WriteUInt32(Source);
      }
      if (HasTarget) {
        output.WriteRawTag(16);
        output.WriteUInt32(Target);
      }
      if (HasMoveSpeed) {
        output.WriteRawTag(24);
        output.WriteInt32(MoveSpeed);
      }
      if (HasSourceAttachment) {
        output.WriteRawTag(32);
        output.WriteInt32(SourceAttachment);
      }
      if (HasParticleSystemHandle) {
        output.WriteRawTag(40);
        output.WriteInt64(ParticleSystemHandle);
      }
      if (HasDodgeable) {
        output.WriteRawTag(48);
        output.WriteBool(Dodgeable);
      }
      if (HasIsAttack) {
        output.WriteRawTag(56);
        output.WriteBool(IsAttack);
      }
      if (HasExpireTime) {
        output.WriteRawTag(77);
        output.WriteFloat(ExpireTime);
      }
      if (HasMaximpacttime) {
        output.WriteRawTag(85);
        output.WriteFloat(Maximpacttime);
      }
      if (HasColorgemcolor) {
        output.WriteRawTag(93);
        output.WriteFixed32(Colorgemcolor);
      }
      if (HasLaunchTick) {
        output.WriteRawTag(96);
        output.WriteInt32(LaunchTick);
      }
      if (HasHandle) {
        output.WriteRawTag(104);
        output.WriteInt32(Handle);
      }
      if (targetLoc_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TargetLoc);
      }
      particleCpData_.WriteTo(ref output, _repeated_particleCpData_codec);
      if (HasAdditionalParticleSystemHandle) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(AdditionalParticleSystemHandle);
      }
      if (HasOriginalMoveSpeed) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(OriginalMoveSpeed);
      }
      if (HasAbility) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Ability);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSource) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Source);
      }
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Target);
      }
      if (HasMoveSpeed) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (HasSourceAttachment) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceAttachment);
      }
      if (HasParticleSystemHandle) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParticleSystemHandle);
      }
      if (HasDodgeable) {
        size += 1 + 1;
      }
      if (HasIsAttack) {
        size += 1 + 1;
      }
      if (HasExpireTime) {
        size += 1 + 4;
      }
      if (HasMaximpacttime) {
        size += 1 + 4;
      }
      if (HasColorgemcolor) {
        size += 1 + 4;
      }
      if (HasLaunchTick) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaunchTick);
      }
      if (HasHandle) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
      }
      if (targetLoc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetLoc);
      }
      size += particleCpData_.CalculateSize(_repeated_particleCpData_codec);
      if (HasAdditionalParticleSystemHandle) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AdditionalParticleSystemHandle);
      }
      if (HasOriginalMoveSpeed) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OriginalMoveSpeed);
      }
      if (HasAbility) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ability);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_Projectile other) {
      if (other == null) {
        return;
      }
      if (other.HasSource) {
        Source = other.Source;
      }
      if (other.HasTarget) {
        Target = other.Target;
      }
      if (other.HasMoveSpeed) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.HasSourceAttachment) {
        SourceAttachment = other.SourceAttachment;
      }
      if (other.HasParticleSystemHandle) {
        ParticleSystemHandle = other.ParticleSystemHandle;
      }
      if (other.HasDodgeable) {
        Dodgeable = other.Dodgeable;
      }
      if (other.HasIsAttack) {
        IsAttack = other.IsAttack;
      }
      if (other.HasExpireTime) {
        ExpireTime = other.ExpireTime;
      }
      if (other.HasMaximpacttime) {
        Maximpacttime = other.Maximpacttime;
      }
      if (other.HasColorgemcolor) {
        Colorgemcolor = other.Colorgemcolor;
      }
      if (other.HasLaunchTick) {
        LaunchTick = other.LaunchTick;
      }
      if (other.HasHandle) {
        Handle = other.Handle;
      }
      if (other.targetLoc_ != null) {
        if (targetLoc_ == null) {
          TargetLoc = new global::Steam.Protos.Dota2.CMsgVector();
        }
        TargetLoc.MergeFrom(other.TargetLoc);
      }
      particleCpData_.Add(other.particleCpData_);
      if (other.HasAdditionalParticleSystemHandle) {
        AdditionalParticleSystemHandle = other.AdditionalParticleSystemHandle;
      }
      if (other.HasOriginalMoveSpeed) {
        OriginalMoveSpeed = other.OriginalMoveSpeed;
      }
      if (other.HasAbility) {
        Ability = other.Ability;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Source = input.ReadUInt32();
            break;
          }
          case 16: {
            Target = input.ReadUInt32();
            break;
          }
          case 24: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 32: {
            SourceAttachment = input.ReadInt32();
            break;
          }
          case 40: {
            ParticleSystemHandle = input.ReadInt64();
            break;
          }
          case 48: {
            Dodgeable = input.ReadBool();
            break;
          }
          case 56: {
            IsAttack = input.ReadBool();
            break;
          }
          case 77: {
            ExpireTime = input.ReadFloat();
            break;
          }
          case 85: {
            Maximpacttime = input.ReadFloat();
            break;
          }
          case 93: {
            Colorgemcolor = input.ReadFixed32();
            break;
          }
          case 96: {
            LaunchTick = input.ReadInt32();
            break;
          }
          case 104: {
            Handle = input.ReadInt32();
            break;
          }
          case 114: {
            if (targetLoc_ == null) {
              TargetLoc = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(TargetLoc);
            break;
          }
          case 122: {
            particleCpData_.AddEntriesFrom(input, _repeated_particleCpData_codec);
            break;
          }
          case 128: {
            AdditionalParticleSystemHandle = input.ReadInt64();
            break;
          }
          case 136: {
            OriginalMoveSpeed = input.ReadInt32();
            break;
          }
          case 144: {
            Ability = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Source = input.ReadUInt32();
            break;
          }
          case 16: {
            Target = input.ReadUInt32();
            break;
          }
          case 24: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 32: {
            SourceAttachment = input.ReadInt32();
            break;
          }
          case 40: {
            ParticleSystemHandle = input.ReadInt64();
            break;
          }
          case 48: {
            Dodgeable = input.ReadBool();
            break;
          }
          case 56: {
            IsAttack = input.ReadBool();
            break;
          }
          case 77: {
            ExpireTime = input.ReadFloat();
            break;
          }
          case 85: {
            Maximpacttime = input.ReadFloat();
            break;
          }
          case 93: {
            Colorgemcolor = input.ReadFixed32();
            break;
          }
          case 96: {
            LaunchTick = input.ReadInt32();
            break;
          }
          case 104: {
            Handle = input.ReadInt32();
            break;
          }
          case 114: {
            if (targetLoc_ == null) {
              TargetLoc = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(TargetLoc);
            break;
          }
          case 122: {
            particleCpData_.AddEntriesFrom(ref input, _repeated_particleCpData_codec);
            break;
          }
          case 128: {
            AdditionalParticleSystemHandle = input.ReadInt64();
            break;
          }
          case 136: {
            OriginalMoveSpeed = input.ReadInt32();
            break;
          }
          case 144: {
            Ability = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TE_ProjectileLoc : pb::IMessage<CDOTAUserMsg_TE_ProjectileLoc>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_ProjectileLoc> _parser = new pb::MessageParser<CDOTAUserMsg_TE_ProjectileLoc>(() => new CDOTAUserMsg_TE_ProjectileLoc());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_ProjectileLoc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_ProjectileLoc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_ProjectileLoc(CDOTAUserMsg_TE_ProjectileLoc other) : this() {
      _hasBits0 = other._hasBits0;
      sourceLoc_ = other.sourceLoc_ != null ? other.sourceLoc_.Clone() : null;
      target_ = other.target_;
      moveSpeed_ = other.moveSpeed_;
      particleSystemHandle_ = other.particleSystemHandle_;
      dodgeable_ = other.dodgeable_;
      isAttack_ = other.isAttack_;
      expireTime_ = other.expireTime_;
      targetLoc_ = other.targetLoc_ != null ? other.targetLoc_.Clone() : null;
      colorgemcolor_ = other.colorgemcolor_;
      launchTick_ = other.launchTick_;
      handle_ = other.handle_;
      source_ = other.source_;
      sourceAttachment_ = other.sourceAttachment_;
      particleCpData_ = other.particleCpData_.Clone();
      additionalParticleSystemHandle_ = other.additionalParticleSystemHandle_;
      originalMoveSpeed_ = other.originalMoveSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_ProjectileLoc Clone() {
      return new CDOTAUserMsg_TE_ProjectileLoc(this);
    }

    /// <summary>Field number for the "source_loc" field.</summary>
    public const int SourceLocFieldNumber = 1;
    private global::Steam.Protos.Dota2.CMsgVector sourceLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector SourceLoc {
      get { return sourceLoc_; }
      set {
        sourceLoc_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private readonly static uint TargetDefaultValue = 16777215;

    private uint target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Target {
      get { if ((_hasBits0 & 1) != 0) { return target_; } else { return TargetDefaultValue; } }
      set {
        _hasBits0 |= 1;
        target_ = value;
      }
    }
    /// <summary>Gets whether the "target" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "target" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "move_speed" field.</summary>
    public const int MoveSpeedFieldNumber = 3;
    private readonly static int MoveSpeedDefaultValue = 0;

    private int moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { if ((_hasBits0 & 2) != 0) { return moveSpeed_; } else { return MoveSpeedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        moveSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "move_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoveSpeed {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "move_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoveSpeed() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "particle_system_handle" field.</summary>
    public const int ParticleSystemHandleFieldNumber = 4;
    private readonly static long ParticleSystemHandleDefaultValue = 0L;

    private long particleSystemHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParticleSystemHandle {
      get { if ((_hasBits0 & 4) != 0) { return particleSystemHandle_; } else { return ParticleSystemHandleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        particleSystemHandle_ = value;
      }
    }
    /// <summary>Gets whether the "particle_system_handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParticleSystemHandle {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "particle_system_handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParticleSystemHandle() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "dodgeable" field.</summary>
    public const int DodgeableFieldNumber = 5;
    private readonly static bool DodgeableDefaultValue = false;

    private bool dodgeable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dodgeable {
      get { if ((_hasBits0 & 8) != 0) { return dodgeable_; } else { return DodgeableDefaultValue; } }
      set {
        _hasBits0 |= 8;
        dodgeable_ = value;
      }
    }
    /// <summary>Gets whether the "dodgeable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDodgeable {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "dodgeable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDodgeable() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "is_attack" field.</summary>
    public const int IsAttackFieldNumber = 6;
    private readonly static bool IsAttackDefaultValue = false;

    private bool isAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttack {
      get { if ((_hasBits0 & 16) != 0) { return isAttack_; } else { return IsAttackDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isAttack_ = value;
      }
    }
    /// <summary>Gets whether the "is_attack" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAttack {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_attack" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAttack() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 9;
    private readonly static float ExpireTimeDefaultValue = 0F;

    private float expireTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExpireTime {
      get { if ((_hasBits0 & 32) != 0) { return expireTime_; } else { return ExpireTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        expireTime_ = value;
      }
    }
    /// <summary>Gets whether the "expire_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpireTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "expire_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpireTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "target_loc" field.</summary>
    public const int TargetLocFieldNumber = 10;
    private global::Steam.Protos.Dota2.CMsgVector targetLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector TargetLoc {
      get { return targetLoc_; }
      set {
        targetLoc_ = value;
      }
    }

    /// <summary>Field number for the "colorgemcolor" field.</summary>
    public const int ColorgemcolorFieldNumber = 11;
    private readonly static uint ColorgemcolorDefaultValue = 0;

    private uint colorgemcolor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Colorgemcolor {
      get { if ((_hasBits0 & 64) != 0) { return colorgemcolor_; } else { return ColorgemcolorDefaultValue; } }
      set {
        _hasBits0 |= 64;
        colorgemcolor_ = value;
      }
    }
    /// <summary>Gets whether the "colorgemcolor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColorgemcolor {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "colorgemcolor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColorgemcolor() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "launch_tick" field.</summary>
    public const int LaunchTickFieldNumber = 12;
    private readonly static int LaunchTickDefaultValue = 0;

    private int launchTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaunchTick {
      get { if ((_hasBits0 & 128) != 0) { return launchTick_; } else { return LaunchTickDefaultValue; } }
      set {
        _hasBits0 |= 128;
        launchTick_ = value;
      }
    }
    /// <summary>Gets whether the "launch_tick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaunchTick {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "launch_tick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaunchTick() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 13;
    private readonly static int HandleDefaultValue = 0;

    private int handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handle {
      get { if ((_hasBits0 & 256) != 0) { return handle_; } else { return HandleDefaultValue; } }
      set {
        _hasBits0 |= 256;
        handle_ = value;
      }
    }
    /// <summary>Gets whether the "handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHandle {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHandle() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 14;
    private readonly static uint SourceDefaultValue = 16777215;

    private uint source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Source {
      get { if ((_hasBits0 & 512) != 0) { return source_; } else { return SourceDefaultValue; } }
      set {
        _hasBits0 |= 512;
        source_ = value;
      }
    }
    /// <summary>Gets whether the "source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSource {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSource() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "source_attachment" field.</summary>
    public const int SourceAttachmentFieldNumber = 15;
    private readonly static int SourceAttachmentDefaultValue = 0;

    private int sourceAttachment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceAttachment {
      get { if ((_hasBits0 & 1024) != 0) { return sourceAttachment_; } else { return SourceAttachmentDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        sourceAttachment_ = value;
      }
    }
    /// <summary>Gets whether the "source_attachment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceAttachment {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "source_attachment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceAttachment() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "particle_cp_data" field.</summary>
    public const int ParticleCpDataFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData> _repeated_particleCpData_codec
        = pb::FieldCodec.ForMessage(130, global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData> particleCpData_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_ProjectileParticleCPData> ParticleCpData {
      get { return particleCpData_; }
    }

    /// <summary>Field number for the "additional_particle_system_handle" field.</summary>
    public const int AdditionalParticleSystemHandleFieldNumber = 17;
    private readonly static long AdditionalParticleSystemHandleDefaultValue = 0L;

    private long additionalParticleSystemHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AdditionalParticleSystemHandle {
      get { if ((_hasBits0 & 2048) != 0) { return additionalParticleSystemHandle_; } else { return AdditionalParticleSystemHandleDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        additionalParticleSystemHandle_ = value;
      }
    }
    /// <summary>Gets whether the "additional_particle_system_handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdditionalParticleSystemHandle {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "additional_particle_system_handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdditionalParticleSystemHandle() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "original_move_speed" field.</summary>
    public const int OriginalMoveSpeedFieldNumber = 18;
    private readonly static int OriginalMoveSpeedDefaultValue = 0;

    private int originalMoveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginalMoveSpeed {
      get { if ((_hasBits0 & 4096) != 0) { return originalMoveSpeed_; } else { return OriginalMoveSpeedDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        originalMoveSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "original_move_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalMoveSpeed {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "original_move_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalMoveSpeed() {
      _hasBits0 &= ~4096;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_ProjectileLoc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_ProjectileLoc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SourceLoc, other.SourceLoc)) return false;
      if (Target != other.Target) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (ParticleSystemHandle != other.ParticleSystemHandle) return false;
      if (Dodgeable != other.Dodgeable) return false;
      if (IsAttack != other.IsAttack) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpireTime, other.ExpireTime)) return false;
      if (!object.Equals(TargetLoc, other.TargetLoc)) return false;
      if (Colorgemcolor != other.Colorgemcolor) return false;
      if (LaunchTick != other.LaunchTick) return false;
      if (Handle != other.Handle) return false;
      if (Source != other.Source) return false;
      if (SourceAttachment != other.SourceAttachment) return false;
      if(!particleCpData_.Equals(other.particleCpData_)) return false;
      if (AdditionalParticleSystemHandle != other.AdditionalParticleSystemHandle) return false;
      if (OriginalMoveSpeed != other.OriginalMoveSpeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourceLoc_ != null) hash ^= SourceLoc.GetHashCode();
      if (HasTarget) hash ^= Target.GetHashCode();
      if (HasMoveSpeed) hash ^= MoveSpeed.GetHashCode();
      if (HasParticleSystemHandle) hash ^= ParticleSystemHandle.GetHashCode();
      if (HasDodgeable) hash ^= Dodgeable.GetHashCode();
      if (HasIsAttack) hash ^= IsAttack.GetHashCode();
      if (HasExpireTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpireTime);
      if (targetLoc_ != null) hash ^= TargetLoc.GetHashCode();
      if (HasColorgemcolor) hash ^= Colorgemcolor.GetHashCode();
      if (HasLaunchTick) hash ^= LaunchTick.GetHashCode();
      if (HasHandle) hash ^= Handle.GetHashCode();
      if (HasSource) hash ^= Source.GetHashCode();
      if (HasSourceAttachment) hash ^= SourceAttachment.GetHashCode();
      hash ^= particleCpData_.GetHashCode();
      if (HasAdditionalParticleSystemHandle) hash ^= AdditionalParticleSystemHandle.GetHashCode();
      if (HasOriginalMoveSpeed) hash ^= OriginalMoveSpeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (sourceLoc_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourceLoc);
      }
      if (HasTarget) {
        output.WriteRawTag(16);
        output.WriteUInt32(Target);
      }
      if (HasMoveSpeed) {
        output.WriteRawTag(24);
        output.WriteInt32(MoveSpeed);
      }
      if (HasParticleSystemHandle) {
        output.WriteRawTag(32);
        output.WriteInt64(ParticleSystemHandle);
      }
      if (HasDodgeable) {
        output.WriteRawTag(40);
        output.WriteBool(Dodgeable);
      }
      if (HasIsAttack) {
        output.WriteRawTag(48);
        output.WriteBool(IsAttack);
      }
      if (HasExpireTime) {
        output.WriteRawTag(77);
        output.WriteFloat(ExpireTime);
      }
      if (targetLoc_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TargetLoc);
      }
      if (HasColorgemcolor) {
        output.WriteRawTag(93);
        output.WriteFixed32(Colorgemcolor);
      }
      if (HasLaunchTick) {
        output.WriteRawTag(96);
        output.WriteInt32(LaunchTick);
      }
      if (HasHandle) {
        output.WriteRawTag(104);
        output.WriteInt32(Handle);
      }
      if (HasSource) {
        output.WriteRawTag(112);
        output.WriteUInt32(Source);
      }
      if (HasSourceAttachment) {
        output.WriteRawTag(120);
        output.WriteInt32(SourceAttachment);
      }
      particleCpData_.WriteTo(output, _repeated_particleCpData_codec);
      if (HasAdditionalParticleSystemHandle) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(AdditionalParticleSystemHandle);
      }
      if (HasOriginalMoveSpeed) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(OriginalMoveSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (sourceLoc_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourceLoc);
      }
      if (HasTarget) {
        output.WriteRawTag(16);
        output.WriteUInt32(Target);
      }
      if (HasMoveSpeed) {
        output.WriteRawTag(24);
        output.WriteInt32(MoveSpeed);
      }
      if (HasParticleSystemHandle) {
        output.WriteRawTag(32);
        output.WriteInt64(ParticleSystemHandle);
      }
      if (HasDodgeable) {
        output.WriteRawTag(40);
        output.WriteBool(Dodgeable);
      }
      if (HasIsAttack) {
        output.WriteRawTag(48);
        output.WriteBool(IsAttack);
      }
      if (HasExpireTime) {
        output.WriteRawTag(77);
        output.WriteFloat(ExpireTime);
      }
      if (targetLoc_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TargetLoc);
      }
      if (HasColorgemcolor) {
        output.WriteRawTag(93);
        output.WriteFixed32(Colorgemcolor);
      }
      if (HasLaunchTick) {
        output.WriteRawTag(96);
        output.WriteInt32(LaunchTick);
      }
      if (HasHandle) {
        output.WriteRawTag(104);
        output.WriteInt32(Handle);
      }
      if (HasSource) {
        output.WriteRawTag(112);
        output.WriteUInt32(Source);
      }
      if (HasSourceAttachment) {
        output.WriteRawTag(120);
        output.WriteInt32(SourceAttachment);
      }
      particleCpData_.WriteTo(ref output, _repeated_particleCpData_codec);
      if (HasAdditionalParticleSystemHandle) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(AdditionalParticleSystemHandle);
      }
      if (HasOriginalMoveSpeed) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(OriginalMoveSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourceLoc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceLoc);
      }
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Target);
      }
      if (HasMoveSpeed) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (HasParticleSystemHandle) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParticleSystemHandle);
      }
      if (HasDodgeable) {
        size += 1 + 1;
      }
      if (HasIsAttack) {
        size += 1 + 1;
      }
      if (HasExpireTime) {
        size += 1 + 4;
      }
      if (targetLoc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetLoc);
      }
      if (HasColorgemcolor) {
        size += 1 + 4;
      }
      if (HasLaunchTick) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaunchTick);
      }
      if (HasHandle) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
      }
      if (HasSource) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Source);
      }
      if (HasSourceAttachment) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceAttachment);
      }
      size += particleCpData_.CalculateSize(_repeated_particleCpData_codec);
      if (HasAdditionalParticleSystemHandle) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AdditionalParticleSystemHandle);
      }
      if (HasOriginalMoveSpeed) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OriginalMoveSpeed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_ProjectileLoc other) {
      if (other == null) {
        return;
      }
      if (other.sourceLoc_ != null) {
        if (sourceLoc_ == null) {
          SourceLoc = new global::Steam.Protos.Dota2.CMsgVector();
        }
        SourceLoc.MergeFrom(other.SourceLoc);
      }
      if (other.HasTarget) {
        Target = other.Target;
      }
      if (other.HasMoveSpeed) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.HasParticleSystemHandle) {
        ParticleSystemHandle = other.ParticleSystemHandle;
      }
      if (other.HasDodgeable) {
        Dodgeable = other.Dodgeable;
      }
      if (other.HasIsAttack) {
        IsAttack = other.IsAttack;
      }
      if (other.HasExpireTime) {
        ExpireTime = other.ExpireTime;
      }
      if (other.targetLoc_ != null) {
        if (targetLoc_ == null) {
          TargetLoc = new global::Steam.Protos.Dota2.CMsgVector();
        }
        TargetLoc.MergeFrom(other.TargetLoc);
      }
      if (other.HasColorgemcolor) {
        Colorgemcolor = other.Colorgemcolor;
      }
      if (other.HasLaunchTick) {
        LaunchTick = other.LaunchTick;
      }
      if (other.HasHandle) {
        Handle = other.Handle;
      }
      if (other.HasSource) {
        Source = other.Source;
      }
      if (other.HasSourceAttachment) {
        SourceAttachment = other.SourceAttachment;
      }
      particleCpData_.Add(other.particleCpData_);
      if (other.HasAdditionalParticleSystemHandle) {
        AdditionalParticleSystemHandle = other.AdditionalParticleSystemHandle;
      }
      if (other.HasOriginalMoveSpeed) {
        OriginalMoveSpeed = other.OriginalMoveSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sourceLoc_ == null) {
              SourceLoc = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(SourceLoc);
            break;
          }
          case 16: {
            Target = input.ReadUInt32();
            break;
          }
          case 24: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 32: {
            ParticleSystemHandle = input.ReadInt64();
            break;
          }
          case 40: {
            Dodgeable = input.ReadBool();
            break;
          }
          case 48: {
            IsAttack = input.ReadBool();
            break;
          }
          case 77: {
            ExpireTime = input.ReadFloat();
            break;
          }
          case 82: {
            if (targetLoc_ == null) {
              TargetLoc = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(TargetLoc);
            break;
          }
          case 93: {
            Colorgemcolor = input.ReadFixed32();
            break;
          }
          case 96: {
            LaunchTick = input.ReadInt32();
            break;
          }
          case 104: {
            Handle = input.ReadInt32();
            break;
          }
          case 112: {
            Source = input.ReadUInt32();
            break;
          }
          case 120: {
            SourceAttachment = input.ReadInt32();
            break;
          }
          case 130: {
            particleCpData_.AddEntriesFrom(input, _repeated_particleCpData_codec);
            break;
          }
          case 136: {
            AdditionalParticleSystemHandle = input.ReadInt64();
            break;
          }
          case 144: {
            OriginalMoveSpeed = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (sourceLoc_ == null) {
              SourceLoc = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(SourceLoc);
            break;
          }
          case 16: {
            Target = input.ReadUInt32();
            break;
          }
          case 24: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 32: {
            ParticleSystemHandle = input.ReadInt64();
            break;
          }
          case 40: {
            Dodgeable = input.ReadBool();
            break;
          }
          case 48: {
            IsAttack = input.ReadBool();
            break;
          }
          case 77: {
            ExpireTime = input.ReadFloat();
            break;
          }
          case 82: {
            if (targetLoc_ == null) {
              TargetLoc = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(TargetLoc);
            break;
          }
          case 93: {
            Colorgemcolor = input.ReadFixed32();
            break;
          }
          case 96: {
            LaunchTick = input.ReadInt32();
            break;
          }
          case 104: {
            Handle = input.ReadInt32();
            break;
          }
          case 112: {
            Source = input.ReadUInt32();
            break;
          }
          case 120: {
            SourceAttachment = input.ReadInt32();
            break;
          }
          case 130: {
            particleCpData_.AddEntriesFrom(ref input, _repeated_particleCpData_codec);
            break;
          }
          case 136: {
            AdditionalParticleSystemHandle = input.ReadInt64();
            break;
          }
          case 144: {
            OriginalMoveSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TE_DestroyProjectile : pb::IMessage<CDOTAUserMsg_TE_DestroyProjectile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_DestroyProjectile> _parser = new pb::MessageParser<CDOTAUserMsg_TE_DestroyProjectile>(() => new CDOTAUserMsg_TE_DestroyProjectile());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_DestroyProjectile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DestroyProjectile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DestroyProjectile(CDOTAUserMsg_TE_DestroyProjectile other) : this() {
      _hasBits0 = other._hasBits0;
      handle_ = other.handle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DestroyProjectile Clone() {
      return new CDOTAUserMsg_TE_DestroyProjectile(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private readonly static int HandleDefaultValue = 0;

    private int handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handle {
      get { if ((_hasBits0 & 1) != 0) { return handle_; } else { return HandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        handle_ = value;
      }
    }
    /// <summary>Gets whether the "handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHandle() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_DestroyProjectile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_DestroyProjectile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHandle) hash ^= Handle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHandle) {
        output.WriteRawTag(8);
        output.WriteInt32(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHandle) {
        output.WriteRawTag(8);
        output.WriteInt32(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHandle) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_DestroyProjectile other) {
      if (other == null) {
        return;
      }
      if (other.HasHandle) {
        Handle = other.Handle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Handle = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Handle = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TE_DotaBloodImpact : pb::IMessage<CDOTAUserMsg_TE_DotaBloodImpact>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_DotaBloodImpact> _parser = new pb::MessageParser<CDOTAUserMsg_TE_DotaBloodImpact>(() => new CDOTAUserMsg_TE_DotaBloodImpact());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_DotaBloodImpact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DotaBloodImpact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DotaBloodImpact(CDOTAUserMsg_TE_DotaBloodImpact other) : this() {
      _hasBits0 = other._hasBits0;
      entity_ = other.entity_;
      scale_ = other.scale_;
      xnormal_ = other.xnormal_;
      ynormal_ = other.ynormal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_DotaBloodImpact Clone() {
      return new CDOTAUserMsg_TE_DotaBloodImpact(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private readonly static uint EntityDefaultValue = 16777215;

    private uint entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Entity {
      get { if ((_hasBits0 & 1) != 0) { return entity_; } else { return EntityDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entity_ = value;
      }
    }
    /// <summary>Gets whether the "entity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntity {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntity() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private readonly static float ScaleDefaultValue = 0F;

    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { if ((_hasBits0 & 2) != 0) { return scale_; } else { return ScaleDefaultValue; } }
      set {
        _hasBits0 |= 2;
        scale_ = value;
      }
    }
    /// <summary>Gets whether the "scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScale {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScale() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "xnormal" field.</summary>
    public const int XnormalFieldNumber = 3;
    private readonly static float XnormalDefaultValue = 0F;

    private float xnormal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Xnormal {
      get { if ((_hasBits0 & 4) != 0) { return xnormal_; } else { return XnormalDefaultValue; } }
      set {
        _hasBits0 |= 4;
        xnormal_ = value;
      }
    }
    /// <summary>Gets whether the "xnormal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasXnormal {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "xnormal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearXnormal() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ynormal" field.</summary>
    public const int YnormalFieldNumber = 4;
    private readonly static float YnormalDefaultValue = 0F;

    private float ynormal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ynormal {
      get { if ((_hasBits0 & 8) != 0) { return ynormal_; } else { return YnormalDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ynormal_ = value;
      }
    }
    /// <summary>Gets whether the "ynormal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYnormal {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ynormal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYnormal() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_DotaBloodImpact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_DotaBloodImpact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xnormal, other.Xnormal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ynormal, other.Ynormal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntity) hash ^= Entity.GetHashCode();
      if (HasScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (HasXnormal) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xnormal);
      if (HasYnormal) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ynormal);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEntity) {
        output.WriteRawTag(8);
        output.WriteUInt32(Entity);
      }
      if (HasScale) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (HasXnormal) {
        output.WriteRawTag(29);
        output.WriteFloat(Xnormal);
      }
      if (HasYnormal) {
        output.WriteRawTag(37);
        output.WriteFloat(Ynormal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEntity) {
        output.WriteRawTag(8);
        output.WriteUInt32(Entity);
      }
      if (HasScale) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (HasXnormal) {
        output.WriteRawTag(29);
        output.WriteFloat(Xnormal);
      }
      if (HasYnormal) {
        output.WriteRawTag(37);
        output.WriteFloat(Ynormal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntity) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Entity);
      }
      if (HasScale) {
        size += 1 + 4;
      }
      if (HasXnormal) {
        size += 1 + 4;
      }
      if (HasYnormal) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_DotaBloodImpact other) {
      if (other == null) {
        return;
      }
      if (other.HasEntity) {
        Entity = other.Entity;
      }
      if (other.HasScale) {
        Scale = other.Scale;
      }
      if (other.HasXnormal) {
        Xnormal = other.Xnormal;
      }
      if (other.HasYnormal) {
        Ynormal = other.Ynormal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entity = input.ReadUInt32();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 29: {
            Xnormal = input.ReadFloat();
            break;
          }
          case 37: {
            Ynormal = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entity = input.ReadUInt32();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 29: {
            Xnormal = input.ReadFloat();
            break;
          }
          case 37: {
            Ynormal = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_AbilityPing : pb::IMessage<CDOTAUserMsg_AbilityPing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_AbilityPing> _parser = new pb::MessageParser<CDOTAUserMsg_AbilityPing>(() => new CDOTAUserMsg_AbilityPing());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_AbilityPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilityPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilityPing(CDOTAUserMsg_AbilityPing other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      abilityId_ = other.abilityId_;
      type_ = other.type_;
      cooldownSeconds_ = other.cooldownSeconds_;
      level_ = other.level_;
      passive_ = other.passive_;
      manaNeeded_ = other.manaNeeded_;
      entityId_ = other.entityId_;
      primaryCharges_ = other.primaryCharges_;
      secondaryCharges_ = other.secondaryCharges_;
      ctrlHeld_ = other.ctrlHeld_;
      reclaimTime_ = other.reclaimTime_;
      ownerEntity_ = other.ownerEntity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilityPing Clone() {
      return new CDOTAUserMsg_AbilityPing(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 2;
    private readonly static int AbilityIdDefaultValue = -1;

    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { if ((_hasBits0 & 2) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        abilityId_ = value;
      }
    }
    /// <summary>Gets whether the "ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private readonly static global::Steam.Protos.Dota2.DOTA_ABILITY_PING_TYPE TypeDefaultValue = global::Steam.Protos.Dota2.DOTA_ABILITY_PING_TYPE.AbilityPingReady;

    private global::Steam.Protos.Dota2.DOTA_ABILITY_PING_TYPE type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.DOTA_ABILITY_PING_TYPE Type {
      get { if ((_hasBits0 & 4) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cooldown_seconds" field.</summary>
    public const int CooldownSecondsFieldNumber = 4;
    private readonly static uint CooldownSecondsDefaultValue = 0;

    private uint cooldownSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CooldownSeconds {
      get { if ((_hasBits0 & 8) != 0) { return cooldownSeconds_; } else { return CooldownSecondsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cooldownSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "cooldown_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCooldownSeconds {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cooldown_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCooldownSeconds() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private readonly static uint LevelDefaultValue = 0;

    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { if ((_hasBits0 & 16) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 16;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLevel {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLevel() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "passive" field.</summary>
    public const int PassiveFieldNumber = 6;
    private readonly static bool PassiveDefaultValue = false;

    private bool passive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Passive {
      get { if ((_hasBits0 & 32) != 0) { return passive_; } else { return PassiveDefaultValue; } }
      set {
        _hasBits0 |= 32;
        passive_ = value;
      }
    }
    /// <summary>Gets whether the "passive" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPassive {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "passive" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPassive() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "mana_needed" field.</summary>
    public const int ManaNeededFieldNumber = 7;
    private readonly static uint ManaNeededDefaultValue = 0;

    private uint manaNeeded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManaNeeded {
      get { if ((_hasBits0 & 64) != 0) { return manaNeeded_; } else { return ManaNeededDefaultValue; } }
      set {
        _hasBits0 |= 64;
        manaNeeded_ = value;
      }
    }
    /// <summary>Gets whether the "mana_needed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasManaNeeded {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "mana_needed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearManaNeeded() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 8;
    private readonly static uint EntityIdDefaultValue = 0;

    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 128) != 0) { return entityId_; } else { return EntityIdDefaultValue; } }
      set {
        _hasBits0 |= 128;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "primary_charges" field.</summary>
    public const int PrimaryChargesFieldNumber = 9;
    private readonly static int PrimaryChargesDefaultValue = 0;

    private int primaryCharges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrimaryCharges {
      get { if ((_hasBits0 & 256) != 0) { return primaryCharges_; } else { return PrimaryChargesDefaultValue; } }
      set {
        _hasBits0 |= 256;
        primaryCharges_ = value;
      }
    }
    /// <summary>Gets whether the "primary_charges" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrimaryCharges {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "primary_charges" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrimaryCharges() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "secondary_charges" field.</summary>
    public const int SecondaryChargesFieldNumber = 10;
    private readonly static int SecondaryChargesDefaultValue = 0;

    private int secondaryCharges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondaryCharges {
      get { if ((_hasBits0 & 512) != 0) { return secondaryCharges_; } else { return SecondaryChargesDefaultValue; } }
      set {
        _hasBits0 |= 512;
        secondaryCharges_ = value;
      }
    }
    /// <summary>Gets whether the "secondary_charges" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecondaryCharges {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "secondary_charges" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecondaryCharges() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "ctrl_held" field.</summary>
    public const int CtrlHeldFieldNumber = 12;
    private readonly static bool CtrlHeldDefaultValue = false;

    private bool ctrlHeld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CtrlHeld {
      get { if ((_hasBits0 & 1024) != 0) { return ctrlHeld_; } else { return CtrlHeldDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        ctrlHeld_ = value;
      }
    }
    /// <summary>Gets whether the "ctrl_held" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCtrlHeld {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "ctrl_held" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCtrlHeld() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "reclaim_time" field.</summary>
    public const int ReclaimTimeFieldNumber = 13;
    private readonly static float ReclaimTimeDefaultValue = 0F;

    private float reclaimTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReclaimTime {
      get { if ((_hasBits0 & 2048) != 0) { return reclaimTime_; } else { return ReclaimTimeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        reclaimTime_ = value;
      }
    }
    /// <summary>Gets whether the "reclaim_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReclaimTime {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "reclaim_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReclaimTime() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "owner_entity" field.</summary>
    public const int OwnerEntityFieldNumber = 14;
    private readonly static int OwnerEntityDefaultValue = -1;

    private int ownerEntity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerEntity {
      get { if ((_hasBits0 & 4096) != 0) { return ownerEntity_; } else { return OwnerEntityDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        ownerEntity_ = value;
      }
    }
    /// <summary>Gets whether the "owner_entity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwnerEntity {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "owner_entity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwnerEntity() {
      _hasBits0 &= ~4096;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_AbilityPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_AbilityPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (AbilityId != other.AbilityId) return false;
      if (Type != other.Type) return false;
      if (CooldownSeconds != other.CooldownSeconds) return false;
      if (Level != other.Level) return false;
      if (Passive != other.Passive) return false;
      if (ManaNeeded != other.ManaNeeded) return false;
      if (EntityId != other.EntityId) return false;
      if (PrimaryCharges != other.PrimaryCharges) return false;
      if (SecondaryCharges != other.SecondaryCharges) return false;
      if (CtrlHeld != other.CtrlHeld) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReclaimTime, other.ReclaimTime)) return false;
      if (OwnerEntity != other.OwnerEntity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasAbilityId) hash ^= AbilityId.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasCooldownSeconds) hash ^= CooldownSeconds.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasPassive) hash ^= Passive.GetHashCode();
      if (HasManaNeeded) hash ^= ManaNeeded.GetHashCode();
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasPrimaryCharges) hash ^= PrimaryCharges.GetHashCode();
      if (HasSecondaryCharges) hash ^= SecondaryCharges.GetHashCode();
      if (HasCtrlHeld) hash ^= CtrlHeld.GetHashCode();
      if (HasReclaimTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReclaimTime);
      if (HasOwnerEntity) hash ^= OwnerEntity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasAbilityId) {
        output.WriteRawTag(16);
        output.WriteInt32(AbilityId);
      }
      if (HasType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (HasCooldownSeconds) {
        output.WriteRawTag(32);
        output.WriteUInt32(CooldownSeconds);
      }
      if (HasLevel) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (HasPassive) {
        output.WriteRawTag(48);
        output.WriteBool(Passive);
      }
      if (HasManaNeeded) {
        output.WriteRawTag(56);
        output.WriteUInt32(ManaNeeded);
      }
      if (HasEntityId) {
        output.WriteRawTag(64);
        output.WriteUInt32(EntityId);
      }
      if (HasPrimaryCharges) {
        output.WriteRawTag(72);
        output.WriteInt32(PrimaryCharges);
      }
      if (HasSecondaryCharges) {
        output.WriteRawTag(80);
        output.WriteInt32(SecondaryCharges);
      }
      if (HasCtrlHeld) {
        output.WriteRawTag(96);
        output.WriteBool(CtrlHeld);
      }
      if (HasReclaimTime) {
        output.WriteRawTag(109);
        output.WriteFloat(ReclaimTime);
      }
      if (HasOwnerEntity) {
        output.WriteRawTag(112);
        output.WriteInt32(OwnerEntity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasAbilityId) {
        output.WriteRawTag(16);
        output.WriteInt32(AbilityId);
      }
      if (HasType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (HasCooldownSeconds) {
        output.WriteRawTag(32);
        output.WriteUInt32(CooldownSeconds);
      }
      if (HasLevel) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (HasPassive) {
        output.WriteRawTag(48);
        output.WriteBool(Passive);
      }
      if (HasManaNeeded) {
        output.WriteRawTag(56);
        output.WriteUInt32(ManaNeeded);
      }
      if (HasEntityId) {
        output.WriteRawTag(64);
        output.WriteUInt32(EntityId);
      }
      if (HasPrimaryCharges) {
        output.WriteRawTag(72);
        output.WriteInt32(PrimaryCharges);
      }
      if (HasSecondaryCharges) {
        output.WriteRawTag(80);
        output.WriteInt32(SecondaryCharges);
      }
      if (HasCtrlHeld) {
        output.WriteRawTag(96);
        output.WriteBool(CtrlHeld);
      }
      if (HasReclaimTime) {
        output.WriteRawTag(109);
        output.WriteFloat(ReclaimTime);
      }
      if (HasOwnerEntity) {
        output.WriteRawTag(112);
        output.WriteInt32(OwnerEntity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasCooldownSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CooldownSeconds);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HasPassive) {
        size += 1 + 1;
      }
      if (HasManaNeeded) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManaNeeded);
      }
      if (HasEntityId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (HasPrimaryCharges) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrimaryCharges);
      }
      if (HasSecondaryCharges) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondaryCharges);
      }
      if (HasCtrlHeld) {
        size += 1 + 1;
      }
      if (HasReclaimTime) {
        size += 1 + 4;
      }
      if (HasOwnerEntity) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerEntity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_AbilityPing other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasAbilityId) {
        AbilityId = other.AbilityId;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasCooldownSeconds) {
        CooldownSeconds = other.CooldownSeconds;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasPassive) {
        Passive = other.Passive;
      }
      if (other.HasManaNeeded) {
        ManaNeeded = other.ManaNeeded;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasPrimaryCharges) {
        PrimaryCharges = other.PrimaryCharges;
      }
      if (other.HasSecondaryCharges) {
        SecondaryCharges = other.SecondaryCharges;
      }
      if (other.HasCtrlHeld) {
        CtrlHeld = other.CtrlHeld;
      }
      if (other.HasReclaimTime) {
        ReclaimTime = other.ReclaimTime;
      }
      if (other.HasOwnerEntity) {
        OwnerEntity = other.OwnerEntity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 24: {
            Type = (global::Steam.Protos.Dota2.DOTA_ABILITY_PING_TYPE) input.ReadEnum();
            break;
          }
          case 32: {
            CooldownSeconds = input.ReadUInt32();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            Passive = input.ReadBool();
            break;
          }
          case 56: {
            ManaNeeded = input.ReadUInt32();
            break;
          }
          case 64: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 72: {
            PrimaryCharges = input.ReadInt32();
            break;
          }
          case 80: {
            SecondaryCharges = input.ReadInt32();
            break;
          }
          case 96: {
            CtrlHeld = input.ReadBool();
            break;
          }
          case 109: {
            ReclaimTime = input.ReadFloat();
            break;
          }
          case 112: {
            OwnerEntity = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 24: {
            Type = (global::Steam.Protos.Dota2.DOTA_ABILITY_PING_TYPE) input.ReadEnum();
            break;
          }
          case 32: {
            CooldownSeconds = input.ReadUInt32();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            Passive = input.ReadBool();
            break;
          }
          case 56: {
            ManaNeeded = input.ReadUInt32();
            break;
          }
          case 64: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 72: {
            PrimaryCharges = input.ReadInt32();
            break;
          }
          case 80: {
            SecondaryCharges = input.ReadInt32();
            break;
          }
          case 96: {
            CtrlHeld = input.ReadBool();
            break;
          }
          case 109: {
            ReclaimTime = input.ReadFloat();
            break;
          }
          case 112: {
            OwnerEntity = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TE_UnitAnimation : pb::IMessage<CDOTAUserMsg_TE_UnitAnimation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_UnitAnimation> _parser = new pb::MessageParser<CDOTAUserMsg_TE_UnitAnimation>(() => new CDOTAUserMsg_TE_UnitAnimation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_UnitAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimation(CDOTAUserMsg_TE_UnitAnimation other) : this() {
      _hasBits0 = other._hasBits0;
      entity_ = other.entity_;
      sequenceVariant_ = other.sequenceVariant_;
      playbackrate_ = other.playbackrate_;
      castpoint_ = other.castpoint_;
      type_ = other.type_;
      activity_ = other.activity_;
      lagCompensationTime_ = other.lagCompensationTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimation Clone() {
      return new CDOTAUserMsg_TE_UnitAnimation(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private readonly static uint EntityDefaultValue = 16777215;

    private uint entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Entity {
      get { if ((_hasBits0 & 1) != 0) { return entity_; } else { return EntityDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entity_ = value;
      }
    }
    /// <summary>Gets whether the "entity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntity {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntity() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sequence_variant" field.</summary>
    public const int SequenceVariantFieldNumber = 2;
    private readonly static int SequenceVariantDefaultValue = 0;

    private int sequenceVariant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceVariant {
      get { if ((_hasBits0 & 2) != 0) { return sequenceVariant_; } else { return SequenceVariantDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sequenceVariant_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_variant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceVariant {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sequence_variant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceVariant() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "playbackrate" field.</summary>
    public const int PlaybackrateFieldNumber = 3;
    private readonly static float PlaybackrateDefaultValue = 0F;

    private float playbackrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Playbackrate {
      get { if ((_hasBits0 & 4) != 0) { return playbackrate_; } else { return PlaybackrateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        playbackrate_ = value;
      }
    }
    /// <summary>Gets whether the "playbackrate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlaybackrate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "playbackrate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlaybackrate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "castpoint" field.</summary>
    public const int CastpointFieldNumber = 4;
    private readonly static float CastpointDefaultValue = 0F;

    private float castpoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Castpoint {
      get { if ((_hasBits0 & 8) != 0) { return castpoint_; } else { return CastpointDefaultValue; } }
      set {
        _hasBits0 |= 8;
        castpoint_ = value;
      }
    }
    /// <summary>Gets whether the "castpoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCastpoint {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "castpoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCastpoint() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private readonly static int TypeDefaultValue = 0;

    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { if ((_hasBits0 & 16) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "activity" field.</summary>
    public const int ActivityFieldNumber = 6;
    private readonly static int ActivityDefaultValue = 0;

    private int activity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Activity {
      get { if ((_hasBits0 & 32) != 0) { return activity_; } else { return ActivityDefaultValue; } }
      set {
        _hasBits0 |= 32;
        activity_ = value;
      }
    }
    /// <summary>Gets whether the "activity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActivity {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "activity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActivity() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "lag_compensation_time" field.</summary>
    public const int LagCompensationTimeFieldNumber = 7;
    private readonly static float LagCompensationTimeDefaultValue = 0F;

    private float lagCompensationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LagCompensationTime {
      get { if ((_hasBits0 & 64) != 0) { return lagCompensationTime_; } else { return LagCompensationTimeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        lagCompensationTime_ = value;
      }
    }
    /// <summary>Gets whether the "lag_compensation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLagCompensationTime {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "lag_compensation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLagCompensationTime() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_UnitAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_UnitAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (SequenceVariant != other.SequenceVariant) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Playbackrate, other.Playbackrate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Castpoint, other.Castpoint)) return false;
      if (Type != other.Type) return false;
      if (Activity != other.Activity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LagCompensationTime, other.LagCompensationTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntity) hash ^= Entity.GetHashCode();
      if (HasSequenceVariant) hash ^= SequenceVariant.GetHashCode();
      if (HasPlaybackrate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Playbackrate);
      if (HasCastpoint) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Castpoint);
      if (HasType) hash ^= Type.GetHashCode();
      if (HasActivity) hash ^= Activity.GetHashCode();
      if (HasLagCompensationTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LagCompensationTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEntity) {
        output.WriteRawTag(8);
        output.WriteUInt32(Entity);
      }
      if (HasSequenceVariant) {
        output.WriteRawTag(16);
        output.WriteInt32(SequenceVariant);
      }
      if (HasPlaybackrate) {
        output.WriteRawTag(29);
        output.WriteFloat(Playbackrate);
      }
      if (HasCastpoint) {
        output.WriteRawTag(37);
        output.WriteFloat(Castpoint);
      }
      if (HasType) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (HasActivity) {
        output.WriteRawTag(48);
        output.WriteInt32(Activity);
      }
      if (HasLagCompensationTime) {
        output.WriteRawTag(61);
        output.WriteFloat(LagCompensationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEntity) {
        output.WriteRawTag(8);
        output.WriteUInt32(Entity);
      }
      if (HasSequenceVariant) {
        output.WriteRawTag(16);
        output.WriteInt32(SequenceVariant);
      }
      if (HasPlaybackrate) {
        output.WriteRawTag(29);
        output.WriteFloat(Playbackrate);
      }
      if (HasCastpoint) {
        output.WriteRawTag(37);
        output.WriteFloat(Castpoint);
      }
      if (HasType) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (HasActivity) {
        output.WriteRawTag(48);
        output.WriteInt32(Activity);
      }
      if (HasLagCompensationTime) {
        output.WriteRawTag(61);
        output.WriteFloat(LagCompensationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntity) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Entity);
      }
      if (HasSequenceVariant) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceVariant);
      }
      if (HasPlaybackrate) {
        size += 1 + 4;
      }
      if (HasCastpoint) {
        size += 1 + 4;
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HasActivity) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
      }
      if (HasLagCompensationTime) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_UnitAnimation other) {
      if (other == null) {
        return;
      }
      if (other.HasEntity) {
        Entity = other.Entity;
      }
      if (other.HasSequenceVariant) {
        SequenceVariant = other.SequenceVariant;
      }
      if (other.HasPlaybackrate) {
        Playbackrate = other.Playbackrate;
      }
      if (other.HasCastpoint) {
        Castpoint = other.Castpoint;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasActivity) {
        Activity = other.Activity;
      }
      if (other.HasLagCompensationTime) {
        LagCompensationTime = other.LagCompensationTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entity = input.ReadUInt32();
            break;
          }
          case 16: {
            SequenceVariant = input.ReadInt32();
            break;
          }
          case 29: {
            Playbackrate = input.ReadFloat();
            break;
          }
          case 37: {
            Castpoint = input.ReadFloat();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 48: {
            Activity = input.ReadInt32();
            break;
          }
          case 61: {
            LagCompensationTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entity = input.ReadUInt32();
            break;
          }
          case 16: {
            SequenceVariant = input.ReadInt32();
            break;
          }
          case 29: {
            Playbackrate = input.ReadFloat();
            break;
          }
          case 37: {
            Castpoint = input.ReadFloat();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 48: {
            Activity = input.ReadInt32();
            break;
          }
          case 61: {
            LagCompensationTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TE_UnitAnimationEnd : pb::IMessage<CDOTAUserMsg_TE_UnitAnimationEnd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TE_UnitAnimationEnd> _parser = new pb::MessageParser<CDOTAUserMsg_TE_UnitAnimationEnd>(() => new CDOTAUserMsg_TE_UnitAnimationEnd());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TE_UnitAnimationEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimationEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimationEnd(CDOTAUserMsg_TE_UnitAnimationEnd other) : this() {
      _hasBits0 = other._hasBits0;
      entity_ = other.entity_;
      snap_ = other.snap_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TE_UnitAnimationEnd Clone() {
      return new CDOTAUserMsg_TE_UnitAnimationEnd(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private readonly static uint EntityDefaultValue = 16777215;

    private uint entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Entity {
      get { if ((_hasBits0 & 1) != 0) { return entity_; } else { return EntityDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entity_ = value;
      }
    }
    /// <summary>Gets whether the "entity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntity {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntity() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "snap" field.</summary>
    public const int SnapFieldNumber = 2;
    private readonly static bool SnapDefaultValue = false;

    private bool snap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Snap {
      get { if ((_hasBits0 & 2) != 0) { return snap_; } else { return SnapDefaultValue; } }
      set {
        _hasBits0 |= 2;
        snap_ = value;
      }
    }
    /// <summary>Gets whether the "snap" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSnap {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "snap" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSnap() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TE_UnitAnimationEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TE_UnitAnimationEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (Snap != other.Snap) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntity) hash ^= Entity.GetHashCode();
      if (HasSnap) hash ^= Snap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEntity) {
        output.WriteRawTag(8);
        output.WriteUInt32(Entity);
      }
      if (HasSnap) {
        output.WriteRawTag(16);
        output.WriteBool(Snap);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEntity) {
        output.WriteRawTag(8);
        output.WriteUInt32(Entity);
      }
      if (HasSnap) {
        output.WriteRawTag(16);
        output.WriteBool(Snap);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntity) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Entity);
      }
      if (HasSnap) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TE_UnitAnimationEnd other) {
      if (other == null) {
        return;
      }
      if (other.HasEntity) {
        Entity = other.Entity;
      }
      if (other.HasSnap) {
        Snap = other.Snap;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entity = input.ReadUInt32();
            break;
          }
          case 16: {
            Snap = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Entity = input.ReadUInt32();
            break;
          }
          case 16: {
            Snap = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ShowGenericPopup : pb::IMessage<CDOTAUserMsg_ShowGenericPopup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ShowGenericPopup> _parser = new pb::MessageParser<CDOTAUserMsg_ShowGenericPopup>(() => new CDOTAUserMsg_ShowGenericPopup());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ShowGenericPopup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ShowGenericPopup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ShowGenericPopup(CDOTAUserMsg_ShowGenericPopup other) : this() {
      _hasBits0 = other._hasBits0;
      header_ = other.header_;
      body_ = other.body_;
      param1_ = other.param1_;
      param2_ = other.param2_;
      tintScreen_ = other.tintScreen_;
      showNoOtherDialogs_ = other.showNoOtherDialogs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ShowGenericPopup Clone() {
      return new CDOTAUserMsg_ShowGenericPopup(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private readonly static string HeaderDefaultValue = "";

    private string header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Header {
      get { return header_ ?? HeaderDefaultValue; }
      set {
        header_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "header" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeader {
      get { return header_ != null; }
    }
    /// <summary>Clears the value of the "header" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeader() {
      header_ = null;
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private readonly static string BodyDefaultValue = "";

    private string body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_ ?? BodyDefaultValue; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "body" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBody {
      get { return body_ != null; }
    }
    /// <summary>Clears the value of the "body" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBody() {
      body_ = null;
    }

    /// <summary>Field number for the "param1" field.</summary>
    public const int Param1FieldNumber = 3;
    private readonly static string Param1DefaultValue = "";

    private string param1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param1 {
      get { return param1_ ?? Param1DefaultValue; }
      set {
        param1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "param1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParam1 {
      get { return param1_ != null; }
    }
    /// <summary>Clears the value of the "param1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParam1() {
      param1_ = null;
    }

    /// <summary>Field number for the "param2" field.</summary>
    public const int Param2FieldNumber = 4;
    private readonly static string Param2DefaultValue = "";

    private string param2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param2 {
      get { return param2_ ?? Param2DefaultValue; }
      set {
        param2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "param2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParam2 {
      get { return param2_ != null; }
    }
    /// <summary>Clears the value of the "param2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParam2() {
      param2_ = null;
    }

    /// <summary>Field number for the "tint_screen" field.</summary>
    public const int TintScreenFieldNumber = 5;
    private readonly static bool TintScreenDefaultValue = false;

    private bool tintScreen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TintScreen {
      get { if ((_hasBits0 & 1) != 0) { return tintScreen_; } else { return TintScreenDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tintScreen_ = value;
      }
    }
    /// <summary>Gets whether the "tint_screen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTintScreen {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tint_screen" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTintScreen() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "show_no_other_dialogs" field.</summary>
    public const int ShowNoOtherDialogsFieldNumber = 6;
    private readonly static bool ShowNoOtherDialogsDefaultValue = false;

    private bool showNoOtherDialogs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowNoOtherDialogs {
      get { if ((_hasBits0 & 2) != 0) { return showNoOtherDialogs_; } else { return ShowNoOtherDialogsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        showNoOtherDialogs_ = value;
      }
    }
    /// <summary>Gets whether the "show_no_other_dialogs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShowNoOtherDialogs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "show_no_other_dialogs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShowNoOtherDialogs() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ShowGenericPopup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ShowGenericPopup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      if (Body != other.Body) return false;
      if (Param1 != other.Param1) return false;
      if (Param2 != other.Param2) return false;
      if (TintScreen != other.TintScreen) return false;
      if (ShowNoOtherDialogs != other.ShowNoOtherDialogs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeader) hash ^= Header.GetHashCode();
      if (HasBody) hash ^= Body.GetHashCode();
      if (HasParam1) hash ^= Param1.GetHashCode();
      if (HasParam2) hash ^= Param2.GetHashCode();
      if (HasTintScreen) hash ^= TintScreen.GetHashCode();
      if (HasShowNoOtherDialogs) hash ^= ShowNoOtherDialogs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHeader) {
        output.WriteRawTag(10);
        output.WriteString(Header);
      }
      if (HasBody) {
        output.WriteRawTag(18);
        output.WriteString(Body);
      }
      if (HasParam1) {
        output.WriteRawTag(26);
        output.WriteString(Param1);
      }
      if (HasParam2) {
        output.WriteRawTag(34);
        output.WriteString(Param2);
      }
      if (HasTintScreen) {
        output.WriteRawTag(40);
        output.WriteBool(TintScreen);
      }
      if (HasShowNoOtherDialogs) {
        output.WriteRawTag(48);
        output.WriteBool(ShowNoOtherDialogs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHeader) {
        output.WriteRawTag(10);
        output.WriteString(Header);
      }
      if (HasBody) {
        output.WriteRawTag(18);
        output.WriteString(Body);
      }
      if (HasParam1) {
        output.WriteRawTag(26);
        output.WriteString(Param1);
      }
      if (HasParam2) {
        output.WriteRawTag(34);
        output.WriteString(Param2);
      }
      if (HasTintScreen) {
        output.WriteRawTag(40);
        output.WriteBool(TintScreen);
      }
      if (HasShowNoOtherDialogs) {
        output.WriteRawTag(48);
        output.WriteBool(ShowNoOtherDialogs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHeader) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Header);
      }
      if (HasBody) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      if (HasParam1) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param1);
      }
      if (HasParam2) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param2);
      }
      if (HasTintScreen) {
        size += 1 + 1;
      }
      if (HasShowNoOtherDialogs) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ShowGenericPopup other) {
      if (other == null) {
        return;
      }
      if (other.HasHeader) {
        Header = other.Header;
      }
      if (other.HasBody) {
        Body = other.Body;
      }
      if (other.HasParam1) {
        Param1 = other.Param1;
      }
      if (other.HasParam2) {
        Param2 = other.Param2;
      }
      if (other.HasTintScreen) {
        TintScreen = other.TintScreen;
      }
      if (other.HasShowNoOtherDialogs) {
        ShowNoOtherDialogs = other.ShowNoOtherDialogs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Header = input.ReadString();
            break;
          }
          case 18: {
            Body = input.ReadString();
            break;
          }
          case 26: {
            Param1 = input.ReadString();
            break;
          }
          case 34: {
            Param2 = input.ReadString();
            break;
          }
          case 40: {
            TintScreen = input.ReadBool();
            break;
          }
          case 48: {
            ShowNoOtherDialogs = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Header = input.ReadString();
            break;
          }
          case 18: {
            Body = input.ReadString();
            break;
          }
          case 26: {
            Param1 = input.ReadString();
            break;
          }
          case 34: {
            Param2 = input.ReadString();
            break;
          }
          case 40: {
            TintScreen = input.ReadBool();
            break;
          }
          case 48: {
            ShowNoOtherDialogs = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_VoteStart : pb::IMessage<CDOTAUserMsg_VoteStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_VoteStart> _parser = new pb::MessageParser<CDOTAUserMsg_VoteStart>(() => new CDOTAUserMsg_VoteStart());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_VoteStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VoteStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VoteStart(CDOTAUserMsg_VoteStart other) : this() {
      _hasBits0 = other._hasBits0;
      title_ = other.title_;
      duration_ = other.duration_;
      choiceCount_ = other.choiceCount_;
      choices_ = other.choices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VoteStart Clone() {
      return new CDOTAUserMsg_VoteStart(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private readonly static string TitleDefaultValue = "";

    private string title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_ ?? TitleDefaultValue; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitle {
      get { return title_ != null; }
    }
    /// <summary>Clears the value of the "title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      title_ = null;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private readonly static float DurationDefaultValue = 0F;

    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { if ((_hasBits0 & 1) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 1;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "choice_count" field.</summary>
    public const int ChoiceCountFieldNumber = 3;
    private readonly static int ChoiceCountDefaultValue = 0;

    private int choiceCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChoiceCount {
      get { if ((_hasBits0 & 2) != 0) { return choiceCount_; } else { return ChoiceCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        choiceCount_ = value;
      }
    }
    /// <summary>Gets whether the "choice_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChoiceCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "choice_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChoiceCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "choices" field.</summary>
    public const int ChoicesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_choices_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> choices_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Choices {
      get { return choices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_VoteStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_VoteStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (ChoiceCount != other.ChoiceCount) return false;
      if(!choices_.Equals(other.choices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTitle) hash ^= Title.GetHashCode();
      if (HasDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (HasChoiceCount) hash ^= ChoiceCount.GetHashCode();
      hash ^= choices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTitle) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (HasDuration) {
        output.WriteRawTag(21);
        output.WriteFloat(Duration);
      }
      if (HasChoiceCount) {
        output.WriteRawTag(24);
        output.WriteInt32(ChoiceCount);
      }
      choices_.WriteTo(output, _repeated_choices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTitle) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (HasDuration) {
        output.WriteRawTag(21);
        output.WriteFloat(Duration);
      }
      if (HasChoiceCount) {
        output.WriteRawTag(24);
        output.WriteInt32(ChoiceCount);
      }
      choices_.WriteTo(ref output, _repeated_choices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTitle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (HasDuration) {
        size += 1 + 4;
      }
      if (HasChoiceCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChoiceCount);
      }
      size += choices_.CalculateSize(_repeated_choices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_VoteStart other) {
      if (other == null) {
        return;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasChoiceCount) {
        ChoiceCount = other.ChoiceCount;
      }
      choices_.Add(other.choices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 21: {
            Duration = input.ReadFloat();
            break;
          }
          case 24: {
            ChoiceCount = input.ReadInt32();
            break;
          }
          case 34: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 21: {
            Duration = input.ReadFloat();
            break;
          }
          case 24: {
            ChoiceCount = input.ReadInt32();
            break;
          }
          case 34: {
            choices_.AddEntriesFrom(ref input, _repeated_choices_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_VoteUpdate : pb::IMessage<CDOTAUserMsg_VoteUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_VoteUpdate> _parser = new pb::MessageParser<CDOTAUserMsg_VoteUpdate>(() => new CDOTAUserMsg_VoteUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_VoteUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VoteUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VoteUpdate(CDOTAUserMsg_VoteUpdate other) : this() {
      choiceCounts_ = other.choiceCounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VoteUpdate Clone() {
      return new CDOTAUserMsg_VoteUpdate(this);
    }

    /// <summary>Field number for the "choice_counts" field.</summary>
    public const int ChoiceCountsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_choiceCounts_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> choiceCounts_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ChoiceCounts {
      get { return choiceCounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_VoteUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_VoteUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!choiceCounts_.Equals(other.choiceCounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= choiceCounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      choiceCounts_.WriteTo(output, _repeated_choiceCounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      choiceCounts_.WriteTo(ref output, _repeated_choiceCounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += choiceCounts_.CalculateSize(_repeated_choiceCounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_VoteUpdate other) {
      if (other == null) {
        return;
      }
      choiceCounts_.Add(other.choiceCounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            choiceCounts_.AddEntriesFrom(input, _repeated_choiceCounts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            choiceCounts_.AddEntriesFrom(ref input, _repeated_choiceCounts_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_VoteEnd : pb::IMessage<CDOTAUserMsg_VoteEnd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_VoteEnd> _parser = new pb::MessageParser<CDOTAUserMsg_VoteEnd>(() => new CDOTAUserMsg_VoteEnd());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_VoteEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VoteEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VoteEnd(CDOTAUserMsg_VoteEnd other) : this() {
      _hasBits0 = other._hasBits0;
      selectedChoice_ = other.selectedChoice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VoteEnd Clone() {
      return new CDOTAUserMsg_VoteEnd(this);
    }

    /// <summary>Field number for the "selected_choice" field.</summary>
    public const int SelectedChoiceFieldNumber = 1;
    private readonly static int SelectedChoiceDefaultValue = 0;

    private int selectedChoice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectedChoice {
      get { if ((_hasBits0 & 1) != 0) { return selectedChoice_; } else { return SelectedChoiceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        selectedChoice_ = value;
      }
    }
    /// <summary>Gets whether the "selected_choice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSelectedChoice {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "selected_choice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSelectedChoice() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_VoteEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_VoteEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SelectedChoice != other.SelectedChoice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSelectedChoice) hash ^= SelectedChoice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSelectedChoice) {
        output.WriteRawTag(8);
        output.WriteInt32(SelectedChoice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSelectedChoice) {
        output.WriteRawTag(8);
        output.WriteInt32(SelectedChoice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSelectedChoice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectedChoice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_VoteEnd other) {
      if (other == null) {
        return;
      }
      if (other.HasSelectedChoice) {
        SelectedChoice = other.SelectedChoice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SelectedChoice = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SelectedChoice = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_BoosterStatePlayer : pb::IMessage<CDOTAUserMsg_BoosterStatePlayer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_BoosterStatePlayer> _parser = new pb::MessageParser<CDOTAUserMsg_BoosterStatePlayer>(() => new CDOTAUserMsg_BoosterStatePlayer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_BoosterStatePlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BoosterStatePlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BoosterStatePlayer(CDOTAUserMsg_BoosterStatePlayer other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      bonus_ = other.bonus_;
      eventBonus_ = other.eventBonus_;
      bonusItemId_ = other.bonusItemId_;
      eventBonusItemId_ = other.eventBonusItemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BoosterStatePlayer Clone() {
      return new CDOTAUserMsg_BoosterStatePlayer(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 2;
    private readonly static float BonusDefaultValue = 0F;

    private float bonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bonus {
      get { if ((_hasBits0 & 2) != 0) { return bonus_; } else { return BonusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bonus_ = value;
      }
    }
    /// <summary>Gets whether the "bonus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBonus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bonus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBonus() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "event_bonus" field.</summary>
    public const int EventBonusFieldNumber = 3;
    private readonly static float EventBonusDefaultValue = 0F;

    private float eventBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EventBonus {
      get { if ((_hasBits0 & 4) != 0) { return eventBonus_; } else { return EventBonusDefaultValue; } }
      set {
        _hasBits0 |= 4;
        eventBonus_ = value;
      }
    }
    /// <summary>Gets whether the "event_bonus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventBonus {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "event_bonus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventBonus() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "bonus_item_id" field.</summary>
    public const int BonusItemIdFieldNumber = 4;
    private readonly static uint BonusItemIdDefaultValue = 0;

    private uint bonusItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BonusItemId {
      get { if ((_hasBits0 & 8) != 0) { return bonusItemId_; } else { return BonusItemIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        bonusItemId_ = value;
      }
    }
    /// <summary>Gets whether the "bonus_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBonusItemId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "bonus_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBonusItemId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "event_bonus_item_id" field.</summary>
    public const int EventBonusItemIdFieldNumber = 5;
    private readonly static uint EventBonusItemIdDefaultValue = 0;

    private uint eventBonusItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventBonusItemId {
      get { if ((_hasBits0 & 16) != 0) { return eventBonusItemId_; } else { return EventBonusItemIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        eventBonusItemId_ = value;
      }
    }
    /// <summary>Gets whether the "event_bonus_item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventBonusItemId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "event_bonus_item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventBonusItemId() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_BoosterStatePlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_BoosterStatePlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bonus, other.Bonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EventBonus, other.EventBonus)) return false;
      if (BonusItemId != other.BonusItemId) return false;
      if (EventBonusItemId != other.EventBonusItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasBonus) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bonus);
      if (HasEventBonus) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EventBonus);
      if (HasBonusItemId) hash ^= BonusItemId.GetHashCode();
      if (HasEventBonusItemId) hash ^= EventBonusItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasBonus) {
        output.WriteRawTag(21);
        output.WriteFloat(Bonus);
      }
      if (HasEventBonus) {
        output.WriteRawTag(29);
        output.WriteFloat(EventBonus);
      }
      if (HasBonusItemId) {
        output.WriteRawTag(32);
        output.WriteUInt32(BonusItemId);
      }
      if (HasEventBonusItemId) {
        output.WriteRawTag(40);
        output.WriteUInt32(EventBonusItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasBonus) {
        output.WriteRawTag(21);
        output.WriteFloat(Bonus);
      }
      if (HasEventBonus) {
        output.WriteRawTag(29);
        output.WriteFloat(EventBonus);
      }
      if (HasBonusItemId) {
        output.WriteRawTag(32);
        output.WriteUInt32(BonusItemId);
      }
      if (HasEventBonusItemId) {
        output.WriteRawTag(40);
        output.WriteUInt32(EventBonusItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasBonus) {
        size += 1 + 4;
      }
      if (HasEventBonus) {
        size += 1 + 4;
      }
      if (HasBonusItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BonusItemId);
      }
      if (HasEventBonusItemId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventBonusItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_BoosterStatePlayer other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasBonus) {
        Bonus = other.Bonus;
      }
      if (other.HasEventBonus) {
        EventBonus = other.EventBonus;
      }
      if (other.HasBonusItemId) {
        BonusItemId = other.BonusItemId;
      }
      if (other.HasEventBonusItemId) {
        EventBonusItemId = other.EventBonusItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 21: {
            Bonus = input.ReadFloat();
            break;
          }
          case 29: {
            EventBonus = input.ReadFloat();
            break;
          }
          case 32: {
            BonusItemId = input.ReadUInt32();
            break;
          }
          case 40: {
            EventBonusItemId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 21: {
            Bonus = input.ReadFloat();
            break;
          }
          case 29: {
            EventBonus = input.ReadFloat();
            break;
          }
          case 32: {
            BonusItemId = input.ReadUInt32();
            break;
          }
          case 40: {
            EventBonusItemId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_BoosterState : pb::IMessage<CDOTAUserMsg_BoosterState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_BoosterState> _parser = new pb::MessageParser<CDOTAUserMsg_BoosterState>(() => new CDOTAUserMsg_BoosterState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_BoosterState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BoosterState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BoosterState(CDOTAUserMsg_BoosterState other) : this() {
      boostedPlayers_ = other.boostedPlayers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BoosterState Clone() {
      return new CDOTAUserMsg_BoosterState(this);
    }

    /// <summary>Field number for the "boosted_players" field.</summary>
    public const int BoostedPlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_BoosterStatePlayer> _repeated_boostedPlayers_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CDOTAUserMsg_BoosterStatePlayer.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_BoosterStatePlayer> boostedPlayers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_BoosterStatePlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_BoosterStatePlayer> BoostedPlayers {
      get { return boostedPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_BoosterState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_BoosterState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boostedPlayers_.Equals(other.boostedPlayers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boostedPlayers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      boostedPlayers_.WriteTo(output, _repeated_boostedPlayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      boostedPlayers_.WriteTo(ref output, _repeated_boostedPlayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boostedPlayers_.CalculateSize(_repeated_boostedPlayers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_BoosterState other) {
      if (other == null) {
        return;
      }
      boostedPlayers_.Add(other.boostedPlayers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            boostedPlayers_.AddEntriesFrom(input, _repeated_boostedPlayers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            boostedPlayers_.AddEntriesFrom(ref input, _repeated_boostedPlayers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_AbilitySteal : pb::IMessage<CDOTAUserMsg_AbilitySteal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_AbilitySteal> _parser = new pb::MessageParser<CDOTAUserMsg_AbilitySteal>(() => new CDOTAUserMsg_AbilitySteal());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_AbilitySteal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilitySteal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilitySteal(CDOTAUserMsg_AbilitySteal other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      abilityId_ = other.abilityId_;
      abilityLevel_ = other.abilityLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilitySteal Clone() {
      return new CDOTAUserMsg_AbilitySteal(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 2;
    private readonly static int AbilityIdDefaultValue = -1;

    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { if ((_hasBits0 & 2) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        abilityId_ = value;
      }
    }
    /// <summary>Gets whether the "ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ability_level" field.</summary>
    public const int AbilityLevelFieldNumber = 3;
    private readonly static uint AbilityLevelDefaultValue = 0;

    private uint abilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbilityLevel {
      get { if ((_hasBits0 & 4) != 0) { return abilityLevel_; } else { return AbilityLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        abilityLevel_ = value;
      }
    }
    /// <summary>Gets whether the "ability_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ability_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityLevel() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_AbilitySteal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_AbilitySteal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (AbilityId != other.AbilityId) return false;
      if (AbilityLevel != other.AbilityLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasAbilityId) hash ^= AbilityId.GetHashCode();
      if (HasAbilityLevel) hash ^= AbilityLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasAbilityId) {
        output.WriteRawTag(16);
        output.WriteInt32(AbilityId);
      }
      if (HasAbilityLevel) {
        output.WriteRawTag(24);
        output.WriteUInt32(AbilityLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasAbilityId) {
        output.WriteRawTag(16);
        output.WriteInt32(AbilityId);
      }
      if (HasAbilityLevel) {
        output.WriteRawTag(24);
        output.WriteUInt32(AbilityLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (HasAbilityLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_AbilitySteal other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasAbilityId) {
        AbilityId = other.AbilityId;
      }
      if (other.HasAbilityLevel) {
        AbilityLevel = other.AbilityLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 24: {
            AbilityLevel = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 24: {
            AbilityLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_StatsHeroLookup : pb::IMessage<CDOTAUserMsg_StatsHeroLookup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_StatsHeroLookup> _parser = new pb::MessageParser<CDOTAUserMsg_StatsHeroLookup>(() => new CDOTAUserMsg_StatsHeroLookup());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_StatsHeroLookup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroLookup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroLookup(CDOTAUserMsg_StatsHeroLookup other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      heroId_ = other.heroId_;
      heroName_ = other.heroName_;
      persona_ = other.persona_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroLookup Clone() {
      return new CDOTAUserMsg_StatsHeroLookup(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hero_name" field.</summary>
    public const int HeroNameFieldNumber = 3;
    private readonly static string HeroNameDefaultValue = "";

    private string heroName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroName {
      get { return heroName_ ?? HeroNameDefaultValue; }
      set {
        heroName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "hero_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroName {
      get { return heroName_ != null; }
    }
    /// <summary>Clears the value of the "hero_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroName() {
      heroName_ = null;
    }

    /// <summary>Field number for the "persona" field.</summary>
    public const int PersonaFieldNumber = 4;
    private readonly static string PersonaDefaultValue = "";

    private string persona_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Persona {
      get { return persona_ ?? PersonaDefaultValue; }
      set {
        persona_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "persona" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPersona {
      get { return persona_ != null; }
    }
    /// <summary>Clears the value of the "persona" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPersona() {
      persona_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_StatsHeroLookup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_StatsHeroLookup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (HeroId != other.HeroId) return false;
      if (HeroName != other.HeroName) return false;
      if (Persona != other.Persona) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasHeroName) hash ^= HeroName.GetHashCode();
      if (HasPersona) hash ^= Persona.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (HasHeroName) {
        output.WriteRawTag(26);
        output.WriteString(HeroName);
      }
      if (HasPersona) {
        output.WriteRawTag(34);
        output.WriteString(Persona);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (HasHeroName) {
        output.WriteRawTag(26);
        output.WriteString(HeroName);
      }
      if (HasPersona) {
        output.WriteRawTag(34);
        output.WriteString(Persona);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasHeroName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroName);
      }
      if (HasPersona) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Persona);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_StatsHeroLookup other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasHeroName) {
        HeroName = other.HeroName;
      }
      if (other.HasPersona) {
        Persona = other.Persona;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 26: {
            HeroName = input.ReadString();
            break;
          }
          case 34: {
            Persona = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 26: {
            HeroName = input.ReadString();
            break;
          }
          case 34: {
            Persona = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_StatsHeroPositionInfo : pb::IMessage<CDOTAUserMsg_StatsHeroPositionInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_StatsHeroPositionInfo> _parser = new pb::MessageParser<CDOTAUserMsg_StatsHeroPositionInfo>(() => new CDOTAUserMsg_StatsHeroPositionInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_StatsHeroPositionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroPositionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroPositionInfo(CDOTAUserMsg_StatsHeroPositionInfo other) : this() {
      _hasBits0 = other._hasBits0;
      averagePosition_ = other.averagePosition_;
      positionDetails_ = other.positionDetails_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroPositionInfo Clone() {
      return new CDOTAUserMsg_StatsHeroPositionInfo(this);
    }

    /// <summary>Field number for the "average_position" field.</summary>
    public const int AveragePositionFieldNumber = 1;
    private readonly static float AveragePositionDefaultValue = 0F;

    private float averagePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AveragePosition {
      get { if ((_hasBits0 & 1) != 0) { return averagePosition_; } else { return AveragePositionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        averagePosition_ = value;
      }
    }
    /// <summary>Gets whether the "average_position" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAveragePosition {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "average_position" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAveragePosition() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "position_details" field.</summary>
    public const int PositionDetailsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair> _repeated_positionDetails_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair> positionDetails_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo.Types.PositionPair> PositionDetails {
      get { return positionDetails_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_StatsHeroPositionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_StatsHeroPositionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AveragePosition, other.AveragePosition)) return false;
      if(!positionDetails_.Equals(other.positionDetails_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAveragePosition) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AveragePosition);
      hash ^= positionDetails_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAveragePosition) {
        output.WriteRawTag(13);
        output.WriteFloat(AveragePosition);
      }
      positionDetails_.WriteTo(output, _repeated_positionDetails_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAveragePosition) {
        output.WriteRawTag(13);
        output.WriteFloat(AveragePosition);
      }
      positionDetails_.WriteTo(ref output, _repeated_positionDetails_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAveragePosition) {
        size += 1 + 4;
      }
      size += positionDetails_.CalculateSize(_repeated_positionDetails_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_StatsHeroPositionInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasAveragePosition) {
        AveragePosition = other.AveragePosition;
      }
      positionDetails_.Add(other.positionDetails_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AveragePosition = input.ReadFloat();
            break;
          }
          case 18: {
            positionDetails_.AddEntriesFrom(input, _repeated_positionDetails_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            AveragePosition = input.ReadFloat();
            break;
          }
          case 18: {
            positionDetails_.AddEntriesFrom(ref input, _repeated_positionDetails_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_StatsHeroPositionInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PositionPair : pb::IMessage<PositionPair>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PositionPair> _parser = new pb::MessageParser<PositionPair>(() => new PositionPair());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PositionPair> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PositionPair() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PositionPair(PositionPair other) : this() {
          _hasBits0 = other._hasBits0;
          positionCategory_ = other.positionCategory_;
          positionCount_ = other.positionCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PositionPair Clone() {
          return new PositionPair(this);
        }

        /// <summary>Field number for the "position_category" field.</summary>
        public const int PositionCategoryFieldNumber = 1;
        private readonly static global::Steam.Protos.Dota2.DOTA_POSITION_CATEGORY PositionCategoryDefaultValue = global::Steam.Protos.Dota2.DOTA_POSITION_CATEGORY.DotaPositionNone;

        private global::Steam.Protos.Dota2.DOTA_POSITION_CATEGORY positionCategory_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.DOTA_POSITION_CATEGORY PositionCategory {
          get { if ((_hasBits0 & 1) != 0) { return positionCategory_; } else { return PositionCategoryDefaultValue; } }
          set {
            _hasBits0 |= 1;
            positionCategory_ = value;
          }
        }
        /// <summary>Gets whether the "position_category" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPositionCategory {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "position_category" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPositionCategory() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "position_count" field.</summary>
        public const int PositionCountFieldNumber = 2;
        private readonly static uint PositionCountDefaultValue = 0;

        private uint positionCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PositionCount {
          get { if ((_hasBits0 & 2) != 0) { return positionCount_; } else { return PositionCountDefaultValue; } }
          set {
            _hasBits0 |= 2;
            positionCount_ = value;
          }
        }
        /// <summary>Gets whether the "position_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPositionCount {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "position_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPositionCount() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PositionPair);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PositionPair other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PositionCategory != other.PositionCategory) return false;
          if (PositionCount != other.PositionCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPositionCategory) hash ^= PositionCategory.GetHashCode();
          if (HasPositionCount) hash ^= PositionCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPositionCategory) {
            output.WriteRawTag(8);
            output.WriteEnum((int) PositionCategory);
          }
          if (HasPositionCount) {
            output.WriteRawTag(16);
            output.WriteUInt32(PositionCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPositionCategory) {
            output.WriteRawTag(8);
            output.WriteEnum((int) PositionCategory);
          }
          if (HasPositionCount) {
            output.WriteRawTag(16);
            output.WriteUInt32(PositionCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPositionCategory) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PositionCategory);
          }
          if (HasPositionCount) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PositionPair other) {
          if (other == null) {
            return;
          }
          if (other.HasPositionCategory) {
            PositionCategory = other.PositionCategory;
          }
          if (other.HasPositionCount) {
            PositionCount = other.PositionCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PositionCategory = (global::Steam.Protos.Dota2.DOTA_POSITION_CATEGORY) input.ReadEnum();
                break;
              }
              case 16: {
                PositionCount = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PositionCategory = (global::Steam.Protos.Dota2.DOTA_POSITION_CATEGORY) input.ReadEnum();
                break;
              }
              case 16: {
                PositionCount = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_StatsHeroMinuteDetails : pb::IMessage<CDOTAUserMsg_StatsHeroMinuteDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_StatsHeroMinuteDetails> _parser = new pb::MessageParser<CDOTAUserMsg_StatsHeroMinuteDetails>(() => new CDOTAUserMsg_StatsHeroMinuteDetails());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_StatsHeroMinuteDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroMinuteDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroMinuteDetails(CDOTAUserMsg_StatsHeroMinuteDetails other) : this() {
      _hasBits0 = other._hasBits0;
      lastHits_ = other.lastHits_;
      heroKills_ = other.heroKills_;
      heroDamage_ = other.heroDamage_;
      towerDamage_ = other.towerDamage_;
      positionInfo_ = other.positionInfo_ != null ? other.positionInfo_.Clone() : null;
      totalXp_ = other.totalXp_;
      netWorth_ = other.netWorth_;
      harvestedCreepGold_ = other.harvestedCreepGold_;
      claimedFarm_ = other.claimedFarm_;
      wardsPlaced_ = other.wardsPlaced_;
      runesCollected_ = other.runesCollected_;
      tpsUsed_ = other.tpsUsed_;
      manaSpent_ = other.manaSpent_.Clone();
      damageAbsorbed_ = other.damageAbsorbed_.Clone();
      damageDone_ = other.damageDone_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsHeroMinuteDetails Clone() {
      return new CDOTAUserMsg_StatsHeroMinuteDetails(this);
    }

    /// <summary>Field number for the "last_hits" field.</summary>
    public const int LastHitsFieldNumber = 1;
    private readonly static uint LastHitsDefaultValue = 0;

    private uint lastHits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastHits {
      get { if ((_hasBits0 & 1) != 0) { return lastHits_; } else { return LastHitsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lastHits_ = value;
      }
    }
    /// <summary>Gets whether the "last_hits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastHits {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "last_hits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastHits() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hero_kills" field.</summary>
    public const int HeroKillsFieldNumber = 2;
    private readonly static uint HeroKillsDefaultValue = 0;

    private uint heroKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroKills {
      get { if ((_hasBits0 & 2) != 0) { return heroKills_; } else { return HeroKillsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        heroKills_ = value;
      }
    }
    /// <summary>Gets whether the "hero_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroKills {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "hero_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroKills() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hero_damage" field.</summary>
    public const int HeroDamageFieldNumber = 3;
    private readonly static uint HeroDamageDefaultValue = 0;

    private uint heroDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroDamage {
      get { if ((_hasBits0 & 4) != 0) { return heroDamage_; } else { return HeroDamageDefaultValue; } }
      set {
        _hasBits0 |= 4;
        heroDamage_ = value;
      }
    }
    /// <summary>Gets whether the "hero_damage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroDamage {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hero_damage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroDamage() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "tower_damage" field.</summary>
    public const int TowerDamageFieldNumber = 4;
    private readonly static uint TowerDamageDefaultValue = 0;

    private uint towerDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TowerDamage {
      get { if ((_hasBits0 & 8) != 0) { return towerDamage_; } else { return TowerDamageDefaultValue; } }
      set {
        _hasBits0 |= 8;
        towerDamage_ = value;
      }
    }
    /// <summary>Gets whether the "tower_damage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTowerDamage {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "tower_damage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTowerDamage() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "position_info" field.</summary>
    public const int PositionInfoFieldNumber = 5;
    private global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo positionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo PositionInfo {
      get { return positionInfo_; }
      set {
        positionInfo_ = value;
      }
    }

    /// <summary>Field number for the "total_xp" field.</summary>
    public const int TotalXpFieldNumber = 6;
    private readonly static uint TotalXpDefaultValue = 0;

    private uint totalXp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalXp {
      get { if ((_hasBits0 & 16) != 0) { return totalXp_; } else { return TotalXpDefaultValue; } }
      set {
        _hasBits0 |= 16;
        totalXp_ = value;
      }
    }
    /// <summary>Gets whether the "total_xp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalXp {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "total_xp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalXp() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "net_worth" field.</summary>
    public const int NetWorthFieldNumber = 7;
    private readonly static uint NetWorthDefaultValue = 0;

    private uint netWorth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetWorth {
      get { if ((_hasBits0 & 32) != 0) { return netWorth_; } else { return NetWorthDefaultValue; } }
      set {
        _hasBits0 |= 32;
        netWorth_ = value;
      }
    }
    /// <summary>Gets whether the "net_worth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNetWorth {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "net_worth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNetWorth() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "harvested_creep_gold" field.</summary>
    public const int HarvestedCreepGoldFieldNumber = 8;
    private readonly static uint HarvestedCreepGoldDefaultValue = 0;

    private uint harvestedCreepGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HarvestedCreepGold {
      get { if ((_hasBits0 & 64) != 0) { return harvestedCreepGold_; } else { return HarvestedCreepGoldDefaultValue; } }
      set {
        _hasBits0 |= 64;
        harvestedCreepGold_ = value;
      }
    }
    /// <summary>Gets whether the "harvested_creep_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHarvestedCreepGold {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "harvested_creep_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHarvestedCreepGold() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "claimed_farm" field.</summary>
    public const int ClaimedFarmFieldNumber = 9;
    private readonly static uint ClaimedFarmDefaultValue = 0;

    private uint claimedFarm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClaimedFarm {
      get { if ((_hasBits0 & 128) != 0) { return claimedFarm_; } else { return ClaimedFarmDefaultValue; } }
      set {
        _hasBits0 |= 128;
        claimedFarm_ = value;
      }
    }
    /// <summary>Gets whether the "claimed_farm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClaimedFarm {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "claimed_farm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClaimedFarm() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "wards_placed" field.</summary>
    public const int WardsPlacedFieldNumber = 10;
    private readonly static uint WardsPlacedDefaultValue = 0;

    private uint wardsPlaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WardsPlaced {
      get { if ((_hasBits0 & 256) != 0) { return wardsPlaced_; } else { return WardsPlacedDefaultValue; } }
      set {
        _hasBits0 |= 256;
        wardsPlaced_ = value;
      }
    }
    /// <summary>Gets whether the "wards_placed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWardsPlaced {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "wards_placed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWardsPlaced() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "runes_collected" field.</summary>
    public const int RunesCollectedFieldNumber = 11;
    private readonly static uint RunesCollectedDefaultValue = 0;

    private uint runesCollected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RunesCollected {
      get { if ((_hasBits0 & 512) != 0) { return runesCollected_; } else { return RunesCollectedDefaultValue; } }
      set {
        _hasBits0 |= 512;
        runesCollected_ = value;
      }
    }
    /// <summary>Gets whether the "runes_collected" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRunesCollected {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "runes_collected" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRunesCollected() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "tps_used" field.</summary>
    public const int TpsUsedFieldNumber = 12;
    private readonly static uint TpsUsedDefaultValue = 0;

    private uint tpsUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TpsUsed {
      get { if ((_hasBits0 & 1024) != 0) { return tpsUsed_; } else { return TpsUsedDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        tpsUsed_ = value;
      }
    }
    /// <summary>Gets whether the "tps_used" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTpsUsed {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "tps_used" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTpsUsed() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "mana_spent" field.</summary>
    public const int ManaSpentFieldNumber = 13;
    private static readonly pb::FieldCodec<uint> _repeated_manaSpent_codec
        = pb::FieldCodec.ForUInt32(104);
    private readonly pbc::RepeatedField<uint> manaSpent_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ManaSpent {
      get { return manaSpent_; }
    }

    /// <summary>Field number for the "damage_absorbed" field.</summary>
    public const int DamageAbsorbedFieldNumber = 14;
    private static readonly pb::FieldCodec<uint> _repeated_damageAbsorbed_codec
        = pb::FieldCodec.ForUInt32(112);
    private readonly pbc::RepeatedField<uint> damageAbsorbed_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DamageAbsorbed {
      get { return damageAbsorbed_; }
    }

    /// <summary>Field number for the "damage_done" field.</summary>
    public const int DamageDoneFieldNumber = 15;
    private static readonly pb::FieldCodec<uint> _repeated_damageDone_codec
        = pb::FieldCodec.ForUInt32(120);
    private readonly pbc::RepeatedField<uint> damageDone_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DamageDone {
      get { return damageDone_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_StatsHeroMinuteDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_StatsHeroMinuteDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastHits != other.LastHits) return false;
      if (HeroKills != other.HeroKills) return false;
      if (HeroDamage != other.HeroDamage) return false;
      if (TowerDamage != other.TowerDamage) return false;
      if (!object.Equals(PositionInfo, other.PositionInfo)) return false;
      if (TotalXp != other.TotalXp) return false;
      if (NetWorth != other.NetWorth) return false;
      if (HarvestedCreepGold != other.HarvestedCreepGold) return false;
      if (ClaimedFarm != other.ClaimedFarm) return false;
      if (WardsPlaced != other.WardsPlaced) return false;
      if (RunesCollected != other.RunesCollected) return false;
      if (TpsUsed != other.TpsUsed) return false;
      if(!manaSpent_.Equals(other.manaSpent_)) return false;
      if(!damageAbsorbed_.Equals(other.damageAbsorbed_)) return false;
      if(!damageDone_.Equals(other.damageDone_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLastHits) hash ^= LastHits.GetHashCode();
      if (HasHeroKills) hash ^= HeroKills.GetHashCode();
      if (HasHeroDamage) hash ^= HeroDamage.GetHashCode();
      if (HasTowerDamage) hash ^= TowerDamage.GetHashCode();
      if (positionInfo_ != null) hash ^= PositionInfo.GetHashCode();
      if (HasTotalXp) hash ^= TotalXp.GetHashCode();
      if (HasNetWorth) hash ^= NetWorth.GetHashCode();
      if (HasHarvestedCreepGold) hash ^= HarvestedCreepGold.GetHashCode();
      if (HasClaimedFarm) hash ^= ClaimedFarm.GetHashCode();
      if (HasWardsPlaced) hash ^= WardsPlaced.GetHashCode();
      if (HasRunesCollected) hash ^= RunesCollected.GetHashCode();
      if (HasTpsUsed) hash ^= TpsUsed.GetHashCode();
      hash ^= manaSpent_.GetHashCode();
      hash ^= damageAbsorbed_.GetHashCode();
      hash ^= damageDone_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLastHits) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastHits);
      }
      if (HasHeroKills) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeroKills);
      }
      if (HasHeroDamage) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroDamage);
      }
      if (HasTowerDamage) {
        output.WriteRawTag(32);
        output.WriteUInt32(TowerDamage);
      }
      if (positionInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PositionInfo);
      }
      if (HasTotalXp) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalXp);
      }
      if (HasNetWorth) {
        output.WriteRawTag(56);
        output.WriteUInt32(NetWorth);
      }
      if (HasHarvestedCreepGold) {
        output.WriteRawTag(64);
        output.WriteUInt32(HarvestedCreepGold);
      }
      if (HasClaimedFarm) {
        output.WriteRawTag(72);
        output.WriteUInt32(ClaimedFarm);
      }
      if (HasWardsPlaced) {
        output.WriteRawTag(80);
        output.WriteUInt32(WardsPlaced);
      }
      if (HasRunesCollected) {
        output.WriteRawTag(88);
        output.WriteUInt32(RunesCollected);
      }
      if (HasTpsUsed) {
        output.WriteRawTag(96);
        output.WriteUInt32(TpsUsed);
      }
      manaSpent_.WriteTo(output, _repeated_manaSpent_codec);
      damageAbsorbed_.WriteTo(output, _repeated_damageAbsorbed_codec);
      damageDone_.WriteTo(output, _repeated_damageDone_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLastHits) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastHits);
      }
      if (HasHeroKills) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeroKills);
      }
      if (HasHeroDamage) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroDamage);
      }
      if (HasTowerDamage) {
        output.WriteRawTag(32);
        output.WriteUInt32(TowerDamage);
      }
      if (positionInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PositionInfo);
      }
      if (HasTotalXp) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalXp);
      }
      if (HasNetWorth) {
        output.WriteRawTag(56);
        output.WriteUInt32(NetWorth);
      }
      if (HasHarvestedCreepGold) {
        output.WriteRawTag(64);
        output.WriteUInt32(HarvestedCreepGold);
      }
      if (HasClaimedFarm) {
        output.WriteRawTag(72);
        output.WriteUInt32(ClaimedFarm);
      }
      if (HasWardsPlaced) {
        output.WriteRawTag(80);
        output.WriteUInt32(WardsPlaced);
      }
      if (HasRunesCollected) {
        output.WriteRawTag(88);
        output.WriteUInt32(RunesCollected);
      }
      if (HasTpsUsed) {
        output.WriteRawTag(96);
        output.WriteUInt32(TpsUsed);
      }
      manaSpent_.WriteTo(ref output, _repeated_manaSpent_codec);
      damageAbsorbed_.WriteTo(ref output, _repeated_damageAbsorbed_codec);
      damageDone_.WriteTo(ref output, _repeated_damageDone_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLastHits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastHits);
      }
      if (HasHeroKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroKills);
      }
      if (HasHeroDamage) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroDamage);
      }
      if (HasTowerDamage) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TowerDamage);
      }
      if (positionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PositionInfo);
      }
      if (HasTotalXp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalXp);
      }
      if (HasNetWorth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetWorth);
      }
      if (HasHarvestedCreepGold) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HarvestedCreepGold);
      }
      if (HasClaimedFarm) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClaimedFarm);
      }
      if (HasWardsPlaced) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WardsPlaced);
      }
      if (HasRunesCollected) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RunesCollected);
      }
      if (HasTpsUsed) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TpsUsed);
      }
      size += manaSpent_.CalculateSize(_repeated_manaSpent_codec);
      size += damageAbsorbed_.CalculateSize(_repeated_damageAbsorbed_codec);
      size += damageDone_.CalculateSize(_repeated_damageDone_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_StatsHeroMinuteDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasLastHits) {
        LastHits = other.LastHits;
      }
      if (other.HasHeroKills) {
        HeroKills = other.HeroKills;
      }
      if (other.HasHeroDamage) {
        HeroDamage = other.HeroDamage;
      }
      if (other.HasTowerDamage) {
        TowerDamage = other.TowerDamage;
      }
      if (other.positionInfo_ != null) {
        if (positionInfo_ == null) {
          PositionInfo = new global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo();
        }
        PositionInfo.MergeFrom(other.PositionInfo);
      }
      if (other.HasTotalXp) {
        TotalXp = other.TotalXp;
      }
      if (other.HasNetWorth) {
        NetWorth = other.NetWorth;
      }
      if (other.HasHarvestedCreepGold) {
        HarvestedCreepGold = other.HarvestedCreepGold;
      }
      if (other.HasClaimedFarm) {
        ClaimedFarm = other.ClaimedFarm;
      }
      if (other.HasWardsPlaced) {
        WardsPlaced = other.WardsPlaced;
      }
      if (other.HasRunesCollected) {
        RunesCollected = other.RunesCollected;
      }
      if (other.HasTpsUsed) {
        TpsUsed = other.TpsUsed;
      }
      manaSpent_.Add(other.manaSpent_);
      damageAbsorbed_.Add(other.damageAbsorbed_);
      damageDone_.Add(other.damageDone_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastHits = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroKills = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroDamage = input.ReadUInt32();
            break;
          }
          case 32: {
            TowerDamage = input.ReadUInt32();
            break;
          }
          case 42: {
            if (positionInfo_ == null) {
              PositionInfo = new global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo();
            }
            input.ReadMessage(PositionInfo);
            break;
          }
          case 48: {
            TotalXp = input.ReadUInt32();
            break;
          }
          case 56: {
            NetWorth = input.ReadUInt32();
            break;
          }
          case 64: {
            HarvestedCreepGold = input.ReadUInt32();
            break;
          }
          case 72: {
            ClaimedFarm = input.ReadUInt32();
            break;
          }
          case 80: {
            WardsPlaced = input.ReadUInt32();
            break;
          }
          case 88: {
            RunesCollected = input.ReadUInt32();
            break;
          }
          case 96: {
            TpsUsed = input.ReadUInt32();
            break;
          }
          case 106:
          case 104: {
            manaSpent_.AddEntriesFrom(input, _repeated_manaSpent_codec);
            break;
          }
          case 114:
          case 112: {
            damageAbsorbed_.AddEntriesFrom(input, _repeated_damageAbsorbed_codec);
            break;
          }
          case 122:
          case 120: {
            damageDone_.AddEntriesFrom(input, _repeated_damageDone_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LastHits = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroKills = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroDamage = input.ReadUInt32();
            break;
          }
          case 32: {
            TowerDamage = input.ReadUInt32();
            break;
          }
          case 42: {
            if (positionInfo_ == null) {
              PositionInfo = new global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroPositionInfo();
            }
            input.ReadMessage(PositionInfo);
            break;
          }
          case 48: {
            TotalXp = input.ReadUInt32();
            break;
          }
          case 56: {
            NetWorth = input.ReadUInt32();
            break;
          }
          case 64: {
            HarvestedCreepGold = input.ReadUInt32();
            break;
          }
          case 72: {
            ClaimedFarm = input.ReadUInt32();
            break;
          }
          case 80: {
            WardsPlaced = input.ReadUInt32();
            break;
          }
          case 88: {
            RunesCollected = input.ReadUInt32();
            break;
          }
          case 96: {
            TpsUsed = input.ReadUInt32();
            break;
          }
          case 106:
          case 104: {
            manaSpent_.AddEntriesFrom(ref input, _repeated_manaSpent_codec);
            break;
          }
          case 114:
          case 112: {
            damageAbsorbed_.AddEntriesFrom(ref input, _repeated_damageAbsorbed_codec);
            break;
          }
          case 122:
          case 120: {
            damageDone_.AddEntriesFrom(ref input, _repeated_damageDone_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_StatsTeamMinuteDetails : pb::IMessage<CDOTAUserMsg_StatsTeamMinuteDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_StatsTeamMinuteDetails> _parser = new pb::MessageParser<CDOTAUserMsg_StatsTeamMinuteDetails>(() => new CDOTAUserMsg_StatsTeamMinuteDetails());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_StatsTeamMinuteDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsTeamMinuteDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsTeamMinuteDetails(CDOTAUserMsg_StatsTeamMinuteDetails other) : this() {
      _hasBits0 = other._hasBits0;
      playerStats_ = other.playerStats_.Clone();
      towerKills_ = other.towerKills_;
      barrackKills_ = other.barrackKills_;
      availableLaneCreepGold_ = other.availableLaneCreepGold_;
      balanceKillValue_ = other.balanceKillValue_;
      balanceTowerValue_ = other.balanceTowerValue_;
      balanceBarracksValue_ = other.balanceBarracksValue_;
      balanceGoldValue_ = other.balanceGoldValue_;
      balanceXpValue_ = other.balanceXpValue_;
      lanePerformance_ = other.lanePerformance_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsTeamMinuteDetails Clone() {
      return new CDOTAUserMsg_StatsTeamMinuteDetails(this);
    }

    /// <summary>Field number for the "player_stats" field.</summary>
    public const int PlayerStatsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroMinuteDetails> _repeated_playerStats_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroMinuteDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroMinuteDetails> playerStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroMinuteDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroMinuteDetails> PlayerStats {
      get { return playerStats_; }
    }

    /// <summary>Field number for the "tower_kills" field.</summary>
    public const int TowerKillsFieldNumber = 2;
    private readonly static uint TowerKillsDefaultValue = 0;

    private uint towerKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TowerKills {
      get { if ((_hasBits0 & 1) != 0) { return towerKills_; } else { return TowerKillsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        towerKills_ = value;
      }
    }
    /// <summary>Gets whether the "tower_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTowerKills {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tower_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTowerKills() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "barrack_kills" field.</summary>
    public const int BarrackKillsFieldNumber = 3;
    private readonly static uint BarrackKillsDefaultValue = 0;

    private uint barrackKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BarrackKills {
      get { if ((_hasBits0 & 2) != 0) { return barrackKills_; } else { return BarrackKillsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        barrackKills_ = value;
      }
    }
    /// <summary>Gets whether the "barrack_kills" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBarrackKills {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "barrack_kills" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBarrackKills() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "available_lane_creep_gold" field.</summary>
    public const int AvailableLaneCreepGoldFieldNumber = 4;
    private readonly static uint AvailableLaneCreepGoldDefaultValue = 0;

    private uint availableLaneCreepGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AvailableLaneCreepGold {
      get { if ((_hasBits0 & 4) != 0) { return availableLaneCreepGold_; } else { return AvailableLaneCreepGoldDefaultValue; } }
      set {
        _hasBits0 |= 4;
        availableLaneCreepGold_ = value;
      }
    }
    /// <summary>Gets whether the "available_lane_creep_gold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvailableLaneCreepGold {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "available_lane_creep_gold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvailableLaneCreepGold() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "balance_kill_value" field.</summary>
    public const int BalanceKillValueFieldNumber = 5;
    private readonly static uint BalanceKillValueDefaultValue = 0;

    private uint balanceKillValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BalanceKillValue {
      get { if ((_hasBits0 & 8) != 0) { return balanceKillValue_; } else { return BalanceKillValueDefaultValue; } }
      set {
        _hasBits0 |= 8;
        balanceKillValue_ = value;
      }
    }
    /// <summary>Gets whether the "balance_kill_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBalanceKillValue {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "balance_kill_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBalanceKillValue() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "balance_tower_value" field.</summary>
    public const int BalanceTowerValueFieldNumber = 6;
    private readonly static uint BalanceTowerValueDefaultValue = 0;

    private uint balanceTowerValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BalanceTowerValue {
      get { if ((_hasBits0 & 16) != 0) { return balanceTowerValue_; } else { return BalanceTowerValueDefaultValue; } }
      set {
        _hasBits0 |= 16;
        balanceTowerValue_ = value;
      }
    }
    /// <summary>Gets whether the "balance_tower_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBalanceTowerValue {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "balance_tower_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBalanceTowerValue() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "balance_barracks_value" field.</summary>
    public const int BalanceBarracksValueFieldNumber = 7;
    private readonly static uint BalanceBarracksValueDefaultValue = 0;

    private uint balanceBarracksValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BalanceBarracksValue {
      get { if ((_hasBits0 & 32) != 0) { return balanceBarracksValue_; } else { return BalanceBarracksValueDefaultValue; } }
      set {
        _hasBits0 |= 32;
        balanceBarracksValue_ = value;
      }
    }
    /// <summary>Gets whether the "balance_barracks_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBalanceBarracksValue {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "balance_barracks_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBalanceBarracksValue() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "balance_gold_value" field.</summary>
    public const int BalanceGoldValueFieldNumber = 8;
    private readonly static uint BalanceGoldValueDefaultValue = 0;

    private uint balanceGoldValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BalanceGoldValue {
      get { if ((_hasBits0 & 64) != 0) { return balanceGoldValue_; } else { return BalanceGoldValueDefaultValue; } }
      set {
        _hasBits0 |= 64;
        balanceGoldValue_ = value;
      }
    }
    /// <summary>Gets whether the "balance_gold_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBalanceGoldValue {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "balance_gold_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBalanceGoldValue() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "balance_xp_value" field.</summary>
    public const int BalanceXpValueFieldNumber = 9;
    private readonly static uint BalanceXpValueDefaultValue = 0;

    private uint balanceXpValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BalanceXpValue {
      get { if ((_hasBits0 & 128) != 0) { return balanceXpValue_; } else { return BalanceXpValueDefaultValue; } }
      set {
        _hasBits0 |= 128;
        balanceXpValue_ = value;
      }
    }
    /// <summary>Gets whether the "balance_xp_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBalanceXpValue {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "balance_xp_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBalanceXpValue() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "lane_performance" field.</summary>
    public const int LanePerformanceFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails.Types.LocationPerformance> _repeated_lanePerformance_codec
        = pb::FieldCodec.ForMessage(82, global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails.Types.LocationPerformance.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails.Types.LocationPerformance> lanePerformance_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails.Types.LocationPerformance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails.Types.LocationPerformance> LanePerformance {
      get { return lanePerformance_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_StatsTeamMinuteDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_StatsTeamMinuteDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerStats_.Equals(other.playerStats_)) return false;
      if (TowerKills != other.TowerKills) return false;
      if (BarrackKills != other.BarrackKills) return false;
      if (AvailableLaneCreepGold != other.AvailableLaneCreepGold) return false;
      if (BalanceKillValue != other.BalanceKillValue) return false;
      if (BalanceTowerValue != other.BalanceTowerValue) return false;
      if (BalanceBarracksValue != other.BalanceBarracksValue) return false;
      if (BalanceGoldValue != other.BalanceGoldValue) return false;
      if (BalanceXpValue != other.BalanceXpValue) return false;
      if(!lanePerformance_.Equals(other.lanePerformance_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerStats_.GetHashCode();
      if (HasTowerKills) hash ^= TowerKills.GetHashCode();
      if (HasBarrackKills) hash ^= BarrackKills.GetHashCode();
      if (HasAvailableLaneCreepGold) hash ^= AvailableLaneCreepGold.GetHashCode();
      if (HasBalanceKillValue) hash ^= BalanceKillValue.GetHashCode();
      if (HasBalanceTowerValue) hash ^= BalanceTowerValue.GetHashCode();
      if (HasBalanceBarracksValue) hash ^= BalanceBarracksValue.GetHashCode();
      if (HasBalanceGoldValue) hash ^= BalanceGoldValue.GetHashCode();
      if (HasBalanceXpValue) hash ^= BalanceXpValue.GetHashCode();
      hash ^= lanePerformance_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      playerStats_.WriteTo(output, _repeated_playerStats_codec);
      if (HasTowerKills) {
        output.WriteRawTag(16);
        output.WriteUInt32(TowerKills);
      }
      if (HasBarrackKills) {
        output.WriteRawTag(24);
        output.WriteUInt32(BarrackKills);
      }
      if (HasAvailableLaneCreepGold) {
        output.WriteRawTag(32);
        output.WriteUInt32(AvailableLaneCreepGold);
      }
      if (HasBalanceKillValue) {
        output.WriteRawTag(40);
        output.WriteUInt32(BalanceKillValue);
      }
      if (HasBalanceTowerValue) {
        output.WriteRawTag(48);
        output.WriteUInt32(BalanceTowerValue);
      }
      if (HasBalanceBarracksValue) {
        output.WriteRawTag(56);
        output.WriteUInt32(BalanceBarracksValue);
      }
      if (HasBalanceGoldValue) {
        output.WriteRawTag(64);
        output.WriteUInt32(BalanceGoldValue);
      }
      if (HasBalanceXpValue) {
        output.WriteRawTag(72);
        output.WriteUInt32(BalanceXpValue);
      }
      lanePerformance_.WriteTo(output, _repeated_lanePerformance_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      playerStats_.WriteTo(ref output, _repeated_playerStats_codec);
      if (HasTowerKills) {
        output.WriteRawTag(16);
        output.WriteUInt32(TowerKills);
      }
      if (HasBarrackKills) {
        output.WriteRawTag(24);
        output.WriteUInt32(BarrackKills);
      }
      if (HasAvailableLaneCreepGold) {
        output.WriteRawTag(32);
        output.WriteUInt32(AvailableLaneCreepGold);
      }
      if (HasBalanceKillValue) {
        output.WriteRawTag(40);
        output.WriteUInt32(BalanceKillValue);
      }
      if (HasBalanceTowerValue) {
        output.WriteRawTag(48);
        output.WriteUInt32(BalanceTowerValue);
      }
      if (HasBalanceBarracksValue) {
        output.WriteRawTag(56);
        output.WriteUInt32(BalanceBarracksValue);
      }
      if (HasBalanceGoldValue) {
        output.WriteRawTag(64);
        output.WriteUInt32(BalanceGoldValue);
      }
      if (HasBalanceXpValue) {
        output.WriteRawTag(72);
        output.WriteUInt32(BalanceXpValue);
      }
      lanePerformance_.WriteTo(ref output, _repeated_lanePerformance_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerStats_.CalculateSize(_repeated_playerStats_codec);
      if (HasTowerKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TowerKills);
      }
      if (HasBarrackKills) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BarrackKills);
      }
      if (HasAvailableLaneCreepGold) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvailableLaneCreepGold);
      }
      if (HasBalanceKillValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BalanceKillValue);
      }
      if (HasBalanceTowerValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BalanceTowerValue);
      }
      if (HasBalanceBarracksValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BalanceBarracksValue);
      }
      if (HasBalanceGoldValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BalanceGoldValue);
      }
      if (HasBalanceXpValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BalanceXpValue);
      }
      size += lanePerformance_.CalculateSize(_repeated_lanePerformance_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_StatsTeamMinuteDetails other) {
      if (other == null) {
        return;
      }
      playerStats_.Add(other.playerStats_);
      if (other.HasTowerKills) {
        TowerKills = other.TowerKills;
      }
      if (other.HasBarrackKills) {
        BarrackKills = other.BarrackKills;
      }
      if (other.HasAvailableLaneCreepGold) {
        AvailableLaneCreepGold = other.AvailableLaneCreepGold;
      }
      if (other.HasBalanceKillValue) {
        BalanceKillValue = other.BalanceKillValue;
      }
      if (other.HasBalanceTowerValue) {
        BalanceTowerValue = other.BalanceTowerValue;
      }
      if (other.HasBalanceBarracksValue) {
        BalanceBarracksValue = other.BalanceBarracksValue;
      }
      if (other.HasBalanceGoldValue) {
        BalanceGoldValue = other.BalanceGoldValue;
      }
      if (other.HasBalanceXpValue) {
        BalanceXpValue = other.BalanceXpValue;
      }
      lanePerformance_.Add(other.lanePerformance_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerStats_.AddEntriesFrom(input, _repeated_playerStats_codec);
            break;
          }
          case 16: {
            TowerKills = input.ReadUInt32();
            break;
          }
          case 24: {
            BarrackKills = input.ReadUInt32();
            break;
          }
          case 32: {
            AvailableLaneCreepGold = input.ReadUInt32();
            break;
          }
          case 40: {
            BalanceKillValue = input.ReadUInt32();
            break;
          }
          case 48: {
            BalanceTowerValue = input.ReadUInt32();
            break;
          }
          case 56: {
            BalanceBarracksValue = input.ReadUInt32();
            break;
          }
          case 64: {
            BalanceGoldValue = input.ReadUInt32();
            break;
          }
          case 72: {
            BalanceXpValue = input.ReadUInt32();
            break;
          }
          case 82: {
            lanePerformance_.AddEntriesFrom(input, _repeated_lanePerformance_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            playerStats_.AddEntriesFrom(ref input, _repeated_playerStats_codec);
            break;
          }
          case 16: {
            TowerKills = input.ReadUInt32();
            break;
          }
          case 24: {
            BarrackKills = input.ReadUInt32();
            break;
          }
          case 32: {
            AvailableLaneCreepGold = input.ReadUInt32();
            break;
          }
          case 40: {
            BalanceKillValue = input.ReadUInt32();
            break;
          }
          case 48: {
            BalanceTowerValue = input.ReadUInt32();
            break;
          }
          case 56: {
            BalanceBarracksValue = input.ReadUInt32();
            break;
          }
          case 64: {
            BalanceGoldValue = input.ReadUInt32();
            break;
          }
          case 72: {
            BalanceXpValue = input.ReadUInt32();
            break;
          }
          case 82: {
            lanePerformance_.AddEntriesFrom(ref input, _repeated_lanePerformance_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_StatsTeamMinuteDetails message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class LocationPerformance : pb::IMessage<LocationPerformance>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<LocationPerformance> _parser = new pb::MessageParser<LocationPerformance>(() => new LocationPerformance());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LocationPerformance> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocationPerformance() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocationPerformance(LocationPerformance other) : this() {
          _hasBits0 = other._hasBits0;
          locationCategory_ = other.locationCategory_;
          statType_ = other.statType_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocationPerformance Clone() {
          return new LocationPerformance(this);
        }

        /// <summary>Field number for the "location_category" field.</summary>
        public const int LocationCategoryFieldNumber = 1;
        private readonly static uint LocationCategoryDefaultValue = 0;

        private uint locationCategory_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LocationCategory {
          get { if ((_hasBits0 & 1) != 0) { return locationCategory_; } else { return LocationCategoryDefaultValue; } }
          set {
            _hasBits0 |= 1;
            locationCategory_ = value;
          }
        }
        /// <summary>Gets whether the "location_category" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLocationCategory {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "location_category" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLocationCategory() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "stat_type" field.</summary>
        public const int StatTypeFieldNumber = 2;
        private readonly static uint StatTypeDefaultValue = 0;

        private uint statType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StatType {
          get { if ((_hasBits0 & 2) != 0) { return statType_; } else { return StatTypeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            statType_ = value;
          }
        }
        /// <summary>Gets whether the "stat_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStatType {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "stat_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStatType() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 3;
        private readonly static uint ValueDefaultValue = 0;

        private uint value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Value {
          get { if ((_hasBits0 & 4) != 0) { return value_; } else { return ValueDefaultValue; } }
          set {
            _hasBits0 |= 4;
            value_ = value;
          }
        }
        /// <summary>Gets whether the "value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValue {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LocationPerformance);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LocationPerformance other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LocationCategory != other.LocationCategory) return false;
          if (StatType != other.StatType) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasLocationCategory) hash ^= LocationCategory.GetHashCode();
          if (HasStatType) hash ^= StatType.GetHashCode();
          if (HasValue) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasLocationCategory) {
            output.WriteRawTag(8);
            output.WriteUInt32(LocationCategory);
          }
          if (HasStatType) {
            output.WriteRawTag(16);
            output.WriteUInt32(StatType);
          }
          if (HasValue) {
            output.WriteRawTag(24);
            output.WriteUInt32(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasLocationCategory) {
            output.WriteRawTag(8);
            output.WriteUInt32(LocationCategory);
          }
          if (HasStatType) {
            output.WriteRawTag(16);
            output.WriteUInt32(StatType);
          }
          if (HasValue) {
            output.WriteRawTag(24);
            output.WriteUInt32(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasLocationCategory) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocationCategory);
          }
          if (HasStatType) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatType);
          }
          if (HasValue) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LocationPerformance other) {
          if (other == null) {
            return;
          }
          if (other.HasLocationCategory) {
            LocationCategory = other.LocationCategory;
          }
          if (other.HasStatType) {
            StatType = other.StatType;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                LocationCategory = input.ReadUInt32();
                break;
              }
              case 16: {
                StatType = input.ReadUInt32();
                break;
              }
              case 24: {
                Value = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                LocationCategory = input.ReadUInt32();
                break;
              }
              case 16: {
                StatType = input.ReadUInt32();
                break;
              }
              case 24: {
                Value = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_StatsPlayerKillShare : pb::IMessage<CDOTAUserMsg_StatsPlayerKillShare>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_StatsPlayerKillShare> _parser = new pb::MessageParser<CDOTAUserMsg_StatsPlayerKillShare>(() => new CDOTAUserMsg_StatsPlayerKillShare());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_StatsPlayerKillShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsPlayerKillShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsPlayerKillShare(CDOTAUserMsg_StatsPlayerKillShare other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      killSharePercent_ = other.killSharePercent_;
      playerLocX_ = other.playerLocX_;
      playerLocY_ = other.playerLocY_;
      healthPercent_ = other.healthPercent_;
      manaPercent_ = other.manaPercent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsPlayerKillShare Clone() {
      return new CDOTAUserMsg_StatsPlayerKillShare(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "kill_share_percent" field.</summary>
    public const int KillSharePercentFieldNumber = 2;
    private readonly static float KillSharePercentDefaultValue = 0F;

    private float killSharePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KillSharePercent {
      get { if ((_hasBits0 & 2) != 0) { return killSharePercent_; } else { return KillSharePercentDefaultValue; } }
      set {
        _hasBits0 |= 2;
        killSharePercent_ = value;
      }
    }
    /// <summary>Gets whether the "kill_share_percent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKillSharePercent {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "kill_share_percent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKillSharePercent() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "player_loc_x" field.</summary>
    public const int PlayerLocXFieldNumber = 3;
    private readonly static float PlayerLocXDefaultValue = 0F;

    private float playerLocX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlayerLocX {
      get { if ((_hasBits0 & 4) != 0) { return playerLocX_; } else { return PlayerLocXDefaultValue; } }
      set {
        _hasBits0 |= 4;
        playerLocX_ = value;
      }
    }
    /// <summary>Gets whether the "player_loc_x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerLocX {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "player_loc_x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerLocX() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "player_loc_y" field.</summary>
    public const int PlayerLocYFieldNumber = 4;
    private readonly static float PlayerLocYDefaultValue = 0F;

    private float playerLocY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlayerLocY {
      get { if ((_hasBits0 & 8) != 0) { return playerLocY_; } else { return PlayerLocYDefaultValue; } }
      set {
        _hasBits0 |= 8;
        playerLocY_ = value;
      }
    }
    /// <summary>Gets whether the "player_loc_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerLocY {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "player_loc_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerLocY() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "health_percent" field.</summary>
    public const int HealthPercentFieldNumber = 5;
    private readonly static float HealthPercentDefaultValue = 0F;

    private float healthPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HealthPercent {
      get { if ((_hasBits0 & 16) != 0) { return healthPercent_; } else { return HealthPercentDefaultValue; } }
      set {
        _hasBits0 |= 16;
        healthPercent_ = value;
      }
    }
    /// <summary>Gets whether the "health_percent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHealthPercent {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "health_percent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHealthPercent() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "mana_percent" field.</summary>
    public const int ManaPercentFieldNumber = 6;
    private readonly static float ManaPercentDefaultValue = 0F;

    private float manaPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ManaPercent {
      get { if ((_hasBits0 & 32) != 0) { return manaPercent_; } else { return ManaPercentDefaultValue; } }
      set {
        _hasBits0 |= 32;
        manaPercent_ = value;
      }
    }
    /// <summary>Gets whether the "mana_percent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasManaPercent {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "mana_percent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearManaPercent() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_StatsPlayerKillShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_StatsPlayerKillShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(KillSharePercent, other.KillSharePercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlayerLocX, other.PlayerLocX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlayerLocY, other.PlayerLocY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HealthPercent, other.HealthPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ManaPercent, other.ManaPercent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasKillSharePercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(KillSharePercent);
      if (HasPlayerLocX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlayerLocX);
      if (HasPlayerLocY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlayerLocY);
      if (HasHealthPercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HealthPercent);
      if (HasManaPercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ManaPercent);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasKillSharePercent) {
        output.WriteRawTag(21);
        output.WriteFloat(KillSharePercent);
      }
      if (HasPlayerLocX) {
        output.WriteRawTag(29);
        output.WriteFloat(PlayerLocX);
      }
      if (HasPlayerLocY) {
        output.WriteRawTag(37);
        output.WriteFloat(PlayerLocY);
      }
      if (HasHealthPercent) {
        output.WriteRawTag(45);
        output.WriteFloat(HealthPercent);
      }
      if (HasManaPercent) {
        output.WriteRawTag(53);
        output.WriteFloat(ManaPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasKillSharePercent) {
        output.WriteRawTag(21);
        output.WriteFloat(KillSharePercent);
      }
      if (HasPlayerLocX) {
        output.WriteRawTag(29);
        output.WriteFloat(PlayerLocX);
      }
      if (HasPlayerLocY) {
        output.WriteRawTag(37);
        output.WriteFloat(PlayerLocY);
      }
      if (HasHealthPercent) {
        output.WriteRawTag(45);
        output.WriteFloat(HealthPercent);
      }
      if (HasManaPercent) {
        output.WriteRawTag(53);
        output.WriteFloat(ManaPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasKillSharePercent) {
        size += 1 + 4;
      }
      if (HasPlayerLocX) {
        size += 1 + 4;
      }
      if (HasPlayerLocY) {
        size += 1 + 4;
      }
      if (HasHealthPercent) {
        size += 1 + 4;
      }
      if (HasManaPercent) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_StatsPlayerKillShare other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasKillSharePercent) {
        KillSharePercent = other.KillSharePercent;
      }
      if (other.HasPlayerLocX) {
        PlayerLocX = other.PlayerLocX;
      }
      if (other.HasPlayerLocY) {
        PlayerLocY = other.PlayerLocY;
      }
      if (other.HasHealthPercent) {
        HealthPercent = other.HealthPercent;
      }
      if (other.HasManaPercent) {
        ManaPercent = other.ManaPercent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 21: {
            KillSharePercent = input.ReadFloat();
            break;
          }
          case 29: {
            PlayerLocX = input.ReadFloat();
            break;
          }
          case 37: {
            PlayerLocY = input.ReadFloat();
            break;
          }
          case 45: {
            HealthPercent = input.ReadFloat();
            break;
          }
          case 53: {
            ManaPercent = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 21: {
            KillSharePercent = input.ReadFloat();
            break;
          }
          case 29: {
            PlayerLocX = input.ReadFloat();
            break;
          }
          case 37: {
            PlayerLocY = input.ReadFloat();
            break;
          }
          case 45: {
            HealthPercent = input.ReadFloat();
            break;
          }
          case 53: {
            ManaPercent = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_StatsKillDetails : pb::IMessage<CDOTAUserMsg_StatsKillDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_StatsKillDetails> _parser = new pb::MessageParser<CDOTAUserMsg_StatsKillDetails>(() => new CDOTAUserMsg_StatsKillDetails());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_StatsKillDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsKillDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsKillDetails(CDOTAUserMsg_StatsKillDetails other) : this() {
      _hasBits0 = other._hasBits0;
      victimId_ = other.victimId_;
      killShares_ = other.killShares_.Clone();
      damageToKill_ = other.damageToKill_;
      effectiveHealth_ = other.effectiveHealth_;
      deathTime_ = other.deathTime_;
      killerId_ = other.killerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsKillDetails Clone() {
      return new CDOTAUserMsg_StatsKillDetails(this);
    }

    /// <summary>Field number for the "victim_id" field.</summary>
    public const int VictimIdFieldNumber = 1;
    private readonly static int VictimIdDefaultValue = -1;

    private int victimId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VictimId {
      get { if ((_hasBits0 & 1) != 0) { return victimId_; } else { return VictimIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        victimId_ = value;
      }
    }
    /// <summary>Gets whether the "victim_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVictimId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "victim_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVictimId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "kill_shares" field.</summary>
    public const int KillSharesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsPlayerKillShare> _repeated_killShares_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CDOTAUserMsg_StatsPlayerKillShare.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsPlayerKillShare> killShares_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsPlayerKillShare>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsPlayerKillShare> KillShares {
      get { return killShares_; }
    }

    /// <summary>Field number for the "damage_to_kill" field.</summary>
    public const int DamageToKillFieldNumber = 3;
    private readonly static uint DamageToKillDefaultValue = 0;

    private uint damageToKill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageToKill {
      get { if ((_hasBits0 & 2) != 0) { return damageToKill_; } else { return DamageToKillDefaultValue; } }
      set {
        _hasBits0 |= 2;
        damageToKill_ = value;
      }
    }
    /// <summary>Gets whether the "damage_to_kill" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageToKill {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "damage_to_kill" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageToKill() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "effective_health" field.</summary>
    public const int EffectiveHealthFieldNumber = 4;
    private readonly static uint EffectiveHealthDefaultValue = 0;

    private uint effectiveHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectiveHealth {
      get { if ((_hasBits0 & 4) != 0) { return effectiveHealth_; } else { return EffectiveHealthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        effectiveHealth_ = value;
      }
    }
    /// <summary>Gets whether the "effective_health" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEffectiveHealth {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "effective_health" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEffectiveHealth() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "death_time" field.</summary>
    public const int DeathTimeFieldNumber = 5;
    private readonly static float DeathTimeDefaultValue = 0F;

    private float deathTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeathTime {
      get { if ((_hasBits0 & 8) != 0) { return deathTime_; } else { return DeathTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        deathTime_ = value;
      }
    }
    /// <summary>Gets whether the "death_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeathTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "death_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeathTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "killer_id" field.</summary>
    public const int KillerIdFieldNumber = 6;
    private readonly static int KillerIdDefaultValue = -1;

    private int killerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillerId {
      get { if ((_hasBits0 & 16) != 0) { return killerId_; } else { return KillerIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        killerId_ = value;
      }
    }
    /// <summary>Gets whether the "killer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKillerId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "killer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKillerId() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_StatsKillDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_StatsKillDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VictimId != other.VictimId) return false;
      if(!killShares_.Equals(other.killShares_)) return false;
      if (DamageToKill != other.DamageToKill) return false;
      if (EffectiveHealth != other.EffectiveHealth) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeathTime, other.DeathTime)) return false;
      if (KillerId != other.KillerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVictimId) hash ^= VictimId.GetHashCode();
      hash ^= killShares_.GetHashCode();
      if (HasDamageToKill) hash ^= DamageToKill.GetHashCode();
      if (HasEffectiveHealth) hash ^= EffectiveHealth.GetHashCode();
      if (HasDeathTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeathTime);
      if (HasKillerId) hash ^= KillerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVictimId) {
        output.WriteRawTag(8);
        output.WriteInt32(VictimId);
      }
      killShares_.WriteTo(output, _repeated_killShares_codec);
      if (HasDamageToKill) {
        output.WriteRawTag(24);
        output.WriteUInt32(DamageToKill);
      }
      if (HasEffectiveHealth) {
        output.WriteRawTag(32);
        output.WriteUInt32(EffectiveHealth);
      }
      if (HasDeathTime) {
        output.WriteRawTag(45);
        output.WriteFloat(DeathTime);
      }
      if (HasKillerId) {
        output.WriteRawTag(48);
        output.WriteInt32(KillerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVictimId) {
        output.WriteRawTag(8);
        output.WriteInt32(VictimId);
      }
      killShares_.WriteTo(ref output, _repeated_killShares_codec);
      if (HasDamageToKill) {
        output.WriteRawTag(24);
        output.WriteUInt32(DamageToKill);
      }
      if (HasEffectiveHealth) {
        output.WriteRawTag(32);
        output.WriteUInt32(EffectiveHealth);
      }
      if (HasDeathTime) {
        output.WriteRawTag(45);
        output.WriteFloat(DeathTime);
      }
      if (HasKillerId) {
        output.WriteRawTag(48);
        output.WriteInt32(KillerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVictimId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VictimId);
      }
      size += killShares_.CalculateSize(_repeated_killShares_codec);
      if (HasDamageToKill) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageToKill);
      }
      if (HasEffectiveHealth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectiveHealth);
      }
      if (HasDeathTime) {
        size += 1 + 4;
      }
      if (HasKillerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_StatsKillDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasVictimId) {
        VictimId = other.VictimId;
      }
      killShares_.Add(other.killShares_);
      if (other.HasDamageToKill) {
        DamageToKill = other.DamageToKill;
      }
      if (other.HasEffectiveHealth) {
        EffectiveHealth = other.EffectiveHealth;
      }
      if (other.HasDeathTime) {
        DeathTime = other.DeathTime;
      }
      if (other.HasKillerId) {
        KillerId = other.KillerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VictimId = input.ReadInt32();
            break;
          }
          case 18: {
            killShares_.AddEntriesFrom(input, _repeated_killShares_codec);
            break;
          }
          case 24: {
            DamageToKill = input.ReadUInt32();
            break;
          }
          case 32: {
            EffectiveHealth = input.ReadUInt32();
            break;
          }
          case 45: {
            DeathTime = input.ReadFloat();
            break;
          }
          case 48: {
            KillerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            VictimId = input.ReadInt32();
            break;
          }
          case 18: {
            killShares_.AddEntriesFrom(ref input, _repeated_killShares_codec);
            break;
          }
          case 24: {
            DamageToKill = input.ReadUInt32();
            break;
          }
          case 32: {
            EffectiveHealth = input.ReadUInt32();
            break;
          }
          case 45: {
            DeathTime = input.ReadFloat();
            break;
          }
          case 48: {
            KillerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_StatsMatchDetails : pb::IMessage<CDOTAUserMsg_StatsMatchDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_StatsMatchDetails> _parser = new pb::MessageParser<CDOTAUserMsg_StatsMatchDetails>(() => new CDOTAUserMsg_StatsMatchDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_StatsMatchDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsMatchDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsMatchDetails(CDOTAUserMsg_StatsMatchDetails other) : this() {
      heroLookup_ = other.heroLookup_.Clone();
      radiantStats_ = other.radiantStats_.Clone();
      direStats_ = other.direStats_.Clone();
      radiantKills_ = other.radiantKills_.Clone();
      direKills_ = other.direKills_.Clone();
      fightDetails_ = other.fightDetails_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_StatsMatchDetails Clone() {
      return new CDOTAUserMsg_StatsMatchDetails(this);
    }

    /// <summary>Field number for the "hero_lookup" field.</summary>
    public const int HeroLookupFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroLookup> _repeated_heroLookup_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroLookup.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroLookup> heroLookup_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroLookup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsHeroLookup> HeroLookup {
      get { return heroLookup_; }
    }

    /// <summary>Field number for the "radiant_stats" field.</summary>
    public const int RadiantStatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails> _repeated_radiantStats_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails> radiantStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails> RadiantStats {
      get { return radiantStats_; }
    }

    /// <summary>Field number for the "dire_stats" field.</summary>
    public const int DireStatsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails> _repeated_direStats_codec
        = pb::FieldCodec.ForMessage(26, global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails> direStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsTeamMinuteDetails> DireStats {
      get { return direStats_; }
    }

    /// <summary>Field number for the "radiant_kills" field.</summary>
    public const int RadiantKillsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails> _repeated_radiantKills_codec
        = pb::FieldCodec.ForMessage(34, global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails> radiantKills_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails> RadiantKills {
      get { return radiantKills_; }
    }

    /// <summary>Field number for the "dire_kills" field.</summary>
    public const int DireKillsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails> _repeated_direKills_codec
        = pb::FieldCodec.ForMessage(42, global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails> direKills_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsKillDetails> DireKills {
      get { return direKills_; }
    }

    /// <summary>Field number for the "fight_details" field.</summary>
    public const int FightDetailsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightDetails> _repeated_fightDetails_codec
        = pb::FieldCodec.ForMessage(50, global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightDetails.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightDetails> fightDetails_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightDetails> FightDetails {
      get { return fightDetails_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_StatsMatchDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_StatsMatchDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroLookup_.Equals(other.heroLookup_)) return false;
      if(!radiantStats_.Equals(other.radiantStats_)) return false;
      if(!direStats_.Equals(other.direStats_)) return false;
      if(!radiantKills_.Equals(other.radiantKills_)) return false;
      if(!direKills_.Equals(other.direKills_)) return false;
      if(!fightDetails_.Equals(other.fightDetails_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroLookup_.GetHashCode();
      hash ^= radiantStats_.GetHashCode();
      hash ^= direStats_.GetHashCode();
      hash ^= radiantKills_.GetHashCode();
      hash ^= direKills_.GetHashCode();
      hash ^= fightDetails_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      heroLookup_.WriteTo(output, _repeated_heroLookup_codec);
      radiantStats_.WriteTo(output, _repeated_radiantStats_codec);
      direStats_.WriteTo(output, _repeated_direStats_codec);
      radiantKills_.WriteTo(output, _repeated_radiantKills_codec);
      direKills_.WriteTo(output, _repeated_direKills_codec);
      fightDetails_.WriteTo(output, _repeated_fightDetails_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      heroLookup_.WriteTo(ref output, _repeated_heroLookup_codec);
      radiantStats_.WriteTo(ref output, _repeated_radiantStats_codec);
      direStats_.WriteTo(ref output, _repeated_direStats_codec);
      radiantKills_.WriteTo(ref output, _repeated_radiantKills_codec);
      direKills_.WriteTo(ref output, _repeated_direKills_codec);
      fightDetails_.WriteTo(ref output, _repeated_fightDetails_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroLookup_.CalculateSize(_repeated_heroLookup_codec);
      size += radiantStats_.CalculateSize(_repeated_radiantStats_codec);
      size += direStats_.CalculateSize(_repeated_direStats_codec);
      size += radiantKills_.CalculateSize(_repeated_radiantKills_codec);
      size += direKills_.CalculateSize(_repeated_direKills_codec);
      size += fightDetails_.CalculateSize(_repeated_fightDetails_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_StatsMatchDetails other) {
      if (other == null) {
        return;
      }
      heroLookup_.Add(other.heroLookup_);
      radiantStats_.Add(other.radiantStats_);
      direStats_.Add(other.direStats_);
      radiantKills_.Add(other.radiantKills_);
      direKills_.Add(other.direKills_);
      fightDetails_.Add(other.fightDetails_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heroLookup_.AddEntriesFrom(input, _repeated_heroLookup_codec);
            break;
          }
          case 18: {
            radiantStats_.AddEntriesFrom(input, _repeated_radiantStats_codec);
            break;
          }
          case 26: {
            direStats_.AddEntriesFrom(input, _repeated_direStats_codec);
            break;
          }
          case 34: {
            radiantKills_.AddEntriesFrom(input, _repeated_radiantKills_codec);
            break;
          }
          case 42: {
            direKills_.AddEntriesFrom(input, _repeated_direKills_codec);
            break;
          }
          case 50: {
            fightDetails_.AddEntriesFrom(input, _repeated_fightDetails_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            heroLookup_.AddEntriesFrom(ref input, _repeated_heroLookup_codec);
            break;
          }
          case 18: {
            radiantStats_.AddEntriesFrom(ref input, _repeated_radiantStats_codec);
            break;
          }
          case 26: {
            direStats_.AddEntriesFrom(ref input, _repeated_direStats_codec);
            break;
          }
          case 34: {
            radiantKills_.AddEntriesFrom(ref input, _repeated_radiantKills_codec);
            break;
          }
          case 42: {
            direKills_.AddEntriesFrom(ref input, _repeated_direKills_codec);
            break;
          }
          case 50: {
            fightDetails_.AddEntriesFrom(ref input, _repeated_fightDetails_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_StatsMatchDetails message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CDOTAUserMsg_StatsFightTeamDetails : pb::IMessage<CDOTAUserMsg_StatsFightTeamDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CDOTAUserMsg_StatsFightTeamDetails> _parser = new pb::MessageParser<CDOTAUserMsg_StatsFightTeamDetails>(() => new CDOTAUserMsg_StatsFightTeamDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CDOTAUserMsg_StatsFightTeamDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDOTAUserMsg_StatsFightTeamDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDOTAUserMsg_StatsFightTeamDetails(CDOTAUserMsg_StatsFightTeamDetails other) : this() {
          _hasBits0 = other._hasBits0;
          participants_ = other.participants_.Clone();
          deaths_ = other.deaths_.Clone();
          goldDelta_ = other.goldDelta_;
          xpDelta_ = other.xpDelta_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDOTAUserMsg_StatsFightTeamDetails Clone() {
          return new CDOTAUserMsg_StatsFightTeamDetails(this);
        }

        /// <summary>Field number for the "participants" field.</summary>
        public const int ParticipantsFieldNumber = 1;
        private static readonly pb::FieldCodec<int> _repeated_participants_codec
            = pb::FieldCodec.ForInt32(8);
        private readonly pbc::RepeatedField<int> participants_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Participants {
          get { return participants_; }
        }

        /// <summary>Field number for the "deaths" field.</summary>
        public const int DeathsFieldNumber = 2;
        private static readonly pb::FieldCodec<int> _repeated_deaths_codec
            = pb::FieldCodec.ForInt32(16);
        private readonly pbc::RepeatedField<int> deaths_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Deaths {
          get { return deaths_; }
        }

        /// <summary>Field number for the "gold_delta" field.</summary>
        public const int GoldDeltaFieldNumber = 3;
        private readonly static uint GoldDeltaDefaultValue = 0;

        private uint goldDelta_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GoldDelta {
          get { if ((_hasBits0 & 1) != 0) { return goldDelta_; } else { return GoldDeltaDefaultValue; } }
          set {
            _hasBits0 |= 1;
            goldDelta_ = value;
          }
        }
        /// <summary>Gets whether the "gold_delta" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGoldDelta {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "gold_delta" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGoldDelta() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "xp_delta" field.</summary>
        public const int XpDeltaFieldNumber = 4;
        private readonly static uint XpDeltaDefaultValue = 0;

        private uint xpDelta_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint XpDelta {
          get { if ((_hasBits0 & 2) != 0) { return xpDelta_; } else { return XpDeltaDefaultValue; } }
          set {
            _hasBits0 |= 2;
            xpDelta_ = value;
          }
        }
        /// <summary>Gets whether the "xp_delta" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasXpDelta {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "xp_delta" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearXpDelta() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CDOTAUserMsg_StatsFightTeamDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CDOTAUserMsg_StatsFightTeamDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!participants_.Equals(other.participants_)) return false;
          if(!deaths_.Equals(other.deaths_)) return false;
          if (GoldDelta != other.GoldDelta) return false;
          if (XpDelta != other.XpDelta) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= participants_.GetHashCode();
          hash ^= deaths_.GetHashCode();
          if (HasGoldDelta) hash ^= GoldDelta.GetHashCode();
          if (HasXpDelta) hash ^= XpDelta.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          participants_.WriteTo(output, _repeated_participants_codec);
          deaths_.WriteTo(output, _repeated_deaths_codec);
          if (HasGoldDelta) {
            output.WriteRawTag(24);
            output.WriteUInt32(GoldDelta);
          }
          if (HasXpDelta) {
            output.WriteRawTag(32);
            output.WriteUInt32(XpDelta);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          participants_.WriteTo(ref output, _repeated_participants_codec);
          deaths_.WriteTo(ref output, _repeated_deaths_codec);
          if (HasGoldDelta) {
            output.WriteRawTag(24);
            output.WriteUInt32(GoldDelta);
          }
          if (HasXpDelta) {
            output.WriteRawTag(32);
            output.WriteUInt32(XpDelta);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += participants_.CalculateSize(_repeated_participants_codec);
          size += deaths_.CalculateSize(_repeated_deaths_codec);
          if (HasGoldDelta) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldDelta);
          }
          if (HasXpDelta) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(XpDelta);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CDOTAUserMsg_StatsFightTeamDetails other) {
          if (other == null) {
            return;
          }
          participants_.Add(other.participants_);
          deaths_.Add(other.deaths_);
          if (other.HasGoldDelta) {
            GoldDelta = other.GoldDelta;
          }
          if (other.HasXpDelta) {
            XpDelta = other.XpDelta;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                participants_.AddEntriesFrom(input, _repeated_participants_codec);
                break;
              }
              case 18:
              case 16: {
                deaths_.AddEntriesFrom(input, _repeated_deaths_codec);
                break;
              }
              case 24: {
                GoldDelta = input.ReadUInt32();
                break;
              }
              case 32: {
                XpDelta = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 8: {
                participants_.AddEntriesFrom(ref input, _repeated_participants_codec);
                break;
              }
              case 18:
              case 16: {
                deaths_.AddEntriesFrom(ref input, _repeated_deaths_codec);
                break;
              }
              case 24: {
                GoldDelta = input.ReadUInt32();
                break;
              }
              case 32: {
                XpDelta = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class CDOTAUserMsg_StatsFightDetails : pb::IMessage<CDOTAUserMsg_StatsFightDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CDOTAUserMsg_StatsFightDetails> _parser = new pb::MessageParser<CDOTAUserMsg_StatsFightDetails>(() => new CDOTAUserMsg_StatsFightDetails());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CDOTAUserMsg_StatsFightDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDOTAUserMsg_StatsFightDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDOTAUserMsg_StatsFightDetails(CDOTAUserMsg_StatsFightDetails other) : this() {
          _hasBits0 = other._hasBits0;
          startTime_ = other.startTime_;
          endTime_ = other.endTime_;
          radiantFightDetails_ = other.radiantFightDetails_ != null ? other.radiantFightDetails_.Clone() : null;
          direFightDetails_ = other.direFightDetails_ != null ? other.direFightDetails_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDOTAUserMsg_StatsFightDetails Clone() {
          return new CDOTAUserMsg_StatsFightDetails(this);
        }

        /// <summary>Field number for the "start_time" field.</summary>
        public const int StartTimeFieldNumber = 1;
        private readonly static float StartTimeDefaultValue = 0F;

        private float startTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float StartTime {
          get { if ((_hasBits0 & 1) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            startTime_ = value;
          }
        }
        /// <summary>Gets whether the "start_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStartTime {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "start_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStartTime() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "end_time" field.</summary>
        public const int EndTimeFieldNumber = 2;
        private readonly static float EndTimeDefaultValue = 0F;

        private float endTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float EndTime {
          get { if ((_hasBits0 & 2) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            endTime_ = value;
          }
        }
        /// <summary>Gets whether the "end_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEndTime {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "end_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEndTime() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "radiant_fight_details" field.</summary>
        public const int RadiantFightDetailsFieldNumber = 3;
        private global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails radiantFightDetails_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails RadiantFightDetails {
          get { return radiantFightDetails_; }
          set {
            radiantFightDetails_ = value;
          }
        }

        /// <summary>Field number for the "dire_fight_details" field.</summary>
        public const int DireFightDetailsFieldNumber = 4;
        private global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails direFightDetails_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails DireFightDetails {
          get { return direFightDetails_; }
          set {
            direFightDetails_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CDOTAUserMsg_StatsFightDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CDOTAUserMsg_StatsFightDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartTime, other.StartTime)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTime, other.EndTime)) return false;
          if (!object.Equals(RadiantFightDetails, other.RadiantFightDetails)) return false;
          if (!object.Equals(DireFightDetails, other.DireFightDetails)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasStartTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartTime);
          if (HasEndTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTime);
          if (radiantFightDetails_ != null) hash ^= RadiantFightDetails.GetHashCode();
          if (direFightDetails_ != null) hash ^= DireFightDetails.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasStartTime) {
            output.WriteRawTag(13);
            output.WriteFloat(StartTime);
          }
          if (HasEndTime) {
            output.WriteRawTag(21);
            output.WriteFloat(EndTime);
          }
          if (radiantFightDetails_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(RadiantFightDetails);
          }
          if (direFightDetails_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(DireFightDetails);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasStartTime) {
            output.WriteRawTag(13);
            output.WriteFloat(StartTime);
          }
          if (HasEndTime) {
            output.WriteRawTag(21);
            output.WriteFloat(EndTime);
          }
          if (radiantFightDetails_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(RadiantFightDetails);
          }
          if (direFightDetails_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(DireFightDetails);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasStartTime) {
            size += 1 + 4;
          }
          if (HasEndTime) {
            size += 1 + 4;
          }
          if (radiantFightDetails_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RadiantFightDetails);
          }
          if (direFightDetails_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DireFightDetails);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CDOTAUserMsg_StatsFightDetails other) {
          if (other == null) {
            return;
          }
          if (other.HasStartTime) {
            StartTime = other.StartTime;
          }
          if (other.HasEndTime) {
            EndTime = other.EndTime;
          }
          if (other.radiantFightDetails_ != null) {
            if (radiantFightDetails_ == null) {
              RadiantFightDetails = new global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails();
            }
            RadiantFightDetails.MergeFrom(other.RadiantFightDetails);
          }
          if (other.direFightDetails_ != null) {
            if (direFightDetails_ == null) {
              DireFightDetails = new global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails();
            }
            DireFightDetails.MergeFrom(other.DireFightDetails);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                StartTime = input.ReadFloat();
                break;
              }
              case 21: {
                EndTime = input.ReadFloat();
                break;
              }
              case 26: {
                if (radiantFightDetails_ == null) {
                  RadiantFightDetails = new global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails();
                }
                input.ReadMessage(RadiantFightDetails);
                break;
              }
              case 34: {
                if (direFightDetails_ == null) {
                  DireFightDetails = new global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails();
                }
                input.ReadMessage(DireFightDetails);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                StartTime = input.ReadFloat();
                break;
              }
              case 21: {
                EndTime = input.ReadFloat();
                break;
              }
              case 26: {
                if (radiantFightDetails_ == null) {
                  RadiantFightDetails = new global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails();
                }
                input.ReadMessage(RadiantFightDetails);
                break;
              }
              case 34: {
                if (direFightDetails_ == null) {
                  DireFightDetails = new global::Steam.Protos.Dota2.CDOTAUserMsg_StatsMatchDetails.Types.CDOTAUserMsg_StatsFightTeamDetails();
                }
                input.ReadMessage(DireFightDetails);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_MiniTaunt : pb::IMessage<CDOTAUserMsg_MiniTaunt>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_MiniTaunt> _parser = new pb::MessageParser<CDOTAUserMsg_MiniTaunt>(() => new CDOTAUserMsg_MiniTaunt());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MiniTaunt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MiniTaunt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MiniTaunt(CDOTAUserMsg_MiniTaunt other) : this() {
      _hasBits0 = other._hasBits0;
      tauntingPlayerId_ = other.tauntingPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MiniTaunt Clone() {
      return new CDOTAUserMsg_MiniTaunt(this);
    }

    /// <summary>Field number for the "taunting_player_id" field.</summary>
    public const int TauntingPlayerIdFieldNumber = 1;
    private readonly static int TauntingPlayerIdDefaultValue = -1;

    private int tauntingPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TauntingPlayerId {
      get { if ((_hasBits0 & 1) != 0) { return tauntingPlayerId_; } else { return TauntingPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tauntingPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "taunting_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTauntingPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "taunting_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTauntingPlayerId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MiniTaunt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MiniTaunt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TauntingPlayerId != other.TauntingPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTauntingPlayerId) hash ^= TauntingPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTauntingPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(TauntingPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTauntingPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(TauntingPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTauntingPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TauntingPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MiniTaunt other) {
      if (other == null) {
        return;
      }
      if (other.HasTauntingPlayerId) {
        TauntingPlayerId = other.TauntingPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TauntingPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TauntingPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SpeechBubble : pb::IMessage<CDOTAUserMsg_SpeechBubble>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SpeechBubble> _parser = new pb::MessageParser<CDOTAUserMsg_SpeechBubble>(() => new CDOTAUserMsg_SpeechBubble());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SpeechBubble> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpeechBubble() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpeechBubble(CDOTAUserMsg_SpeechBubble other) : this() {
      _hasBits0 = other._hasBits0;
      destroyAll_ = other.destroyAll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SpeechBubble Clone() {
      return new CDOTAUserMsg_SpeechBubble(this);
    }

    /// <summary>Field number for the "destroy_all" field.</summary>
    public const int DestroyAllFieldNumber = 1;
    private readonly static bool DestroyAllDefaultValue = false;

    private bool destroyAll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DestroyAll {
      get { if ((_hasBits0 & 1) != 0) { return destroyAll_; } else { return DestroyAllDefaultValue; } }
      set {
        _hasBits0 |= 1;
        destroyAll_ = value;
      }
    }
    /// <summary>Gets whether the "destroy_all" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestroyAll {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "destroy_all" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestroyAll() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SpeechBubble);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SpeechBubble other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DestroyAll != other.DestroyAll) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDestroyAll) hash ^= DestroyAll.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDestroyAll) {
        output.WriteRawTag(8);
        output.WriteBool(DestroyAll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDestroyAll) {
        output.WriteRawTag(8);
        output.WriteBool(DestroyAll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDestroyAll) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SpeechBubble other) {
      if (other == null) {
        return;
      }
      if (other.HasDestroyAll) {
        DestroyAll = other.DestroyAll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DestroyAll = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DestroyAll = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CustomHeaderMessage : pb::IMessage<CDOTAUserMsg_CustomHeaderMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CustomHeaderMessage> _parser = new pb::MessageParser<CDOTAUserMsg_CustomHeaderMessage>(() => new CDOTAUserMsg_CustomHeaderMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CustomHeaderMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHeaderMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHeaderMessage(CDOTAUserMsg_CustomHeaderMessage other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      duration_ = other.duration_;
      message_ = other.message_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHeaderMessage Clone() {
      return new CDOTAUserMsg_CustomHeaderMessage(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private readonly static float DurationDefaultValue = 0F;

    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { if ((_hasBits0 & 2) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private readonly static int ValueDefaultValue = 0;

    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { if ((_hasBits0 & 4) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 4;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CustomHeaderMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CustomHeaderMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (Message != other.Message) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasDuration) {
        output.WriteRawTag(21);
        output.WriteFloat(Duration);
      }
      if (HasMessage) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (HasValue) {
        output.WriteRawTag(32);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasDuration) {
        output.WriteRawTag(21);
        output.WriteFloat(Duration);
      }
      if (HasMessage) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (HasValue) {
        output.WriteRawTag(32);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasDuration) {
        size += 1 + 4;
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CustomHeaderMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 21: {
            Duration = input.ReadFloat();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 21: {
            Duration = input.ReadFloat();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgHeroAbilityStat : pb::IMessage<CMsgHeroAbilityStat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgHeroAbilityStat> _parser = new pb::MessageParser<CMsgHeroAbilityStat>(() => new CMsgHeroAbilityStat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgHeroAbilityStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroAbilityStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroAbilityStat(CMsgHeroAbilityStat other) : this() {
      _hasBits0 = other._hasBits0;
      statType_ = other.statType_;
      intValue_ = other.intValue_;
      floatValue_ = other.floatValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgHeroAbilityStat Clone() {
      return new CMsgHeroAbilityStat(this);
    }

    /// <summary>Field number for the "stat_type" field.</summary>
    public const int StatTypeFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EHeroStatType StatTypeDefaultValue = global::Steam.Protos.Dota2.EHeroStatType.KEheroStatTypeNone;

    private global::Steam.Protos.Dota2.EHeroStatType statType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EHeroStatType StatType {
      get { if ((_hasBits0 & 1) != 0) { return statType_; } else { return StatTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        statType_ = value;
      }
    }
    /// <summary>Gets whether the "stat_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stat_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "int_value" field.</summary>
    public const int IntValueFieldNumber = 2;
    private readonly static int IntValueDefaultValue = 0;

    private int intValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntValue {
      get { if ((_hasBits0 & 2) != 0) { return intValue_; } else { return IntValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        intValue_ = value;
      }
    }
    /// <summary>Gets whether the "int_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "int_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 3;
    private readonly static float FloatValueDefaultValue = 0F;

    private float floatValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatValue {
      get { if ((_hasBits0 & 4) != 0) { return floatValue_; } else { return FloatValueDefaultValue; } }
      set {
        _hasBits0 |= 4;
        floatValue_ = value;
      }
    }
    /// <summary>Gets whether the "float_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloatValue {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "float_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloatValue() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgHeroAbilityStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgHeroAbilityStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatType != other.StatType) return false;
      if (IntValue != other.IntValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatValue, other.FloatValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStatType) hash ^= StatType.GetHashCode();
      if (HasIntValue) hash ^= IntValue.GetHashCode();
      if (HasFloatValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStatType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatType);
      }
      if (HasIntValue) {
        output.WriteRawTag(16);
        output.WriteInt32(IntValue);
      }
      if (HasFloatValue) {
        output.WriteRawTag(29);
        output.WriteFloat(FloatValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStatType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatType);
      }
      if (HasIntValue) {
        output.WriteRawTag(16);
        output.WriteInt32(IntValue);
      }
      if (HasFloatValue) {
        output.WriteRawTag(29);
        output.WriteFloat(FloatValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStatType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatType);
      }
      if (HasIntValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntValue);
      }
      if (HasFloatValue) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgHeroAbilityStat other) {
      if (other == null) {
        return;
      }
      if (other.HasStatType) {
        StatType = other.StatType;
      }
      if (other.HasIntValue) {
        IntValue = other.IntValue;
      }
      if (other.HasFloatValue) {
        FloatValue = other.FloatValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatType = (global::Steam.Protos.Dota2.EHeroStatType) input.ReadEnum();
            break;
          }
          case 16: {
            IntValue = input.ReadInt32();
            break;
          }
          case 29: {
            FloatValue = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StatType = (global::Steam.Protos.Dota2.EHeroStatType) input.ReadEnum();
            break;
          }
          case 16: {
            IntValue = input.ReadInt32();
            break;
          }
          case 29: {
            FloatValue = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgCombatAnalyzerPlayerStat : pb::IMessage<CMsgCombatAnalyzerPlayerStat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgCombatAnalyzerPlayerStat> _parser = new pb::MessageParser<CMsgCombatAnalyzerPlayerStat>(() => new CMsgCombatAnalyzerPlayerStat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgCombatAnalyzerPlayerStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerPlayerStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerPlayerStat(CMsgCombatAnalyzerPlayerStat other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      heroAbilityStats_ = other.heroAbilityStats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerPlayerStat Clone() {
      return new CMsgCombatAnalyzerPlayerStat(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static uint AccountIdDefaultValue = 0;

    private uint accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hero_ability_stats" field.</summary>
    public const int HeroAbilityStatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgHeroAbilityStat> _repeated_heroAbilityStats_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgHeroAbilityStat.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroAbilityStat> heroAbilityStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroAbilityStat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgHeroAbilityStat> HeroAbilityStats {
      get { return heroAbilityStats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgCombatAnalyzerPlayerStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgCombatAnalyzerPlayerStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if(!heroAbilityStats_.Equals(other.heroAbilityStats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      hash ^= heroAbilityStats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      heroAbilityStats_.WriteTo(output, _repeated_heroAbilityStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountId);
      }
      heroAbilityStats_.WriteTo(ref output, _repeated_heroAbilityStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
      }
      size += heroAbilityStats_.CalculateSize(_repeated_heroAbilityStats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgCombatAnalyzerPlayerStat other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      heroAbilityStats_.Add(other.heroAbilityStats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            heroAbilityStats_.AddEntriesFrom(input, _repeated_heroAbilityStats_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AccountId = input.ReadUInt32();
            break;
          }
          case 18: {
            heroAbilityStats_.AddEntriesFrom(ref input, _repeated_heroAbilityStats_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMsgCombatAnalyzerStats : pb::IMessage<CMsgCombatAnalyzerStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMsgCombatAnalyzerStats> _parser = new pb::MessageParser<CMsgCombatAnalyzerStats>(() => new CMsgCombatAnalyzerStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMsgCombatAnalyzerStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerStats(CMsgCombatAnalyzerStats other) : this() {
      _hasBits0 = other._hasBits0;
      matchId_ = other.matchId_;
      playerStats_ = other.playerStats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMsgCombatAnalyzerStats Clone() {
      return new CMsgCombatAnalyzerStats(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private readonly static ulong MatchIdDefaultValue = 0UL;

    private ulong matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchId {
      get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_stats" field.</summary>
    public const int PlayerStatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CMsgCombatAnalyzerPlayerStat> _repeated_playerStats_codec
        = pb::FieldCodec.ForMessage(18, global::Steam.Protos.Dota2.CMsgCombatAnalyzerPlayerStat.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgCombatAnalyzerPlayerStat> playerStats_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgCombatAnalyzerPlayerStat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CMsgCombatAnalyzerPlayerStat> PlayerStats {
      get { return playerStats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMsgCombatAnalyzerStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMsgCombatAnalyzerStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!playerStats_.Equals(other.playerStats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      hash ^= playerStats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      playerStats_.WriteTo(output, _repeated_playerStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMatchId) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchId);
      }
      playerStats_.WriteTo(ref output, _repeated_playerStats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMatchId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
      }
      size += playerStats_.CalculateSize(_repeated_playerStats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMsgCombatAnalyzerStats other) {
      if (other == null) {
        return;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      playerStats_.Add(other.playerStats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 18: {
            playerStats_.AddEntriesFrom(input, _repeated_playerStats_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchId = input.ReadUInt64();
            break;
          }
          case 18: {
            playerStats_.AddEntriesFrom(ref input, _repeated_playerStats_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_BeastChat : pb::IMessage<CDOTAUserMsg_BeastChat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_BeastChat> _parser = new pb::MessageParser<CDOTAUserMsg_BeastChat>(() => new CDOTAUserMsg_BeastChat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_BeastChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BeastChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BeastChat(CDOTAUserMsg_BeastChat other) : this() {
      _hasBits0 = other._hasBits0;
      team_ = other.team_;
      format_ = other.format_;
      message_ = other.message_;
      target_ = other.target_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_BeastChat Clone() {
      return new CDOTAUserMsg_BeastChat(this);
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 1;
    private readonly static uint TeamDefaultValue = 0;

    private uint team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Team {
      get { if ((_hasBits0 & 1) != 0) { return team_; } else { return TeamDefaultValue; } }
      set {
        _hasBits0 |= 1;
        team_ = value;
      }
    }
    /// <summary>Gets whether the "team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeam {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeam() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private readonly static string FormatDefaultValue = "";

    private string format_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_ ?? FormatDefaultValue; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "format" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFormat {
      get { return format_ != null; }
    }
    /// <summary>Clears the value of the "format" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFormat() {
      format_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private readonly static string TargetDefaultValue = "";

    private string target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_ ?? TargetDefaultValue; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "target" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return target_ != null; }
    }
    /// <summary>Clears the value of the "target" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_BeastChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_BeastChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Team != other.Team) return false;
      if (Format != other.Format) return false;
      if (Message != other.Message) return false;
      if (Target != other.Target) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTeam) hash ^= Team.GetHashCode();
      if (HasFormat) hash ^= Format.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasTarget) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTeam) {
        output.WriteRawTag(8);
        output.WriteUInt32(Team);
      }
      if (HasFormat) {
        output.WriteRawTag(18);
        output.WriteString(Format);
      }
      if (HasMessage) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (HasTarget) {
        output.WriteRawTag(34);
        output.WriteString(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTeam) {
        output.WriteRawTag(8);
        output.WriteUInt32(Team);
      }
      if (HasFormat) {
        output.WriteRawTag(18);
        output.WriteString(Format);
      }
      if (HasMessage) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (HasTarget) {
        output.WriteRawTag(34);
        output.WriteString(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTeam) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
      }
      if (HasFormat) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_BeastChat other) {
      if (other == null) {
        return;
      }
      if (other.HasTeam) {
        Team = other.Team;
      }
      if (other.HasFormat) {
        Format = other.Format;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      if (other.HasTarget) {
        Target = other.Target;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Team = input.ReadUInt32();
            break;
          }
          case 18: {
            Format = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Target = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Team = input.ReadUInt32();
            break;
          }
          case 18: {
            Format = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Target = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CustomHudElement_Create : pb::IMessage<CDOTAUserMsg_CustomHudElement_Create>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CustomHudElement_Create> _parser = new pb::MessageParser<CDOTAUserMsg_CustomHudElement_Create>(() => new CDOTAUserMsg_CustomHudElement_Create());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CustomHudElement_Create> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHudElement_Create() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHudElement_Create(CDOTAUserMsg_CustomHudElement_Create other) : this() {
      elementId_ = other.elementId_;
      layoutFilename_ = other.layoutFilename_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHudElement_Create Clone() {
      return new CDOTAUserMsg_CustomHudElement_Create(this);
    }

    /// <summary>Field number for the "element_id" field.</summary>
    public const int ElementIdFieldNumber = 1;
    private readonly static string ElementIdDefaultValue = "";

    private string elementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_ ?? ElementIdDefaultValue; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "element_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasElementId {
      get { return elementId_ != null; }
    }
    /// <summary>Clears the value of the "element_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearElementId() {
      elementId_ = null;
    }

    /// <summary>Field number for the "layout_filename" field.</summary>
    public const int LayoutFilenameFieldNumber = 2;
    private readonly static string LayoutFilenameDefaultValue = "";

    private string layoutFilename_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LayoutFilename {
      get { return layoutFilename_ ?? LayoutFilenameDefaultValue; }
      set {
        layoutFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "layout_filename" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLayoutFilename {
      get { return layoutFilename_ != null; }
    }
    /// <summary>Clears the value of the "layout_filename" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLayoutFilename() {
      layoutFilename_ = null;
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_ ?? DataDefaultValue; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasData {
      get { return data_ != null; }
    }
    /// <summary>Clears the value of the "data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CustomHudElement_Create);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CustomHudElement_Create other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ElementId != other.ElementId) return false;
      if (LayoutFilename != other.LayoutFilename) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasElementId) hash ^= ElementId.GetHashCode();
      if (HasLayoutFilename) hash ^= LayoutFilename.GetHashCode();
      if (HasData) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasElementId) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (HasLayoutFilename) {
        output.WriteRawTag(18);
        output.WriteString(LayoutFilename);
      }
      if (HasData) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasElementId) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (HasLayoutFilename) {
        output.WriteRawTag(18);
        output.WriteString(LayoutFilename);
      }
      if (HasData) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasElementId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (HasLayoutFilename) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LayoutFilename);
      }
      if (HasData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CustomHudElement_Create other) {
      if (other == null) {
        return;
      }
      if (other.HasElementId) {
        ElementId = other.ElementId;
      }
      if (other.HasLayoutFilename) {
        LayoutFilename = other.LayoutFilename;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
          case 18: {
            LayoutFilename = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
          case 18: {
            LayoutFilename = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CustomHudElement_Modify : pb::IMessage<CDOTAUserMsg_CustomHudElement_Modify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CustomHudElement_Modify> _parser = new pb::MessageParser<CDOTAUserMsg_CustomHudElement_Modify>(() => new CDOTAUserMsg_CustomHudElement_Modify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CustomHudElement_Modify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHudElement_Modify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHudElement_Modify(CDOTAUserMsg_CustomHudElement_Modify other) : this() {
      _hasBits0 = other._hasBits0;
      elementId_ = other.elementId_;
      modifyVisible_ = other.modifyVisible_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHudElement_Modify Clone() {
      return new CDOTAUserMsg_CustomHudElement_Modify(this);
    }

    /// <summary>Field number for the "element_id" field.</summary>
    public const int ElementIdFieldNumber = 1;
    private readonly static string ElementIdDefaultValue = "";

    private string elementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_ ?? ElementIdDefaultValue; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "element_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasElementId {
      get { return elementId_ != null; }
    }
    /// <summary>Clears the value of the "element_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearElementId() {
      elementId_ = null;
    }

    /// <summary>Field number for the "modify_visible" field.</summary>
    public const int ModifyVisibleFieldNumber = 2;
    private readonly static bool ModifyVisibleDefaultValue = false;

    private bool modifyVisible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ModifyVisible {
      get { if ((_hasBits0 & 1) != 0) { return modifyVisible_; } else { return ModifyVisibleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        modifyVisible_ = value;
      }
    }
    /// <summary>Gets whether the "modify_visible" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModifyVisible {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "modify_visible" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModifyVisible() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_ ?? DataDefaultValue; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasData {
      get { return data_ != null; }
    }
    /// <summary>Clears the value of the "data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CustomHudElement_Modify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CustomHudElement_Modify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ElementId != other.ElementId) return false;
      if (ModifyVisible != other.ModifyVisible) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasElementId) hash ^= ElementId.GetHashCode();
      if (HasModifyVisible) hash ^= ModifyVisible.GetHashCode();
      if (HasData) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasElementId) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (HasModifyVisible) {
        output.WriteRawTag(16);
        output.WriteBool(ModifyVisible);
      }
      if (HasData) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasElementId) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (HasModifyVisible) {
        output.WriteRawTag(16);
        output.WriteBool(ModifyVisible);
      }
      if (HasData) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasElementId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (HasModifyVisible) {
        size += 1 + 1;
      }
      if (HasData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CustomHudElement_Modify other) {
      if (other == null) {
        return;
      }
      if (other.HasElementId) {
        ElementId = other.ElementId;
      }
      if (other.HasModifyVisible) {
        ModifyVisible = other.ModifyVisible;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
          case 16: {
            ModifyVisible = input.ReadBool();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
          case 16: {
            ModifyVisible = input.ReadBool();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CustomHudElement_Destroy : pb::IMessage<CDOTAUserMsg_CustomHudElement_Destroy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CustomHudElement_Destroy> _parser = new pb::MessageParser<CDOTAUserMsg_CustomHudElement_Destroy>(() => new CDOTAUserMsg_CustomHudElement_Destroy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CustomHudElement_Destroy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHudElement_Destroy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHudElement_Destroy(CDOTAUserMsg_CustomHudElement_Destroy other) : this() {
      elementId_ = other.elementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CustomHudElement_Destroy Clone() {
      return new CDOTAUserMsg_CustomHudElement_Destroy(this);
    }

    /// <summary>Field number for the "element_id" field.</summary>
    public const int ElementIdFieldNumber = 1;
    private readonly static string ElementIdDefaultValue = "";

    private string elementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_ ?? ElementIdDefaultValue; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "element_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasElementId {
      get { return elementId_ != null; }
    }
    /// <summary>Clears the value of the "element_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearElementId() {
      elementId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CustomHudElement_Destroy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CustomHudElement_Destroy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ElementId != other.ElementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasElementId) hash ^= ElementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasElementId) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasElementId) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasElementId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CustomHudElement_Destroy other) {
      if (other == null) {
        return;
      }
      if (other.HasElementId) {
        ElementId = other.ElementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CompendiumStatePlayer : pb::IMessage<CDOTAUserMsg_CompendiumStatePlayer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CompendiumStatePlayer> _parser = new pb::MessageParser<CDOTAUserMsg_CompendiumStatePlayer>(() => new CDOTAUserMsg_CompendiumStatePlayer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CompendiumStatePlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CompendiumStatePlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CompendiumStatePlayer(CDOTAUserMsg_CompendiumStatePlayer other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CompendiumStatePlayer Clone() {
      return new CDOTAUserMsg_CompendiumStatePlayer(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private readonly static uint LevelDefaultValue = 0;

    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { if ((_hasBits0 & 2) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLevel() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CompendiumStatePlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CompendiumStatePlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CompendiumStatePlayer other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_CompendiumState : pb::IMessage<CDOTAUserMsg_CompendiumState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_CompendiumState> _parser = new pb::MessageParser<CDOTAUserMsg_CompendiumState>(() => new CDOTAUserMsg_CompendiumState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_CompendiumState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CompendiumState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CompendiumState(CDOTAUserMsg_CompendiumState other) : this() {
      compendiumPlayers_ = other.compendiumPlayers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_CompendiumState Clone() {
      return new CDOTAUserMsg_CompendiumState(this);
    }

    /// <summary>Field number for the "compendium_players" field.</summary>
    public const int CompendiumPlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_CompendiumStatePlayer> _repeated_compendiumPlayers_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CDOTAUserMsg_CompendiumStatePlayer.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_CompendiumStatePlayer> compendiumPlayers_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_CompendiumStatePlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_CompendiumStatePlayer> CompendiumPlayers {
      get { return compendiumPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_CompendiumState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_CompendiumState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!compendiumPlayers_.Equals(other.compendiumPlayers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= compendiumPlayers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      compendiumPlayers_.WriteTo(output, _repeated_compendiumPlayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      compendiumPlayers_.WriteTo(ref output, _repeated_compendiumPlayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += compendiumPlayers_.CalculateSize(_repeated_compendiumPlayers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_CompendiumState other) {
      if (other == null) {
        return;
      }
      compendiumPlayers_.Add(other.compendiumPlayers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            compendiumPlayers_.AddEntriesFrom(input, _repeated_compendiumPlayers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            compendiumPlayers_.AddEntriesFrom(ref input, _repeated_compendiumPlayers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ProjectionAbility : pb::IMessage<CDOTAUserMsg_ProjectionAbility>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ProjectionAbility> _parser = new pb::MessageParser<CDOTAUserMsg_ProjectionAbility>(() => new CDOTAUserMsg_ProjectionAbility());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ProjectionAbility> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionAbility() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionAbility(CDOTAUserMsg_ProjectionAbility other) : this() {
      _hasBits0 = other._hasBits0;
      abilityId_ = other.abilityId_;
      casterEntIndex_ = other.casterEntIndex_;
      casterTeam_ = other.casterTeam_;
      channelEnd_ = other.channelEnd_;
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      trackCasterOnly_ = other.trackCasterOnly_;
      endTime_ = other.endTime_;
      victimEntIndex_ = other.victimEntIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionAbility Clone() {
      return new CDOTAUserMsg_ProjectionAbility(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private readonly static int AbilityIdDefaultValue = -1;

    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { if ((_hasBits0 & 1) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        abilityId_ = value;
      }
    }
    /// <summary>Gets whether the "ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "caster_ent_index" field.</summary>
    public const int CasterEntIndexFieldNumber = 2;
    private readonly static int CasterEntIndexDefaultValue = -1;

    private int casterEntIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CasterEntIndex {
      get { if ((_hasBits0 & 2) != 0) { return casterEntIndex_; } else { return CasterEntIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        casterEntIndex_ = value;
      }
    }
    /// <summary>Gets whether the "caster_ent_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCasterEntIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "caster_ent_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCasterEntIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "caster_team" field.</summary>
    public const int CasterTeamFieldNumber = 3;
    private readonly static int CasterTeamDefaultValue = 0;

    private int casterTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CasterTeam {
      get { if ((_hasBits0 & 4) != 0) { return casterTeam_; } else { return CasterTeamDefaultValue; } }
      set {
        _hasBits0 |= 4;
        casterTeam_ = value;
      }
    }
    /// <summary>Gets whether the "caster_team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCasterTeam {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "caster_team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCasterTeam() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "channel_end" field.</summary>
    public const int ChannelEndFieldNumber = 4;
    private readonly static bool ChannelEndDefaultValue = false;

    private bool channelEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChannelEnd {
      get { if ((_hasBits0 & 8) != 0) { return channelEnd_; } else { return ChannelEndDefaultValue; } }
      set {
        _hasBits0 |= 8;
        channelEnd_ = value;
      }
    }
    /// <summary>Gets whether the "channel_end" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelEnd {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "channel_end" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelEnd() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 5;
    private global::Steam.Protos.Dota2.CMsgVector origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CMsgVector Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "track_caster_only" field.</summary>
    public const int TrackCasterOnlyFieldNumber = 6;
    private readonly static bool TrackCasterOnlyDefaultValue = false;

    private bool trackCasterOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TrackCasterOnly {
      get { if ((_hasBits0 & 16) != 0) { return trackCasterOnly_; } else { return TrackCasterOnlyDefaultValue; } }
      set {
        _hasBits0 |= 16;
        trackCasterOnly_ = value;
      }
    }
    /// <summary>Gets whether the "track_caster_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrackCasterOnly {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "track_caster_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrackCasterOnly() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 7;
    private readonly static float EndTimeDefaultValue = 0F;

    private float endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndTime {
      get { if ((_hasBits0 & 32) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        endTime_ = value;
      }
    }
    /// <summary>Gets whether the "end_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "end_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "victim_ent_index" field.</summary>
    public const int VictimEntIndexFieldNumber = 8;
    private readonly static int VictimEntIndexDefaultValue = -1;

    private int victimEntIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VictimEntIndex {
      get { if ((_hasBits0 & 64) != 0) { return victimEntIndex_; } else { return VictimEntIndexDefaultValue; } }
      set {
        _hasBits0 |= 64;
        victimEntIndex_ = value;
      }
    }
    /// <summary>Gets whether the "victim_ent_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVictimEntIndex {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "victim_ent_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVictimEntIndex() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ProjectionAbility);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ProjectionAbility other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (CasterEntIndex != other.CasterEntIndex) return false;
      if (CasterTeam != other.CasterTeam) return false;
      if (ChannelEnd != other.ChannelEnd) return false;
      if (!object.Equals(Origin, other.Origin)) return false;
      if (TrackCasterOnly != other.TrackCasterOnly) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTime, other.EndTime)) return false;
      if (VictimEntIndex != other.VictimEntIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAbilityId) hash ^= AbilityId.GetHashCode();
      if (HasCasterEntIndex) hash ^= CasterEntIndex.GetHashCode();
      if (HasCasterTeam) hash ^= CasterTeam.GetHashCode();
      if (HasChannelEnd) hash ^= ChannelEnd.GetHashCode();
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (HasTrackCasterOnly) hash ^= TrackCasterOnly.GetHashCode();
      if (HasEndTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTime);
      if (HasVictimEntIndex) hash ^= VictimEntIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAbilityId) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      if (HasCasterEntIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(CasterEntIndex);
      }
      if (HasCasterTeam) {
        output.WriteRawTag(24);
        output.WriteInt32(CasterTeam);
      }
      if (HasChannelEnd) {
        output.WriteRawTag(32);
        output.WriteBool(ChannelEnd);
      }
      if (origin_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Origin);
      }
      if (HasTrackCasterOnly) {
        output.WriteRawTag(48);
        output.WriteBool(TrackCasterOnly);
      }
      if (HasEndTime) {
        output.WriteRawTag(61);
        output.WriteFloat(EndTime);
      }
      if (HasVictimEntIndex) {
        output.WriteRawTag(64);
        output.WriteInt32(VictimEntIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAbilityId) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      if (HasCasterEntIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(CasterEntIndex);
      }
      if (HasCasterTeam) {
        output.WriteRawTag(24);
        output.WriteInt32(CasterTeam);
      }
      if (HasChannelEnd) {
        output.WriteRawTag(32);
        output.WriteBool(ChannelEnd);
      }
      if (origin_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Origin);
      }
      if (HasTrackCasterOnly) {
        output.WriteRawTag(48);
        output.WriteBool(TrackCasterOnly);
      }
      if (HasEndTime) {
        output.WriteRawTag(61);
        output.WriteFloat(EndTime);
      }
      if (HasVictimEntIndex) {
        output.WriteRawTag(64);
        output.WriteInt32(VictimEntIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (HasCasterEntIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CasterEntIndex);
      }
      if (HasCasterTeam) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CasterTeam);
      }
      if (HasChannelEnd) {
        size += 1 + 1;
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (HasTrackCasterOnly) {
        size += 1 + 1;
      }
      if (HasEndTime) {
        size += 1 + 4;
      }
      if (HasVictimEntIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VictimEntIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ProjectionAbility other) {
      if (other == null) {
        return;
      }
      if (other.HasAbilityId) {
        AbilityId = other.AbilityId;
      }
      if (other.HasCasterEntIndex) {
        CasterEntIndex = other.CasterEntIndex;
      }
      if (other.HasCasterTeam) {
        CasterTeam = other.CasterTeam;
      }
      if (other.HasChannelEnd) {
        ChannelEnd = other.ChannelEnd;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          Origin = new global::Steam.Protos.Dota2.CMsgVector();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.HasTrackCasterOnly) {
        TrackCasterOnly = other.TrackCasterOnly;
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      if (other.HasVictimEntIndex) {
        VictimEntIndex = other.VictimEntIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            CasterEntIndex = input.ReadInt32();
            break;
          }
          case 24: {
            CasterTeam = input.ReadInt32();
            break;
          }
          case 32: {
            ChannelEnd = input.ReadBool();
            break;
          }
          case 42: {
            if (origin_ == null) {
              Origin = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 48: {
            TrackCasterOnly = input.ReadBool();
            break;
          }
          case 61: {
            EndTime = input.ReadFloat();
            break;
          }
          case 64: {
            VictimEntIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            CasterEntIndex = input.ReadInt32();
            break;
          }
          case 24: {
            CasterTeam = input.ReadInt32();
            break;
          }
          case 32: {
            ChannelEnd = input.ReadBool();
            break;
          }
          case 42: {
            if (origin_ == null) {
              Origin = new global::Steam.Protos.Dota2.CMsgVector();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 48: {
            TrackCasterOnly = input.ReadBool();
            break;
          }
          case 61: {
            EndTime = input.ReadFloat();
            break;
          }
          case 64: {
            VictimEntIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ProjectionEvent : pb::IMessage<CDOTAUserMsg_ProjectionEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ProjectionEvent> _parser = new pb::MessageParser<CDOTAUserMsg_ProjectionEvent>(() => new CDOTAUserMsg_ProjectionEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ProjectionEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionEvent(CDOTAUserMsg_ProjectionEvent other) : this() {
      _hasBits0 = other._hasBits0;
      eventId_ = other.eventId_;
      team_ = other.team_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ProjectionEvent Clone() {
      return new CDOTAUserMsg_ProjectionEvent(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static global::Steam.Protos.Dota2.EProjectionEvent EventIdDefaultValue = global::Steam.Protos.Dota2.EProjectionEvent.EPeFirstBlood;

    private global::Steam.Protos.Dota2.EProjectionEvent eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EProjectionEvent EventId {
      get { if ((_hasBits0 & 1) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 2;
    private readonly static uint TeamDefaultValue = 0;

    private uint team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Team {
      get { if ((_hasBits0 & 2) != 0) { return team_; } else { return TeamDefaultValue; } }
      set {
        _hasBits0 |= 2;
        team_ = value;
      }
    }
    /// <summary>Gets whether the "team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeam {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeam() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ProjectionEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ProjectionEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (Team != other.Team) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasTeam) hash ^= Team.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      if (HasTeam) {
        output.WriteRawTag(16);
        output.WriteUInt32(Team);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventId);
      }
      if (HasTeam) {
        output.WriteRawTag(16);
        output.WriteUInt32(Team);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventId);
      }
      if (HasTeam) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ProjectionEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasTeam) {
        Team = other.Team;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventId = (global::Steam.Protos.Dota2.EProjectionEvent) input.ReadEnum();
            break;
          }
          case 16: {
            Team = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EventId = (global::Steam.Protos.Dota2.EProjectionEvent) input.ReadEnum();
            break;
          }
          case 16: {
            Team = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_XPAlert : pb::IMessage<CDOTAUserMsg_XPAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_XPAlert> _parser = new pb::MessageParser<CDOTAUserMsg_XPAlert>(() => new CDOTAUserMsg_XPAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_XPAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_XPAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_XPAlert(CDOTAUserMsg_XPAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      targetEntindex_ = other.targetEntindex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_XPAlert Clone() {
      return new CDOTAUserMsg_XPAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 2;
    private readonly static int TargetEntindexDefaultValue = -1;

    private int targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetEntindex {
      get { if ((_hasBits0 & 2) != 0) { return targetEntindex_; } else { return TargetEntindexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "target_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEntindex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEntindex() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_XPAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_XPAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasTargetEntindex) hash ^= TargetEntindex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetEntindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetEntindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasTargetEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntindex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_XPAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasTargetEntindex) {
        TargetEntindex = other.TargetEntindex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetEntindex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetEntindex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TalentTreeAlert : pb::IMessage<CDOTAUserMsg_TalentTreeAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TalentTreeAlert> _parser = new pb::MessageParser<CDOTAUserMsg_TalentTreeAlert>(() => new CDOTAUserMsg_TalentTreeAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TalentTreeAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TalentTreeAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TalentTreeAlert(CDOTAUserMsg_TalentTreeAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      targetEntindex_ = other.targetEntindex_;
      abilityId_ = other.abilityId_;
      slot_ = other.slot_;
      learned_ = other.learned_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TalentTreeAlert Clone() {
      return new CDOTAUserMsg_TalentTreeAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 2;
    private readonly static int TargetEntindexDefaultValue = -1;

    private int targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetEntindex {
      get { if ((_hasBits0 & 2) != 0) { return targetEntindex_; } else { return TargetEntindexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "target_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEntindex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEntindex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 3;
    private readonly static int AbilityIdDefaultValue = -1;

    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { if ((_hasBits0 & 4) != 0) { return abilityId_; } else { return AbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        abilityId_ = value;
      }
    }
    /// <summary>Gets whether the "ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAbilityId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 4;
    private readonly static int SlotDefaultValue = 0;

    private int slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slot {
      get { if ((_hasBits0 & 8) != 0) { return slot_; } else { return SlotDefaultValue; } }
      set {
        _hasBits0 |= 8;
        slot_ = value;
      }
    }
    /// <summary>Gets whether the "slot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlot {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "slot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlot() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "learned" field.</summary>
    public const int LearnedFieldNumber = 5;
    private readonly static bool LearnedDefaultValue = false;

    private bool learned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Learned {
      get { if ((_hasBits0 & 16) != 0) { return learned_; } else { return LearnedDefaultValue; } }
      set {
        _hasBits0 |= 16;
        learned_ = value;
      }
    }
    /// <summary>Gets whether the "learned" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLearned {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "learned" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLearned() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TalentTreeAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TalentTreeAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      if (AbilityId != other.AbilityId) return false;
      if (Slot != other.Slot) return false;
      if (Learned != other.Learned) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasTargetEntindex) hash ^= TargetEntindex.GetHashCode();
      if (HasAbilityId) hash ^= AbilityId.GetHashCode();
      if (HasSlot) hash ^= Slot.GetHashCode();
      if (HasLearned) hash ^= Learned.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetEntindex);
      }
      if (HasAbilityId) {
        output.WriteRawTag(24);
        output.WriteInt32(AbilityId);
      }
      if (HasSlot) {
        output.WriteRawTag(32);
        output.WriteInt32(Slot);
      }
      if (HasLearned) {
        output.WriteRawTag(40);
        output.WriteBool(Learned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetEntindex);
      }
      if (HasAbilityId) {
        output.WriteRawTag(24);
        output.WriteInt32(AbilityId);
      }
      if (HasSlot) {
        output.WriteRawTag(32);
        output.WriteInt32(Slot);
      }
      if (HasLearned) {
        output.WriteRawTag(40);
        output.WriteBool(Learned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasTargetEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntindex);
      }
      if (HasAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (HasSlot) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      if (HasLearned) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TalentTreeAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasTargetEntindex) {
        TargetEntindex = other.TargetEntindex;
      }
      if (other.HasAbilityId) {
        AbilityId = other.AbilityId;
      }
      if (other.HasSlot) {
        Slot = other.Slot;
      }
      if (other.HasLearned) {
        Learned = other.Learned;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 24: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 32: {
            Slot = input.ReadInt32();
            break;
          }
          case 40: {
            Learned = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 24: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 32: {
            Slot = input.ReadInt32();
            break;
          }
          case 40: {
            Learned = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_UpdateQuestProgress : pb::IMessage<CDOTAUserMsg_UpdateQuestProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_UpdateQuestProgress> _parser = new pb::MessageParser<CDOTAUserMsg_UpdateQuestProgress>(() => new CDOTAUserMsg_UpdateQuestProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_UpdateQuestProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UpdateQuestProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UpdateQuestProgress(CDOTAUserMsg_UpdateQuestProgress other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_UpdateQuestProgress Clone() {
      return new CDOTAUserMsg_UpdateQuestProgress(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_UpdateQuestProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_UpdateQuestProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_UpdateQuestProgress other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_QuestStatus : pb::IMessage<CDOTAUserMsg_QuestStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_QuestStatus> _parser = new pb::MessageParser<CDOTAUserMsg_QuestStatus>(() => new CDOTAUserMsg_QuestStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_QuestStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QuestStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QuestStatus(CDOTAUserMsg_QuestStatus other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      questId_ = other.questId_;
      challengeId_ = other.challengeId_;
      progress_ = other.progress_;
      goal_ = other.goal_;
      query_ = other.query_;
      failGametime_ = other.failGametime_;
      itemAbilityId_ = other.itemAbilityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QuestStatus Clone() {
      return new CDOTAUserMsg_QuestStatus(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "quest_id" field.</summary>
    public const int QuestIdFieldNumber = 2;
    private readonly static uint QuestIdDefaultValue = 0;

    private uint questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuestId {
      get { if ((_hasBits0 & 2) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "quest_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "quest_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "challenge_id" field.</summary>
    public const int ChallengeIdFieldNumber = 3;
    private readonly static uint ChallengeIdDefaultValue = 0;

    private uint challengeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeId {
      get { if ((_hasBits0 & 4) != 0) { return challengeId_; } else { return ChallengeIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        challengeId_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "challenge_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 4;
    private readonly static uint ProgressDefaultValue = 0;

    private uint progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Progress {
      get { if ((_hasBits0 & 8) != 0) { return progress_; } else { return ProgressDefaultValue; } }
      set {
        _hasBits0 |= 8;
        progress_ = value;
      }
    }
    /// <summary>Gets whether the "progress" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProgress {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "progress" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProgress() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 5;
    private readonly static uint GoalDefaultValue = 0;

    private uint goal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Goal {
      get { if ((_hasBits0 & 16) != 0) { return goal_; } else { return GoalDefaultValue; } }
      set {
        _hasBits0 |= 16;
        goal_ = value;
      }
    }
    /// <summary>Gets whether the "goal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoal {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "goal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoal() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 6;
    private readonly static uint QueryDefaultValue = 0;

    private uint query_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Query {
      get { if ((_hasBits0 & 32) != 0) { return query_; } else { return QueryDefaultValue; } }
      set {
        _hasBits0 |= 32;
        query_ = value;
      }
    }
    /// <summary>Gets whether the "query" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuery {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "query" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuery() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "fail_gametime" field.</summary>
    public const int FailGametimeFieldNumber = 7;
    private readonly static float FailGametimeDefaultValue = 0F;

    private float failGametime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FailGametime {
      get { if ((_hasBits0 & 64) != 0) { return failGametime_; } else { return FailGametimeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        failGametime_ = value;
      }
    }
    /// <summary>Gets whether the "fail_gametime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFailGametime {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "fail_gametime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFailGametime() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 8;
    private readonly static int ItemAbilityIdDefaultValue = -1;

    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { if ((_hasBits0 & 128) != 0) { return itemAbilityId_; } else { return ItemAbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 128;
        itemAbilityId_ = value;
      }
    }
    /// <summary>Gets whether the "item_ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemAbilityId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "item_ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemAbilityId() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_QuestStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_QuestStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (QuestId != other.QuestId) return false;
      if (ChallengeId != other.ChallengeId) return false;
      if (Progress != other.Progress) return false;
      if (Goal != other.Goal) return false;
      if (Query != other.Query) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FailGametime, other.FailGametime)) return false;
      if (ItemAbilityId != other.ItemAbilityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (HasChallengeId) hash ^= ChallengeId.GetHashCode();
      if (HasProgress) hash ^= Progress.GetHashCode();
      if (HasGoal) hash ^= Goal.GetHashCode();
      if (HasQuery) hash ^= Query.GetHashCode();
      if (HasFailGametime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FailGametime);
      if (HasItemAbilityId) hash ^= ItemAbilityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasQuestId) {
        output.WriteRawTag(16);
        output.WriteUInt32(QuestId);
      }
      if (HasChallengeId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChallengeId);
      }
      if (HasProgress) {
        output.WriteRawTag(32);
        output.WriteUInt32(Progress);
      }
      if (HasGoal) {
        output.WriteRawTag(40);
        output.WriteUInt32(Goal);
      }
      if (HasQuery) {
        output.WriteRawTag(48);
        output.WriteUInt32(Query);
      }
      if (HasFailGametime) {
        output.WriteRawTag(61);
        output.WriteFloat(FailGametime);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(64);
        output.WriteInt32(ItemAbilityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasQuestId) {
        output.WriteRawTag(16);
        output.WriteUInt32(QuestId);
      }
      if (HasChallengeId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChallengeId);
      }
      if (HasProgress) {
        output.WriteRawTag(32);
        output.WriteUInt32(Progress);
      }
      if (HasGoal) {
        output.WriteRawTag(40);
        output.WriteUInt32(Goal);
      }
      if (HasQuery) {
        output.WriteRawTag(48);
        output.WriteUInt32(Query);
      }
      if (HasFailGametime) {
        output.WriteRawTag(61);
        output.WriteFloat(FailGametime);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(64);
        output.WriteInt32(ItemAbilityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuestId);
      }
      if (HasChallengeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeId);
      }
      if (HasProgress) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Progress);
      }
      if (HasGoal) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Goal);
      }
      if (HasQuery) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Query);
      }
      if (HasFailGametime) {
        size += 1 + 4;
      }
      if (HasItemAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_QuestStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      if (other.HasChallengeId) {
        ChallengeId = other.ChallengeId;
      }
      if (other.HasProgress) {
        Progress = other.Progress;
      }
      if (other.HasGoal) {
        Goal = other.Goal;
      }
      if (other.HasQuery) {
        Query = other.Query;
      }
      if (other.HasFailGametime) {
        FailGametime = other.FailGametime;
      }
      if (other.HasItemAbilityId) {
        ItemAbilityId = other.ItemAbilityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            QuestId = input.ReadUInt32();
            break;
          }
          case 24: {
            ChallengeId = input.ReadUInt32();
            break;
          }
          case 32: {
            Progress = input.ReadUInt32();
            break;
          }
          case 40: {
            Goal = input.ReadUInt32();
            break;
          }
          case 48: {
            Query = input.ReadUInt32();
            break;
          }
          case 61: {
            FailGametime = input.ReadFloat();
            break;
          }
          case 64: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            QuestId = input.ReadUInt32();
            break;
          }
          case 24: {
            ChallengeId = input.ReadUInt32();
            break;
          }
          case 32: {
            Progress = input.ReadUInt32();
            break;
          }
          case 40: {
            Goal = input.ReadUInt32();
            break;
          }
          case 48: {
            Query = input.ReadUInt32();
            break;
          }
          case 61: {
            FailGametime = input.ReadFloat();
            break;
          }
          case 64: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SuggestHeroPick : pb::IMessage<CDOTAUserMsg_SuggestHeroPick>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SuggestHeroPick> _parser = new pb::MessageParser<CDOTAUserMsg_SuggestHeroPick>(() => new CDOTAUserMsg_SuggestHeroPick());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SuggestHeroPick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SuggestHeroPick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SuggestHeroPick(CDOTAUserMsg_SuggestHeroPick other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      heroId_ = other.heroId_;
      ban_ = other.ban_;
      facetId_ = other.facetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SuggestHeroPick Clone() {
      return new CDOTAUserMsg_SuggestHeroPick(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 2) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ban" field.</summary>
    public const int BanFieldNumber = 3;
    private readonly static bool BanDefaultValue = false;

    private bool ban_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ban {
      get { if ((_hasBits0 & 4) != 0) { return ban_; } else { return BanDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ban_ = value;
      }
    }
    /// <summary>Gets whether the "ban" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBan {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ban" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBan() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "facet_id" field.</summary>
    public const int FacetIdFieldNumber = 4;
    private readonly static uint FacetIdDefaultValue = 0;

    private uint facetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FacetId {
      get { if ((_hasBits0 & 8) != 0) { return facetId_; } else { return FacetIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        facetId_ = value;
      }
    }
    /// <summary>Gets whether the "facet_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFacetId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "facet_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFacetId() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SuggestHeroPick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SuggestHeroPick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (HeroId != other.HeroId) return false;
      if (Ban != other.Ban) return false;
      if (FacetId != other.FacetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasBan) hash ^= Ban.GetHashCode();
      if (HasFacetId) hash ^= FacetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (HasBan) {
        output.WriteRawTag(24);
        output.WriteBool(Ban);
      }
      if (HasFacetId) {
        output.WriteRawTag(32);
        output.WriteUInt32(FacetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (HasBan) {
        output.WriteRawTag(24);
        output.WriteBool(Ban);
      }
      if (HasFacetId) {
        output.WriteRawTag(32);
        output.WriteUInt32(FacetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (HasBan) {
        size += 1 + 1;
      }
      if (HasFacetId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FacetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SuggestHeroPick other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasBan) {
        Ban = other.Ban;
      }
      if (other.HasFacetId) {
        FacetId = other.FacetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 24: {
            Ban = input.ReadBool();
            break;
          }
          case 32: {
            FacetId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 24: {
            Ban = input.ReadBool();
            break;
          }
          case 32: {
            FacetId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SuggestHeroRole : pb::IMessage<CDOTAUserMsg_SuggestHeroRole>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SuggestHeroRole> _parser = new pb::MessageParser<CDOTAUserMsg_SuggestHeroRole>(() => new CDOTAUserMsg_SuggestHeroRole());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SuggestHeroRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SuggestHeroRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SuggestHeroRole(CDOTAUserMsg_SuggestHeroRole other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      heroRole_ = other.heroRole_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SuggestHeroRole Clone() {
      return new CDOTAUserMsg_SuggestHeroRole(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hero_role" field.</summary>
    public const int HeroRoleFieldNumber = 2;
    private readonly static string HeroRoleDefaultValue = "";

    private string heroRole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroRole {
      get { return heroRole_ ?? HeroRoleDefaultValue; }
      set {
        heroRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "hero_role" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroRole {
      get { return heroRole_ != null; }
    }
    /// <summary>Clears the value of the "hero_role" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroRole() {
      heroRole_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SuggestHeroRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SuggestHeroRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (HeroRole != other.HeroRole) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasHeroRole) hash ^= HeroRole.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasHeroRole) {
        output.WriteRawTag(18);
        output.WriteString(HeroRole);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasHeroRole) {
        output.WriteRawTag(18);
        output.WriteString(HeroRole);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasHeroRole) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroRole);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SuggestHeroRole other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasHeroRole) {
        HeroRole = other.HeroRole;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            HeroRole = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            HeroRole = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_KillcamDamageTaken : pb::IMessage<CDOTAUserMsg_KillcamDamageTaken>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_KillcamDamageTaken> _parser = new pb::MessageParser<CDOTAUserMsg_KillcamDamageTaken>(() => new CDOTAUserMsg_KillcamDamageTaken());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_KillcamDamageTaken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_KillcamDamageTaken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_KillcamDamageTaken(CDOTAUserMsg_KillcamDamageTaken other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      damageTaken_ = other.damageTaken_;
      itemType_ = other.itemType_;
      itemAbilityId_ = other.itemAbilityId_;
      heroName_ = other.heroName_;
      damageColor_ = other.damageColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_KillcamDamageTaken Clone() {
      return new CDOTAUserMsg_KillcamDamageTaken(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "damage_taken" field.</summary>
    public const int DamageTakenFieldNumber = 2;
    private readonly static uint DamageTakenDefaultValue = 0;

    private uint damageTaken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageTaken {
      get { if ((_hasBits0 & 2) != 0) { return damageTaken_; } else { return DamageTakenDefaultValue; } }
      set {
        _hasBits0 |= 2;
        damageTaken_ = value;
      }
    }
    /// <summary>Gets whether the "damage_taken" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageTaken {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "damage_taken" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageTaken() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "item_type" field.</summary>
    public const int ItemTypeFieldNumber = 3;
    private readonly static uint ItemTypeDefaultValue = 0;

    private uint itemType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemType {
      get { if ((_hasBits0 & 4) != 0) { return itemType_; } else { return ItemTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        itemType_ = value;
      }
    }
    /// <summary>Gets whether the "item_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "item_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 4;
    private readonly static int ItemAbilityIdDefaultValue = -1;

    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { if ((_hasBits0 & 8) != 0) { return itemAbilityId_; } else { return ItemAbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        itemAbilityId_ = value;
      }
    }
    /// <summary>Gets whether the "item_ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemAbilityId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "item_ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemAbilityId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "hero_name" field.</summary>
    public const int HeroNameFieldNumber = 5;
    private readonly static string HeroNameDefaultValue = "";

    private string heroName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroName {
      get { return heroName_ ?? HeroNameDefaultValue; }
      set {
        heroName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "hero_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroName {
      get { return heroName_ != null; }
    }
    /// <summary>Clears the value of the "hero_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroName() {
      heroName_ = null;
    }

    /// <summary>Field number for the "damage_color" field.</summary>
    public const int DamageColorFieldNumber = 6;
    private readonly static string DamageColorDefaultValue = "";

    private string damageColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DamageColor {
      get { return damageColor_ ?? DamageColorDefaultValue; }
      set {
        damageColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "damage_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageColor {
      get { return damageColor_ != null; }
    }
    /// <summary>Clears the value of the "damage_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageColor() {
      damageColor_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_KillcamDamageTaken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_KillcamDamageTaken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (DamageTaken != other.DamageTaken) return false;
      if (ItemType != other.ItemType) return false;
      if (ItemAbilityId != other.ItemAbilityId) return false;
      if (HeroName != other.HeroName) return false;
      if (DamageColor != other.DamageColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasDamageTaken) hash ^= DamageTaken.GetHashCode();
      if (HasItemType) hash ^= ItemType.GetHashCode();
      if (HasItemAbilityId) hash ^= ItemAbilityId.GetHashCode();
      if (HasHeroName) hash ^= HeroName.GetHashCode();
      if (HasDamageColor) hash ^= DamageColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasDamageTaken) {
        output.WriteRawTag(16);
        output.WriteUInt32(DamageTaken);
      }
      if (HasItemType) {
        output.WriteRawTag(24);
        output.WriteUInt32(ItemType);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasHeroName) {
        output.WriteRawTag(42);
        output.WriteString(HeroName);
      }
      if (HasDamageColor) {
        output.WriteRawTag(50);
        output.WriteString(DamageColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasDamageTaken) {
        output.WriteRawTag(16);
        output.WriteUInt32(DamageTaken);
      }
      if (HasItemType) {
        output.WriteRawTag(24);
        output.WriteUInt32(ItemType);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasHeroName) {
        output.WriteRawTag(42);
        output.WriteString(HeroName);
      }
      if (HasDamageColor) {
        output.WriteRawTag(50);
        output.WriteString(DamageColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasDamageTaken) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageTaken);
      }
      if (HasItemType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemType);
      }
      if (HasItemAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (HasHeroName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroName);
      }
      if (HasDamageColor) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DamageColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_KillcamDamageTaken other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasDamageTaken) {
        DamageTaken = other.DamageTaken;
      }
      if (other.HasItemType) {
        ItemType = other.ItemType;
      }
      if (other.HasItemAbilityId) {
        ItemAbilityId = other.ItemAbilityId;
      }
      if (other.HasHeroName) {
        HeroName = other.HeroName;
      }
      if (other.HasDamageColor) {
        DamageColor = other.DamageColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            DamageTaken = input.ReadUInt32();
            break;
          }
          case 24: {
            ItemType = input.ReadUInt32();
            break;
          }
          case 32: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 42: {
            HeroName = input.ReadString();
            break;
          }
          case 50: {
            DamageColor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            DamageTaken = input.ReadUInt32();
            break;
          }
          case 24: {
            ItemType = input.ReadUInt32();
            break;
          }
          case 32: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 42: {
            HeroName = input.ReadString();
            break;
          }
          case 50: {
            DamageColor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SelectPenaltyGold : pb::IMessage<CDOTAUserMsg_SelectPenaltyGold>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SelectPenaltyGold> _parser = new pb::MessageParser<CDOTAUserMsg_SelectPenaltyGold>(() => new CDOTAUserMsg_SelectPenaltyGold());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SelectPenaltyGold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SelectPenaltyGold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SelectPenaltyGold(CDOTAUserMsg_SelectPenaltyGold other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SelectPenaltyGold Clone() {
      return new CDOTAUserMsg_SelectPenaltyGold(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SelectPenaltyGold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SelectPenaltyGold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteSInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteSInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SelectPenaltyGold other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_RollDiceResult : pb::IMessage<CDOTAUserMsg_RollDiceResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_RollDiceResult> _parser = new pb::MessageParser<CDOTAUserMsg_RollDiceResult>(() => new CDOTAUserMsg_RollDiceResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_RollDiceResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RollDiceResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RollDiceResult(CDOTAUserMsg_RollDiceResult other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      channelType_ = other.channelType_;
      rollMin_ = other.rollMin_;
      rollMax_ = other.rollMax_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RollDiceResult Clone() {
      return new CDOTAUserMsg_RollDiceResult(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 2;
    private readonly static uint ChannelTypeDefaultValue = 0;

    private uint channelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelType {
      get { if ((_hasBits0 & 2) != 0) { return channelType_; } else { return ChannelTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        channelType_ = value;
      }
    }
    /// <summary>Gets whether the "channel_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "channel_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "roll_min" field.</summary>
    public const int RollMinFieldNumber = 3;
    private readonly static uint RollMinDefaultValue = 0;

    private uint rollMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RollMin {
      get { if ((_hasBits0 & 4) != 0) { return rollMin_; } else { return RollMinDefaultValue; } }
      set {
        _hasBits0 |= 4;
        rollMin_ = value;
      }
    }
    /// <summary>Gets whether the "roll_min" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRollMin {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "roll_min" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRollMin() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "roll_max" field.</summary>
    public const int RollMaxFieldNumber = 4;
    private readonly static uint RollMaxDefaultValue = 0;

    private uint rollMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RollMax {
      get { if ((_hasBits0 & 8) != 0) { return rollMax_; } else { return RollMaxDefaultValue; } }
      set {
        _hasBits0 |= 8;
        rollMax_ = value;
      }
    }
    /// <summary>Gets whether the "roll_max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRollMax {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "roll_max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRollMax() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 5;
    private readonly static uint ResultDefaultValue = 0;

    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { if ((_hasBits0 & 16) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 16;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_RollDiceResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_RollDiceResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ChannelType != other.ChannelType) return false;
      if (RollMin != other.RollMin) return false;
      if (RollMax != other.RollMax) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasRollMin) hash ^= RollMin.GetHashCode();
      if (HasRollMax) hash ^= RollMax.GetHashCode();
      if (HasResult) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasChannelType) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelType);
      }
      if (HasRollMin) {
        output.WriteRawTag(24);
        output.WriteUInt32(RollMin);
      }
      if (HasRollMax) {
        output.WriteRawTag(32);
        output.WriteUInt32(RollMax);
      }
      if (HasResult) {
        output.WriteRawTag(40);
        output.WriteUInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasChannelType) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelType);
      }
      if (HasRollMin) {
        output.WriteRawTag(24);
        output.WriteUInt32(RollMin);
      }
      if (HasRollMax) {
        output.WriteRawTag(32);
        output.WriteUInt32(RollMax);
      }
      if (HasResult) {
        output.WriteRawTag(40);
        output.WriteUInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelType);
      }
      if (HasRollMin) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollMin);
      }
      if (HasRollMax) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollMax);
      }
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_RollDiceResult other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasRollMin) {
        RollMin = other.RollMin;
      }
      if (other.HasRollMax) {
        RollMax = other.RollMax;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelType = input.ReadUInt32();
            break;
          }
          case 24: {
            RollMin = input.ReadUInt32();
            break;
          }
          case 32: {
            RollMax = input.ReadUInt32();
            break;
          }
          case 40: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelType = input.ReadUInt32();
            break;
          }
          case 24: {
            RollMin = input.ReadUInt32();
            break;
          }
          case 32: {
            RollMax = input.ReadUInt32();
            break;
          }
          case 40: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_FlipCoinResult : pb::IMessage<CDOTAUserMsg_FlipCoinResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_FlipCoinResult> _parser = new pb::MessageParser<CDOTAUserMsg_FlipCoinResult>(() => new CDOTAUserMsg_FlipCoinResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_FlipCoinResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FlipCoinResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FlipCoinResult(CDOTAUserMsg_FlipCoinResult other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      channelType_ = other.channelType_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FlipCoinResult Clone() {
      return new CDOTAUserMsg_FlipCoinResult(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 2;
    private readonly static uint ChannelTypeDefaultValue = 0;

    private uint channelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelType {
      get { if ((_hasBits0 & 2) != 0) { return channelType_; } else { return ChannelTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        channelType_ = value;
      }
    }
    /// <summary>Gets whether the "channel_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "channel_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private readonly static bool ResultDefaultValue = false;

    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { if ((_hasBits0 & 4) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 4;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_FlipCoinResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_FlipCoinResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ChannelType != other.ChannelType) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasResult) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasChannelType) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelType);
      }
      if (HasResult) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasChannelType) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelType);
      }
      if (HasResult) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelType);
      }
      if (HasResult) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_FlipCoinResult other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelType = input.ReadUInt32();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelType = input.ReadUInt32();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMessage_RequestItemSuggestions : pb::IMessage<CDOTAUserMessage_RequestItemSuggestions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMessage_RequestItemSuggestions> _parser = new pb::MessageParser<CDOTAUserMessage_RequestItemSuggestions>(() => new CDOTAUserMessage_RequestItemSuggestions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMessage_RequestItemSuggestions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMessage_RequestItemSuggestions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMessage_RequestItemSuggestions(CDOTAUserMessage_RequestItemSuggestions other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMessage_RequestItemSuggestions Clone() {
      return new CDOTAUserMessage_RequestItemSuggestions(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMessage_RequestItemSuggestions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMessage_RequestItemSuggestions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMessage_RequestItemSuggestions other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMessage_TeamCaptainChanged : pb::IMessage<CDOTAUserMessage_TeamCaptainChanged>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMessage_TeamCaptainChanged> _parser = new pb::MessageParser<CDOTAUserMessage_TeamCaptainChanged>(() => new CDOTAUserMessage_TeamCaptainChanged());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMessage_TeamCaptainChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMessage_TeamCaptainChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMessage_TeamCaptainChanged(CDOTAUserMessage_TeamCaptainChanged other) : this() {
      _hasBits0 = other._hasBits0;
      team_ = other.team_;
      captainPlayerId_ = other.captainPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMessage_TeamCaptainChanged Clone() {
      return new CDOTAUserMessage_TeamCaptainChanged(this);
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 1;
    private readonly static uint TeamDefaultValue = 0;

    private uint team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Team {
      get { if ((_hasBits0 & 1) != 0) { return team_; } else { return TeamDefaultValue; } }
      set {
        _hasBits0 |= 1;
        team_ = value;
      }
    }
    /// <summary>Gets whether the "team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeam {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeam() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "captain_player_id" field.</summary>
    public const int CaptainPlayerIdFieldNumber = 2;
    private readonly static int CaptainPlayerIdDefaultValue = -1;

    private int captainPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CaptainPlayerId {
      get { if ((_hasBits0 & 2) != 0) { return captainPlayerId_; } else { return CaptainPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        captainPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "captain_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCaptainPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "captain_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCaptainPlayerId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMessage_TeamCaptainChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMessage_TeamCaptainChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Team != other.Team) return false;
      if (CaptainPlayerId != other.CaptainPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTeam) hash ^= Team.GetHashCode();
      if (HasCaptainPlayerId) hash ^= CaptainPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTeam) {
        output.WriteRawTag(8);
        output.WriteUInt32(Team);
      }
      if (HasCaptainPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(CaptainPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTeam) {
        output.WriteRawTag(8);
        output.WriteUInt32(Team);
      }
      if (HasCaptainPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(CaptainPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTeam) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
      }
      if (HasCaptainPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CaptainPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMessage_TeamCaptainChanged other) {
      if (other == null) {
        return;
      }
      if (other.HasTeam) {
        Team = other.Team;
      }
      if (other.HasCaptainPlayerId) {
        CaptainPlayerId = other.CaptainPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Team = input.ReadUInt32();
            break;
          }
          case 16: {
            CaptainPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Team = input.ReadUInt32();
            break;
          }
          case 16: {
            CaptainPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ChatWheelCooldown : pb::IMessage<CDOTAUserMsg_ChatWheelCooldown>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ChatWheelCooldown> _parser = new pb::MessageParser<CDOTAUserMsg_ChatWheelCooldown>(() => new CDOTAUserMsg_ChatWheelCooldown());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ChatWheelCooldown> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatWheelCooldown() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatWheelCooldown(CDOTAUserMsg_ChatWheelCooldown other) : this() {
      _hasBits0 = other._hasBits0;
      messageId_ = other.messageId_;
      cooldownRemaining_ = other.cooldownRemaining_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatWheelCooldown Clone() {
      return new CDOTAUserMsg_ChatWheelCooldown(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private readonly static uint MessageIdDefaultValue = 4294967295;

    private uint messageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MessageId {
      get { if ((_hasBits0 & 1) != 0) { return messageId_; } else { return MessageIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        messageId_ = value;
      }
    }
    /// <summary>Gets whether the "message_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "message_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cooldown_remaining" field.</summary>
    public const int CooldownRemainingFieldNumber = 2;
    private readonly static float CooldownRemainingDefaultValue = 0F;

    private float cooldownRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CooldownRemaining {
      get { if ((_hasBits0 & 2) != 0) { return cooldownRemaining_; } else { return CooldownRemainingDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cooldownRemaining_ = value;
      }
    }
    /// <summary>Gets whether the "cooldown_remaining" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCooldownRemaining {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cooldown_remaining" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCooldownRemaining() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ChatWheelCooldown);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ChatWheelCooldown other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CooldownRemaining, other.CooldownRemaining)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMessageId) hash ^= MessageId.GetHashCode();
      if (HasCooldownRemaining) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CooldownRemaining);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMessageId) {
        output.WriteRawTag(8);
        output.WriteUInt32(MessageId);
      }
      if (HasCooldownRemaining) {
        output.WriteRawTag(21);
        output.WriteFloat(CooldownRemaining);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMessageId) {
        output.WriteRawTag(8);
        output.WriteUInt32(MessageId);
      }
      if (HasCooldownRemaining) {
        output.WriteRawTag(21);
        output.WriteFloat(CooldownRemaining);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMessageId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageId);
      }
      if (HasCooldownRemaining) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ChatWheelCooldown other) {
      if (other == null) {
        return;
      }
      if (other.HasMessageId) {
        MessageId = other.MessageId;
      }
      if (other.HasCooldownRemaining) {
        CooldownRemaining = other.CooldownRemaining;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MessageId = input.ReadUInt32();
            break;
          }
          case 21: {
            CooldownRemaining = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MessageId = input.ReadUInt32();
            break;
          }
          case 21: {
            CooldownRemaining = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_HeroRelicProgress : pb::IMessage<CDOTAUserMsg_HeroRelicProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_HeroRelicProgress> _parser = new pb::MessageParser<CDOTAUserMsg_HeroRelicProgress>(() => new CDOTAUserMsg_HeroRelicProgress());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HeroRelicProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HeroRelicProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HeroRelicProgress(CDOTAUserMsg_HeroRelicProgress other) : this() {
      _hasBits0 = other._hasBits0;
      heroRelicType_ = other.heroRelicType_;
      value_ = other.value_;
      ehandle_ = other.ehandle_;
      eventId_ = other.eventId_;
      valueDisplay_ = other.valueDisplay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HeroRelicProgress Clone() {
      return new CDOTAUserMsg_HeroRelicProgress(this);
    }

    /// <summary>Field number for the "hero_relic_type" field.</summary>
    public const int HeroRelicTypeFieldNumber = 1;
    private readonly static uint HeroRelicTypeDefaultValue = 0;

    private uint heroRelicType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroRelicType {
      get { if ((_hasBits0 & 1) != 0) { return heroRelicType_; } else { return HeroRelicTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        heroRelicType_ = value;
      }
    }
    /// <summary>Gets whether the "hero_relic_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroRelicType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hero_relic_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroRelicType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static uint ValueDefaultValue = 0;

    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { if ((_hasBits0 & 2) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ehandle" field.</summary>
    public const int EhandleFieldNumber = 3;
    private readonly static uint EhandleDefaultValue = 16777215;

    private uint ehandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ehandle {
      get { if ((_hasBits0 & 4) != 0) { return ehandle_; } else { return EhandleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ehandle_ = value;
      }
    }
    /// <summary>Gets whether the "ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEhandle {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEhandle() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 4;
    private readonly static uint EventIdDefaultValue = 0;

    private uint eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventId {
      get { if ((_hasBits0 & 8) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "value_display" field.</summary>
    public const int ValueDisplayFieldNumber = 5;
    private readonly static float ValueDisplayDefaultValue = 0F;

    private float valueDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ValueDisplay {
      get { if ((_hasBits0 & 16) != 0) { return valueDisplay_; } else { return ValueDisplayDefaultValue; } }
      set {
        _hasBits0 |= 16;
        valueDisplay_ = value;
      }
    }
    /// <summary>Gets whether the "value_display" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValueDisplay {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "value_display" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValueDisplay() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HeroRelicProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HeroRelicProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroRelicType != other.HeroRelicType) return false;
      if (Value != other.Value) return false;
      if (Ehandle != other.Ehandle) return false;
      if (EventId != other.EventId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ValueDisplay, other.ValueDisplay)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeroRelicType) hash ^= HeroRelicType.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasEhandle) hash ^= Ehandle.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasValueDisplay) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ValueDisplay);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHeroRelicType) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeroRelicType);
      }
      if (HasValue) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (HasEhandle) {
        output.WriteRawTag(24);
        output.WriteUInt32(Ehandle);
      }
      if (HasEventId) {
        output.WriteRawTag(32);
        output.WriteUInt32(EventId);
      }
      if (HasValueDisplay) {
        output.WriteRawTag(45);
        output.WriteFloat(ValueDisplay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHeroRelicType) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeroRelicType);
      }
      if (HasValue) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (HasEhandle) {
        output.WriteRawTag(24);
        output.WriteUInt32(Ehandle);
      }
      if (HasEventId) {
        output.WriteRawTag(32);
        output.WriteUInt32(EventId);
      }
      if (HasValueDisplay) {
        output.WriteRawTag(45);
        output.WriteFloat(ValueDisplay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHeroRelicType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroRelicType);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (HasEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ehandle);
      }
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
      }
      if (HasValueDisplay) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HeroRelicProgress other) {
      if (other == null) {
        return;
      }
      if (other.HasHeroRelicType) {
        HeroRelicType = other.HeroRelicType;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasEhandle) {
        Ehandle = other.Ehandle;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasValueDisplay) {
        ValueDisplay = other.ValueDisplay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroRelicType = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 24: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 32: {
            EventId = input.ReadUInt32();
            break;
          }
          case 45: {
            ValueDisplay = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HeroRelicType = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 24: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 32: {
            EventId = input.ReadUInt32();
            break;
          }
          case 45: {
            ValueDisplay = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_AbilityDraftRequestAbility : pb::IMessage<CDOTAUserMsg_AbilityDraftRequestAbility>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_AbilityDraftRequestAbility> _parser = new pb::MessageParser<CDOTAUserMsg_AbilityDraftRequestAbility>(() => new CDOTAUserMsg_AbilityDraftRequestAbility());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_AbilityDraftRequestAbility> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilityDraftRequestAbility() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilityDraftRequestAbility(CDOTAUserMsg_AbilityDraftRequestAbility other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      requestedAbilityId_ = other.requestedAbilityId_;
      ctrlIsDown_ = other.ctrlIsDown_;
      requestedHeroId_ = other.requestedHeroId_;
      requestedFacetKey_ = other.requestedFacetKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AbilityDraftRequestAbility Clone() {
      return new CDOTAUserMsg_AbilityDraftRequestAbility(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "requested_ability_id" field.</summary>
    public const int RequestedAbilityIdFieldNumber = 2;
    private readonly static int RequestedAbilityIdDefaultValue = -1;

    private int requestedAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestedAbilityId {
      get { if ((_hasBits0 & 2) != 0) { return requestedAbilityId_; } else { return RequestedAbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestedAbilityId_ = value;
      }
    }
    /// <summary>Gets whether the "requested_ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestedAbilityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "requested_ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestedAbilityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ctrl_is_down" field.</summary>
    public const int CtrlIsDownFieldNumber = 3;
    private readonly static bool CtrlIsDownDefaultValue = false;

    private bool ctrlIsDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CtrlIsDown {
      get { if ((_hasBits0 & 4) != 0) { return ctrlIsDown_; } else { return CtrlIsDownDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ctrlIsDown_ = value;
      }
    }
    /// <summary>Gets whether the "ctrl_is_down" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCtrlIsDown {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ctrl_is_down" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCtrlIsDown() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "requested_hero_id" field.</summary>
    public const int RequestedHeroIdFieldNumber = 4;
    private readonly static int RequestedHeroIdDefaultValue = 0;

    private int requestedHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestedHeroId {
      get { if ((_hasBits0 & 8) != 0) { return requestedHeroId_; } else { return RequestedHeroIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        requestedHeroId_ = value;
      }
    }
    /// <summary>Gets whether the "requested_hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestedHeroId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "requested_hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestedHeroId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "requested_facet_key" field.</summary>
    public const int RequestedFacetKeyFieldNumber = 5;
    private readonly static ulong RequestedFacetKeyDefaultValue = 0UL;

    private ulong requestedFacetKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestedFacetKey {
      get { if ((_hasBits0 & 16) != 0) { return requestedFacetKey_; } else { return RequestedFacetKeyDefaultValue; } }
      set {
        _hasBits0 |= 16;
        requestedFacetKey_ = value;
      }
    }
    /// <summary>Gets whether the "requested_facet_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestedFacetKey {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "requested_facet_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestedFacetKey() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_AbilityDraftRequestAbility);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_AbilityDraftRequestAbility other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (RequestedAbilityId != other.RequestedAbilityId) return false;
      if (CtrlIsDown != other.CtrlIsDown) return false;
      if (RequestedHeroId != other.RequestedHeroId) return false;
      if (RequestedFacetKey != other.RequestedFacetKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasRequestedAbilityId) hash ^= RequestedAbilityId.GetHashCode();
      if (HasCtrlIsDown) hash ^= CtrlIsDown.GetHashCode();
      if (HasRequestedHeroId) hash ^= RequestedHeroId.GetHashCode();
      if (HasRequestedFacetKey) hash ^= RequestedFacetKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasRequestedAbilityId) {
        output.WriteRawTag(16);
        output.WriteInt32(RequestedAbilityId);
      }
      if (HasCtrlIsDown) {
        output.WriteRawTag(24);
        output.WriteBool(CtrlIsDown);
      }
      if (HasRequestedHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(RequestedHeroId);
      }
      if (HasRequestedFacetKey) {
        output.WriteRawTag(40);
        output.WriteUInt64(RequestedFacetKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasRequestedAbilityId) {
        output.WriteRawTag(16);
        output.WriteInt32(RequestedAbilityId);
      }
      if (HasCtrlIsDown) {
        output.WriteRawTag(24);
        output.WriteBool(CtrlIsDown);
      }
      if (HasRequestedHeroId) {
        output.WriteRawTag(32);
        output.WriteInt32(RequestedHeroId);
      }
      if (HasRequestedFacetKey) {
        output.WriteRawTag(40);
        output.WriteUInt64(RequestedFacetKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasRequestedAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestedAbilityId);
      }
      if (HasCtrlIsDown) {
        size += 1 + 1;
      }
      if (HasRequestedHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestedHeroId);
      }
      if (HasRequestedFacetKey) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestedFacetKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_AbilityDraftRequestAbility other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasRequestedAbilityId) {
        RequestedAbilityId = other.RequestedAbilityId;
      }
      if (other.HasCtrlIsDown) {
        CtrlIsDown = other.CtrlIsDown;
      }
      if (other.HasRequestedHeroId) {
        RequestedHeroId = other.RequestedHeroId;
      }
      if (other.HasRequestedFacetKey) {
        RequestedFacetKey = other.RequestedFacetKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            RequestedAbilityId = input.ReadInt32();
            break;
          }
          case 24: {
            CtrlIsDown = input.ReadBool();
            break;
          }
          case 32: {
            RequestedHeroId = input.ReadInt32();
            break;
          }
          case 40: {
            RequestedFacetKey = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            RequestedAbilityId = input.ReadInt32();
            break;
          }
          case 24: {
            CtrlIsDown = input.ReadBool();
            break;
          }
          case 32: {
            RequestedHeroId = input.ReadInt32();
            break;
          }
          case 40: {
            RequestedFacetKey = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_DamageReport : pb::IMessage<CDOTAUserMsg_DamageReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_DamageReport> _parser = new pb::MessageParser<CDOTAUserMsg_DamageReport>(() => new CDOTAUserMsg_DamageReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DamageReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DamageReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DamageReport(CDOTAUserMsg_DamageReport other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      targetHeroId_ = other.targetHeroId_;
      sourceHeroId_ = other.sourceHeroId_;
      damageAmount_ = other.damageAmount_;
      broadcast_ = other.broadcast_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DamageReport Clone() {
      return new CDOTAUserMsg_DamageReport(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_hero_id" field.</summary>
    public const int TargetHeroIdFieldNumber = 2;
    private readonly static int TargetHeroIdDefaultValue = 0;

    private int targetHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetHeroId {
      get { if ((_hasBits0 & 2) != 0) { return targetHeroId_; } else { return TargetHeroIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetHeroId_ = value;
      }
    }
    /// <summary>Gets whether the "target_hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetHeroId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetHeroId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "source_hero_id" field.</summary>
    public const int SourceHeroIdFieldNumber = 3;
    private readonly static int SourceHeroIdDefaultValue = 0;

    private int sourceHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceHeroId {
      get { if ((_hasBits0 & 4) != 0) { return sourceHeroId_; } else { return SourceHeroIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sourceHeroId_ = value;
      }
    }
    /// <summary>Gets whether the "source_hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceHeroId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "source_hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceHeroId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "damage_amount" field.</summary>
    public const int DamageAmountFieldNumber = 4;
    private readonly static int DamageAmountDefaultValue = 0;

    private int damageAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageAmount {
      get { if ((_hasBits0 & 8) != 0) { return damageAmount_; } else { return DamageAmountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        damageAmount_ = value;
      }
    }
    /// <summary>Gets whether the "damage_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageAmount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "damage_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageAmount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "broadcast" field.</summary>
    public const int BroadcastFieldNumber = 5;
    private readonly static bool BroadcastDefaultValue = false;

    private bool broadcast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Broadcast {
      get { if ((_hasBits0 & 16) != 0) { return broadcast_; } else { return BroadcastDefaultValue; } }
      set {
        _hasBits0 |= 16;
        broadcast_ = value;
      }
    }
    /// <summary>Gets whether the "broadcast" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBroadcast {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "broadcast" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBroadcast() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DamageReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DamageReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TargetHeroId != other.TargetHeroId) return false;
      if (SourceHeroId != other.SourceHeroId) return false;
      if (DamageAmount != other.DamageAmount) return false;
      if (Broadcast != other.Broadcast) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasTargetHeroId) hash ^= TargetHeroId.GetHashCode();
      if (HasSourceHeroId) hash ^= SourceHeroId.GetHashCode();
      if (HasDamageAmount) hash ^= DamageAmount.GetHashCode();
      if (HasBroadcast) hash ^= Broadcast.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetHeroId);
      }
      if (HasSourceHeroId) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceHeroId);
      }
      if (HasDamageAmount) {
        output.WriteRawTag(32);
        output.WriteInt32(DamageAmount);
      }
      if (HasBroadcast) {
        output.WriteRawTag(40);
        output.WriteBool(Broadcast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetHeroId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetHeroId);
      }
      if (HasSourceHeroId) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceHeroId);
      }
      if (HasDamageAmount) {
        output.WriteRawTag(32);
        output.WriteInt32(DamageAmount);
      }
      if (HasBroadcast) {
        output.WriteRawTag(40);
        output.WriteBool(Broadcast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasTargetHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetHeroId);
      }
      if (HasSourceHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceHeroId);
      }
      if (HasDamageAmount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageAmount);
      }
      if (HasBroadcast) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DamageReport other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasTargetHeroId) {
        TargetHeroId = other.TargetHeroId;
      }
      if (other.HasSourceHeroId) {
        SourceHeroId = other.SourceHeroId;
      }
      if (other.HasDamageAmount) {
        DamageAmount = other.DamageAmount;
      }
      if (other.HasBroadcast) {
        Broadcast = other.Broadcast;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetHeroId = input.ReadInt32();
            break;
          }
          case 24: {
            SourceHeroId = input.ReadInt32();
            break;
          }
          case 32: {
            DamageAmount = input.ReadInt32();
            break;
          }
          case 40: {
            Broadcast = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetHeroId = input.ReadInt32();
            break;
          }
          case 24: {
            SourceHeroId = input.ReadInt32();
            break;
          }
          case 32: {
            DamageAmount = input.ReadInt32();
            break;
          }
          case 40: {
            Broadcast = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_SalutePlayer : pb::IMessage<CDOTAUserMsg_SalutePlayer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_SalutePlayer> _parser = new pb::MessageParser<CDOTAUserMsg_SalutePlayer>(() => new CDOTAUserMsg_SalutePlayer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_SalutePlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SalutePlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SalutePlayer(CDOTAUserMsg_SalutePlayer other) : this() {
      _hasBits0 = other._hasBits0;
      sourcePlayerId_ = other.sourcePlayerId_;
      targetPlayerId_ = other.targetPlayerId_;
      tipAmount_ = other.tipAmount_;
      eventId_ = other.eventId_;
      customTipStyle_ = other.customTipStyle_;
      numRecentTips_ = other.numRecentTips_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_SalutePlayer Clone() {
      return new CDOTAUserMsg_SalutePlayer(this);
    }

    /// <summary>Field number for the "source_player_id" field.</summary>
    public const int SourcePlayerIdFieldNumber = 1;
    private readonly static int SourcePlayerIdDefaultValue = -1;

    private int sourcePlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerId {
      get { if ((_hasBits0 & 1) != 0) { return sourcePlayerId_; } else { return SourcePlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sourcePlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "source_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourcePlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourcePlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_player_id" field.</summary>
    public const int TargetPlayerIdFieldNumber = 2;
    private readonly static int TargetPlayerIdDefaultValue = -1;

    private int targetPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerId {
      get { if ((_hasBits0 & 2) != 0) { return targetPlayerId_; } else { return TargetPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "target_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetPlayerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "tip_amount" field.</summary>
    public const int TipAmountFieldNumber = 3;
    private readonly static uint TipAmountDefaultValue = 0;

    private uint tipAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TipAmount {
      get { if ((_hasBits0 & 4) != 0) { return tipAmount_; } else { return TipAmountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tipAmount_ = value;
      }
    }
    /// <summary>Gets whether the "tip_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTipAmount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "tip_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTipAmount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 4;
    private readonly static uint EventIdDefaultValue = 0;

    private uint eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventId {
      get { if ((_hasBits0 & 8) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "custom_tip_style" field.</summary>
    public const int CustomTipStyleFieldNumber = 5;
    private readonly static string CustomTipStyleDefaultValue = "";

    private string customTipStyle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomTipStyle {
      get { return customTipStyle_ ?? CustomTipStyleDefaultValue; }
      set {
        customTipStyle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "custom_tip_style" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomTipStyle {
      get { return customTipStyle_ != null; }
    }
    /// <summary>Clears the value of the "custom_tip_style" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomTipStyle() {
      customTipStyle_ = null;
    }

    /// <summary>Field number for the "num_recent_tips" field.</summary>
    public const int NumRecentTipsFieldNumber = 6;
    private readonly static uint NumRecentTipsDefaultValue = 0;

    private uint numRecentTips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumRecentTips {
      get { if ((_hasBits0 & 16) != 0) { return numRecentTips_; } else { return NumRecentTipsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        numRecentTips_ = value;
      }
    }
    /// <summary>Gets whether the "num_recent_tips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNumRecentTips {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "num_recent_tips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumRecentTips() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_SalutePlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_SalutePlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerId != other.SourcePlayerId) return false;
      if (TargetPlayerId != other.TargetPlayerId) return false;
      if (TipAmount != other.TipAmount) return false;
      if (EventId != other.EventId) return false;
      if (CustomTipStyle != other.CustomTipStyle) return false;
      if (NumRecentTips != other.NumRecentTips) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSourcePlayerId) hash ^= SourcePlayerId.GetHashCode();
      if (HasTargetPlayerId) hash ^= TargetPlayerId.GetHashCode();
      if (HasTipAmount) hash ^= TipAmount.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasCustomTipStyle) hash ^= CustomTipStyle.GetHashCode();
      if (HasNumRecentTips) hash ^= NumRecentTips.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasTipAmount) {
        output.WriteRawTag(24);
        output.WriteUInt32(TipAmount);
      }
      if (HasEventId) {
        output.WriteRawTag(32);
        output.WriteUInt32(EventId);
      }
      if (HasCustomTipStyle) {
        output.WriteRawTag(42);
        output.WriteString(CustomTipStyle);
      }
      if (HasNumRecentTips) {
        output.WriteRawTag(48);
        output.WriteUInt32(NumRecentTips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasTipAmount) {
        output.WriteRawTag(24);
        output.WriteUInt32(TipAmount);
      }
      if (HasEventId) {
        output.WriteRawTag(32);
        output.WriteUInt32(EventId);
      }
      if (HasCustomTipStyle) {
        output.WriteRawTag(42);
        output.WriteString(CustomTipStyle);
      }
      if (HasNumRecentTips) {
        output.WriteRawTag(48);
        output.WriteUInt32(NumRecentTips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSourcePlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerId);
      }
      if (HasTipAmount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TipAmount);
      }
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
      }
      if (HasCustomTipStyle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomTipStyle);
      }
      if (HasNumRecentTips) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumRecentTips);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_SalutePlayer other) {
      if (other == null) {
        return;
      }
      if (other.HasSourcePlayerId) {
        SourcePlayerId = other.SourcePlayerId;
      }
      if (other.HasTargetPlayerId) {
        TargetPlayerId = other.TargetPlayerId;
      }
      if (other.HasTipAmount) {
        TipAmount = other.TipAmount;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasCustomTipStyle) {
        CustomTipStyle = other.CustomTipStyle;
      }
      if (other.HasNumRecentTips) {
        NumRecentTips = other.NumRecentTips;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            TipAmount = input.ReadUInt32();
            break;
          }
          case 32: {
            EventId = input.ReadUInt32();
            break;
          }
          case 42: {
            CustomTipStyle = input.ReadString();
            break;
          }
          case 48: {
            NumRecentTips = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            TipAmount = input.ReadUInt32();
            break;
          }
          case 32: {
            EventId = input.ReadUInt32();
            break;
          }
          case 42: {
            CustomTipStyle = input.ReadString();
            break;
          }
          case 48: {
            NumRecentTips = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_GiftPlayer : pb::IMessage<CDOTAUserMsg_GiftPlayer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_GiftPlayer> _parser = new pb::MessageParser<CDOTAUserMsg_GiftPlayer>(() => new CDOTAUserMsg_GiftPlayer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_GiftPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GiftPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GiftPlayer(CDOTAUserMsg_GiftPlayer other) : this() {
      _hasBits0 = other._hasBits0;
      sourcePlayerId_ = other.sourcePlayerId_;
      targetPlayerId_ = other.targetPlayerId_;
      giftItemDefIndex_ = other.giftItemDefIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GiftPlayer Clone() {
      return new CDOTAUserMsg_GiftPlayer(this);
    }

    /// <summary>Field number for the "source_player_id" field.</summary>
    public const int SourcePlayerIdFieldNumber = 1;
    private readonly static int SourcePlayerIdDefaultValue = -1;

    private int sourcePlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerId {
      get { if ((_hasBits0 & 1) != 0) { return sourcePlayerId_; } else { return SourcePlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sourcePlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "source_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourcePlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourcePlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_player_id" field.</summary>
    public const int TargetPlayerIdFieldNumber = 2;
    private readonly static int TargetPlayerIdDefaultValue = -1;

    private int targetPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerId {
      get { if ((_hasBits0 & 2) != 0) { return targetPlayerId_; } else { return TargetPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "target_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetPlayerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "gift_item_def_index" field.</summary>
    public const int GiftItemDefIndexFieldNumber = 3;
    private readonly static uint GiftItemDefIndexDefaultValue = 0;

    private uint giftItemDefIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftItemDefIndex {
      get { if ((_hasBits0 & 4) != 0) { return giftItemDefIndex_; } else { return GiftItemDefIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        giftItemDefIndex_ = value;
      }
    }
    /// <summary>Gets whether the "gift_item_def_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftItemDefIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "gift_item_def_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftItemDefIndex() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_GiftPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_GiftPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerId != other.SourcePlayerId) return false;
      if (TargetPlayerId != other.TargetPlayerId) return false;
      if (GiftItemDefIndex != other.GiftItemDefIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSourcePlayerId) hash ^= SourcePlayerId.GetHashCode();
      if (HasTargetPlayerId) hash ^= TargetPlayerId.GetHashCode();
      if (HasGiftItemDefIndex) hash ^= GiftItemDefIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasGiftItemDefIndex) {
        output.WriteRawTag(24);
        output.WriteUInt32(GiftItemDefIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasGiftItemDefIndex) {
        output.WriteRawTag(24);
        output.WriteUInt32(GiftItemDefIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSourcePlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerId);
      }
      if (HasGiftItemDefIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftItemDefIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_GiftPlayer other) {
      if (other == null) {
        return;
      }
      if (other.HasSourcePlayerId) {
        SourcePlayerId = other.SourcePlayerId;
      }
      if (other.HasTargetPlayerId) {
        TargetPlayerId = other.TargetPlayerId;
      }
      if (other.HasGiftItemDefIndex) {
        GiftItemDefIndex = other.GiftItemDefIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            GiftItemDefIndex = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            GiftItemDefIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TipAlert : pb::IMessage<CDOTAUserMsg_TipAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TipAlert> _parser = new pb::MessageParser<CDOTAUserMsg_TipAlert>(() => new CDOTAUserMsg_TipAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TipAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TipAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TipAlert(CDOTAUserMsg_TipAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      tipText_ = other.tipText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TipAlert Clone() {
      return new CDOTAUserMsg_TipAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tip_text" field.</summary>
    public const int TipTextFieldNumber = 2;
    private readonly static string TipTextDefaultValue = "";

    private string tipText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TipText {
      get { return tipText_ ?? TipTextDefaultValue; }
      set {
        tipText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tip_text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTipText {
      get { return tipText_ != null; }
    }
    /// <summary>Clears the value of the "tip_text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTipText() {
      tipText_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TipAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TipAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TipText != other.TipText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasTipText) hash ^= TipText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTipText) {
        output.WriteRawTag(18);
        output.WriteString(TipText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTipText) {
        output.WriteRawTag(18);
        output.WriteString(TipText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasTipText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TipText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TipAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasTipText) {
        TipText = other.TipText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            TipText = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            TipText = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ReplaceQueryUnit : pb::IMessage<CDOTAUserMsg_ReplaceQueryUnit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ReplaceQueryUnit> _parser = new pb::MessageParser<CDOTAUserMsg_ReplaceQueryUnit>(() => new CDOTAUserMsg_ReplaceQueryUnit());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ReplaceQueryUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ReplaceQueryUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ReplaceQueryUnit(CDOTAUserMsg_ReplaceQueryUnit other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      sourceEntindex_ = other.sourceEntindex_;
      targetEntindex_ = other.targetEntindex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ReplaceQueryUnit Clone() {
      return new CDOTAUserMsg_ReplaceQueryUnit(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "source_entindex" field.</summary>
    public const int SourceEntindexFieldNumber = 2;
    private readonly static int SourceEntindexDefaultValue = -1;

    private int sourceEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceEntindex {
      get { if ((_hasBits0 & 2) != 0) { return sourceEntindex_; } else { return SourceEntindexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sourceEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "source_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceEntindex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "source_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceEntindex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 3;
    private readonly static int TargetEntindexDefaultValue = -1;

    private int targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetEntindex {
      get { if ((_hasBits0 & 4) != 0) { return targetEntindex_; } else { return TargetEntindexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        targetEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "target_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEntindex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "target_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEntindex() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ReplaceQueryUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ReplaceQueryUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (SourceEntindex != other.SourceEntindex) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasSourceEntindex) hash ^= SourceEntindex.GetHashCode();
      if (HasTargetEntindex) hash ^= TargetEntindex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasSourceEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceEntindex);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetEntindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasSourceEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceEntindex);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetEntindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasSourceEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceEntindex);
      }
      if (HasTargetEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntindex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ReplaceQueryUnit other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasSourceEntindex) {
        SourceEntindex = other.SourceEntindex;
      }
      if (other.HasTargetEntindex) {
        TargetEntindex = other.TargetEntindex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            SourceEntindex = input.ReadInt32();
            break;
          }
          case 24: {
            TargetEntindex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            SourceEntindex = input.ReadInt32();
            break;
          }
          case 24: {
            TargetEntindex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ESArcanaCombo : pb::IMessage<CDOTAUserMsg_ESArcanaCombo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ESArcanaCombo> _parser = new pb::MessageParser<CDOTAUserMsg_ESArcanaCombo>(() => new CDOTAUserMsg_ESArcanaCombo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ESArcanaCombo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ESArcanaCombo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ESArcanaCombo(CDOTAUserMsg_ESArcanaCombo other) : this() {
      _hasBits0 = other._hasBits0;
      ehandle_ = other.ehandle_;
      comboCount_ = other.comboCount_;
      arcanaLevel_ = other.arcanaLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ESArcanaCombo Clone() {
      return new CDOTAUserMsg_ESArcanaCombo(this);
    }

    /// <summary>Field number for the "ehandle" field.</summary>
    public const int EhandleFieldNumber = 1;
    private readonly static uint EhandleDefaultValue = 16777215;

    private uint ehandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ehandle {
      get { if ((_hasBits0 & 1) != 0) { return ehandle_; } else { return EhandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ehandle_ = value;
      }
    }
    /// <summary>Gets whether the "ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEhandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEhandle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "combo_count" field.</summary>
    public const int ComboCountFieldNumber = 2;
    private readonly static uint ComboCountDefaultValue = 0;

    private uint comboCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ComboCount {
      get { if ((_hasBits0 & 2) != 0) { return comboCount_; } else { return ComboCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        comboCount_ = value;
      }
    }
    /// <summary>Gets whether the "combo_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComboCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "combo_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComboCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "arcana_level" field.</summary>
    public const int ArcanaLevelFieldNumber = 3;
    private readonly static uint ArcanaLevelDefaultValue = 0;

    private uint arcanaLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArcanaLevel {
      get { if ((_hasBits0 & 4) != 0) { return arcanaLevel_; } else { return ArcanaLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        arcanaLevel_ = value;
      }
    }
    /// <summary>Gets whether the "arcana_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArcanaLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "arcana_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArcanaLevel() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ESArcanaCombo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ESArcanaCombo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ehandle != other.Ehandle) return false;
      if (ComboCount != other.ComboCount) return false;
      if (ArcanaLevel != other.ArcanaLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEhandle) hash ^= Ehandle.GetHashCode();
      if (HasComboCount) hash ^= ComboCount.GetHashCode();
      if (HasArcanaLevel) hash ^= ArcanaLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasComboCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(ComboCount);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(24);
        output.WriteUInt32(ArcanaLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasComboCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(ComboCount);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(24);
        output.WriteUInt32(ArcanaLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ehandle);
      }
      if (HasComboCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ComboCount);
      }
      if (HasArcanaLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArcanaLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ESArcanaCombo other) {
      if (other == null) {
        return;
      }
      if (other.HasEhandle) {
        Ehandle = other.Ehandle;
      }
      if (other.HasComboCount) {
        ComboCount = other.ComboCount;
      }
      if (other.HasArcanaLevel) {
        ArcanaLevel = other.ArcanaLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            ComboCount = input.ReadUInt32();
            break;
          }
          case 24: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            ComboCount = input.ReadUInt32();
            break;
          }
          case 24: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ESArcanaComboSummary : pb::IMessage<CDOTAUserMsg_ESArcanaComboSummary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ESArcanaComboSummary> _parser = new pb::MessageParser<CDOTAUserMsg_ESArcanaComboSummary>(() => new CDOTAUserMsg_ESArcanaComboSummary());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ESArcanaComboSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ESArcanaComboSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ESArcanaComboSummary(CDOTAUserMsg_ESArcanaComboSummary other) : this() {
      _hasBits0 = other._hasBits0;
      ehandle_ = other.ehandle_;
      comboCount_ = other.comboCount_;
      damageAmount_ = other.damageAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ESArcanaComboSummary Clone() {
      return new CDOTAUserMsg_ESArcanaComboSummary(this);
    }

    /// <summary>Field number for the "ehandle" field.</summary>
    public const int EhandleFieldNumber = 1;
    private readonly static uint EhandleDefaultValue = 16777215;

    private uint ehandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ehandle {
      get { if ((_hasBits0 & 1) != 0) { return ehandle_; } else { return EhandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ehandle_ = value;
      }
    }
    /// <summary>Gets whether the "ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEhandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEhandle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "combo_count" field.</summary>
    public const int ComboCountFieldNumber = 2;
    private readonly static uint ComboCountDefaultValue = 0;

    private uint comboCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ComboCount {
      get { if ((_hasBits0 & 2) != 0) { return comboCount_; } else { return ComboCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        comboCount_ = value;
      }
    }
    /// <summary>Gets whether the "combo_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComboCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "combo_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComboCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "damage_amount" field.</summary>
    public const int DamageAmountFieldNumber = 3;
    private readonly static uint DamageAmountDefaultValue = 0;

    private uint damageAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageAmount {
      get { if ((_hasBits0 & 4) != 0) { return damageAmount_; } else { return DamageAmountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        damageAmount_ = value;
      }
    }
    /// <summary>Gets whether the "damage_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageAmount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "damage_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageAmount() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ESArcanaComboSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ESArcanaComboSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ehandle != other.Ehandle) return false;
      if (ComboCount != other.ComboCount) return false;
      if (DamageAmount != other.DamageAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEhandle) hash ^= Ehandle.GetHashCode();
      if (HasComboCount) hash ^= ComboCount.GetHashCode();
      if (HasDamageAmount) hash ^= DamageAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasComboCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(ComboCount);
      }
      if (HasDamageAmount) {
        output.WriteRawTag(24);
        output.WriteUInt32(DamageAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasComboCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(ComboCount);
      }
      if (HasDamageAmount) {
        output.WriteRawTag(24);
        output.WriteUInt32(DamageAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ehandle);
      }
      if (HasComboCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ComboCount);
      }
      if (HasDamageAmount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ESArcanaComboSummary other) {
      if (other == null) {
        return;
      }
      if (other.HasEhandle) {
        Ehandle = other.Ehandle;
      }
      if (other.HasComboCount) {
        ComboCount = other.ComboCount;
      }
      if (other.HasDamageAmount) {
        DamageAmount = other.DamageAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            ComboCount = input.ReadUInt32();
            break;
          }
          case 24: {
            DamageAmount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            ComboCount = input.ReadUInt32();
            break;
          }
          case 24: {
            DamageAmount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_OMArcanaCombo : pb::IMessage<CDOTAUserMsg_OMArcanaCombo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_OMArcanaCombo> _parser = new pb::MessageParser<CDOTAUserMsg_OMArcanaCombo>(() => new CDOTAUserMsg_OMArcanaCombo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_OMArcanaCombo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OMArcanaCombo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OMArcanaCombo(CDOTAUserMsg_OMArcanaCombo other) : this() {
      _hasBits0 = other._hasBits0;
      ehandle_ = other.ehandle_;
      multicastAmount_ = other.multicastAmount_;
      arcanaLevel_ = other.arcanaLevel_;
      multicastChance_ = other.multicastChance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OMArcanaCombo Clone() {
      return new CDOTAUserMsg_OMArcanaCombo(this);
    }

    /// <summary>Field number for the "ehandle" field.</summary>
    public const int EhandleFieldNumber = 1;
    private readonly static uint EhandleDefaultValue = 16777215;

    private uint ehandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ehandle {
      get { if ((_hasBits0 & 1) != 0) { return ehandle_; } else { return EhandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ehandle_ = value;
      }
    }
    /// <summary>Gets whether the "ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEhandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEhandle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "multicast_amount" field.</summary>
    public const int MulticastAmountFieldNumber = 2;
    private readonly static uint MulticastAmountDefaultValue = 0;

    private uint multicastAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MulticastAmount {
      get { if ((_hasBits0 & 2) != 0) { return multicastAmount_; } else { return MulticastAmountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        multicastAmount_ = value;
      }
    }
    /// <summary>Gets whether the "multicast_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMulticastAmount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "multicast_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMulticastAmount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "arcana_level" field.</summary>
    public const int ArcanaLevelFieldNumber = 3;
    private readonly static uint ArcanaLevelDefaultValue = 0;

    private uint arcanaLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArcanaLevel {
      get { if ((_hasBits0 & 4) != 0) { return arcanaLevel_; } else { return ArcanaLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        arcanaLevel_ = value;
      }
    }
    /// <summary>Gets whether the "arcana_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArcanaLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "arcana_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArcanaLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "multicast_chance" field.</summary>
    public const int MulticastChanceFieldNumber = 4;
    private readonly static uint MulticastChanceDefaultValue = 0;

    private uint multicastChance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MulticastChance {
      get { if ((_hasBits0 & 8) != 0) { return multicastChance_; } else { return MulticastChanceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        multicastChance_ = value;
      }
    }
    /// <summary>Gets whether the "multicast_chance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMulticastChance {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "multicast_chance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMulticastChance() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_OMArcanaCombo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_OMArcanaCombo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ehandle != other.Ehandle) return false;
      if (MulticastAmount != other.MulticastAmount) return false;
      if (ArcanaLevel != other.ArcanaLevel) return false;
      if (MulticastChance != other.MulticastChance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEhandle) hash ^= Ehandle.GetHashCode();
      if (HasMulticastAmount) hash ^= MulticastAmount.GetHashCode();
      if (HasArcanaLevel) hash ^= ArcanaLevel.GetHashCode();
      if (HasMulticastChance) hash ^= MulticastChance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasMulticastAmount) {
        output.WriteRawTag(16);
        output.WriteUInt32(MulticastAmount);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(24);
        output.WriteUInt32(ArcanaLevel);
      }
      if (HasMulticastChance) {
        output.WriteRawTag(32);
        output.WriteUInt32(MulticastChance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasMulticastAmount) {
        output.WriteRawTag(16);
        output.WriteUInt32(MulticastAmount);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(24);
        output.WriteUInt32(ArcanaLevel);
      }
      if (HasMulticastChance) {
        output.WriteRawTag(32);
        output.WriteUInt32(MulticastChance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ehandle);
      }
      if (HasMulticastAmount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MulticastAmount);
      }
      if (HasArcanaLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArcanaLevel);
      }
      if (HasMulticastChance) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MulticastChance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_OMArcanaCombo other) {
      if (other == null) {
        return;
      }
      if (other.HasEhandle) {
        Ehandle = other.Ehandle;
      }
      if (other.HasMulticastAmount) {
        MulticastAmount = other.MulticastAmount;
      }
      if (other.HasArcanaLevel) {
        ArcanaLevel = other.ArcanaLevel;
      }
      if (other.HasMulticastChance) {
        MulticastChance = other.MulticastChance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            MulticastAmount = input.ReadUInt32();
            break;
          }
          case 24: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
          case 32: {
            MulticastChance = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            MulticastAmount = input.ReadUInt32();
            break;
          }
          case 24: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
          case 32: {
            MulticastChance = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_HighFiveCompleted : pb::IMessage<CDOTAUserMsg_HighFiveCompleted>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_HighFiveCompleted> _parser = new pb::MessageParser<CDOTAUserMsg_HighFiveCompleted>(() => new CDOTAUserMsg_HighFiveCompleted());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HighFiveCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HighFiveCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HighFiveCompleted(CDOTAUserMsg_HighFiveCompleted other) : this() {
      _hasBits0 = other._hasBits0;
      playerId1_ = other.playerId1_;
      playerId2_ = other.playerId2_;
      specialHighFive_ = other.specialHighFive_;
      specialEntindex_ = other.specialEntindex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HighFiveCompleted Clone() {
      return new CDOTAUserMsg_HighFiveCompleted(this);
    }

    /// <summary>Field number for the "player_id_1" field.</summary>
    public const int PlayerId1FieldNumber = 1;
    private readonly static int PlayerId1DefaultValue = -1;

    private int playerId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId1 {
      get { if ((_hasBits0 & 1) != 0) { return playerId1_; } else { return PlayerId1DefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId1_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId1 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id_1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId1() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_id_2" field.</summary>
    public const int PlayerId2FieldNumber = 2;
    private readonly static int PlayerId2DefaultValue = -1;

    private int playerId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId2 {
      get { if ((_hasBits0 & 2) != 0) { return playerId2_; } else { return PlayerId2DefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerId2_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId2 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_id_2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId2() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "special_high_five" field.</summary>
    public const int SpecialHighFiveFieldNumber = 3;
    private readonly static bool SpecialHighFiveDefaultValue = false;

    private bool specialHighFive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpecialHighFive {
      get { if ((_hasBits0 & 4) != 0) { return specialHighFive_; } else { return SpecialHighFiveDefaultValue; } }
      set {
        _hasBits0 |= 4;
        specialHighFive_ = value;
      }
    }
    /// <summary>Gets whether the "special_high_five" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpecialHighFive {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "special_high_five" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpecialHighFive() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "special_entindex" field.</summary>
    public const int SpecialEntindexFieldNumber = 4;
    private readonly static int SpecialEntindexDefaultValue = -1;

    private int specialEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialEntindex {
      get { if ((_hasBits0 & 8) != 0) { return specialEntindex_; } else { return SpecialEntindexDefaultValue; } }
      set {
        _hasBits0 |= 8;
        specialEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "special_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpecialEntindex {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "special_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpecialEntindex() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HighFiveCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HighFiveCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId1 != other.PlayerId1) return false;
      if (PlayerId2 != other.PlayerId2) return false;
      if (SpecialHighFive != other.SpecialHighFive) return false;
      if (SpecialEntindex != other.SpecialEntindex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId1) hash ^= PlayerId1.GetHashCode();
      if (HasPlayerId2) hash ^= PlayerId2.GetHashCode();
      if (HasSpecialHighFive) hash ^= SpecialHighFive.GetHashCode();
      if (HasSpecialEntindex) hash ^= SpecialEntindex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId1) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId1);
      }
      if (HasPlayerId2) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId2);
      }
      if (HasSpecialHighFive) {
        output.WriteRawTag(24);
        output.WriteBool(SpecialHighFive);
      }
      if (HasSpecialEntindex) {
        output.WriteRawTag(32);
        output.WriteInt32(SpecialEntindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId1) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId1);
      }
      if (HasPlayerId2) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId2);
      }
      if (HasSpecialHighFive) {
        output.WriteRawTag(24);
        output.WriteBool(SpecialHighFive);
      }
      if (HasSpecialEntindex) {
        output.WriteRawTag(32);
        output.WriteInt32(SpecialEntindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId1);
      }
      if (HasPlayerId2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId2);
      }
      if (HasSpecialHighFive) {
        size += 1 + 1;
      }
      if (HasSpecialEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialEntindex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HighFiveCompleted other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId1) {
        PlayerId1 = other.PlayerId1;
      }
      if (other.HasPlayerId2) {
        PlayerId2 = other.PlayerId2;
      }
      if (other.HasSpecialHighFive) {
        SpecialHighFive = other.SpecialHighFive;
      }
      if (other.HasSpecialEntindex) {
        SpecialEntindex = other.SpecialEntindex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId1 = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId2 = input.ReadInt32();
            break;
          }
          case 24: {
            SpecialHighFive = input.ReadBool();
            break;
          }
          case 32: {
            SpecialEntindex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId1 = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId2 = input.ReadInt32();
            break;
          }
          case 24: {
            SpecialHighFive = input.ReadBool();
            break;
          }
          case 32: {
            SpecialEntindex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_HighFiveLeftHanging : pb::IMessage<CDOTAUserMsg_HighFiveLeftHanging>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_HighFiveLeftHanging> _parser = new pb::MessageParser<CDOTAUserMsg_HighFiveLeftHanging>(() => new CDOTAUserMsg_HighFiveLeftHanging());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HighFiveLeftHanging> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HighFiveLeftHanging() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HighFiveLeftHanging(CDOTAUserMsg_HighFiveLeftHanging other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HighFiveLeftHanging Clone() {
      return new CDOTAUserMsg_HighFiveLeftHanging(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HighFiveLeftHanging);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HighFiveLeftHanging other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HighFiveLeftHanging other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ShovelUnearth : pb::IMessage<CDOTAUserMsg_ShovelUnearth>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ShovelUnearth> _parser = new pb::MessageParser<CDOTAUserMsg_ShovelUnearth>(() => new CDOTAUserMsg_ShovelUnearth());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ShovelUnearth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ShovelUnearth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ShovelUnearth(CDOTAUserMsg_ShovelUnearth other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      allChat_ = other.allChat_;
      locstring_ = other.locstring_;
      quantity_ = other.quantity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ShovelUnearth Clone() {
      return new CDOTAUserMsg_ShovelUnearth(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "all_chat" field.</summary>
    public const int AllChatFieldNumber = 2;
    private readonly static bool AllChatDefaultValue = false;

    private bool allChat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllChat {
      get { if ((_hasBits0 & 2) != 0) { return allChat_; } else { return AllChatDefaultValue; } }
      set {
        _hasBits0 |= 2;
        allChat_ = value;
      }
    }
    /// <summary>Gets whether the "all_chat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllChat {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "all_chat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllChat() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "locstring" field.</summary>
    public const int LocstringFieldNumber = 3;
    private readonly static string LocstringDefaultValue = "";

    private string locstring_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locstring {
      get { return locstring_ ?? LocstringDefaultValue; }
      set {
        locstring_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "locstring" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocstring {
      get { return locstring_ != null; }
    }
    /// <summary>Clears the value of the "locstring" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocstring() {
      locstring_ = null;
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private readonly static uint QuantityDefaultValue = 0;

    private uint quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quantity {
      get { if ((_hasBits0 & 4) != 0) { return quantity_; } else { return QuantityDefaultValue; } }
      set {
        _hasBits0 |= 4;
        quantity_ = value;
      }
    }
    /// <summary>Gets whether the "quantity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuantity {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "quantity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuantity() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ShovelUnearth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ShovelUnearth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (AllChat != other.AllChat) return false;
      if (Locstring != other.Locstring) return false;
      if (Quantity != other.Quantity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasAllChat) hash ^= AllChat.GetHashCode();
      if (HasLocstring) hash ^= Locstring.GetHashCode();
      if (HasQuantity) hash ^= Quantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasAllChat) {
        output.WriteRawTag(16);
        output.WriteBool(AllChat);
      }
      if (HasLocstring) {
        output.WriteRawTag(26);
        output.WriteString(Locstring);
      }
      if (HasQuantity) {
        output.WriteRawTag(32);
        output.WriteUInt32(Quantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasAllChat) {
        output.WriteRawTag(16);
        output.WriteBool(AllChat);
      }
      if (HasLocstring) {
        output.WriteRawTag(26);
        output.WriteString(Locstring);
      }
      if (HasQuantity) {
        output.WriteRawTag(32);
        output.WriteUInt32(Quantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasAllChat) {
        size += 1 + 1;
      }
      if (HasLocstring) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locstring);
      }
      if (HasQuantity) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ShovelUnearth other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasAllChat) {
        AllChat = other.AllChat;
      }
      if (other.HasLocstring) {
        Locstring = other.Locstring;
      }
      if (other.HasQuantity) {
        Quantity = other.Quantity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            AllChat = input.ReadBool();
            break;
          }
          case 26: {
            Locstring = input.ReadString();
            break;
          }
          case 32: {
            Quantity = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            AllChat = input.ReadBool();
            break;
          }
          case 26: {
            Locstring = input.ReadString();
            break;
          }
          case 32: {
            Quantity = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_AllStarEvent : pb::IMessage<CDOTAUserMsg_AllStarEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_AllStarEvent> _parser = new pb::MessageParser<CDOTAUserMsg_AllStarEvent>(() => new CDOTAUserMsg_AllStarEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_AllStarEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AllStarEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AllStarEvent(CDOTAUserMsg_AllStarEvent other) : this() {
      _hasBits0 = other._hasBits0;
      sourcePlayerId_ = other.sourcePlayerId_;
      targetPlayerId_ = other.targetPlayerId_;
      pointAmount_ = other.pointAmount_;
      eventId_ = other.eventId_;
      playerScores_ = other.playerScores_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AllStarEvent Clone() {
      return new CDOTAUserMsg_AllStarEvent(this);
    }

    /// <summary>Field number for the "source_player_id" field.</summary>
    public const int SourcePlayerIdFieldNumber = 1;
    private readonly static int SourcePlayerIdDefaultValue = -1;

    private int sourcePlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerId {
      get { if ((_hasBits0 & 1) != 0) { return sourcePlayerId_; } else { return SourcePlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sourcePlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "source_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourcePlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourcePlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_player_id" field.</summary>
    public const int TargetPlayerIdFieldNumber = 2;
    private readonly static int TargetPlayerIdDefaultValue = -1;

    private int targetPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerId {
      get { if ((_hasBits0 & 2) != 0) { return targetPlayerId_; } else { return TargetPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "target_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetPlayerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "point_amount" field.</summary>
    public const int PointAmountFieldNumber = 3;
    private readonly static uint PointAmountDefaultValue = 0;

    private uint pointAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PointAmount {
      get { if ((_hasBits0 & 4) != 0) { return pointAmount_; } else { return PointAmountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        pointAmount_ = value;
      }
    }
    /// <summary>Gets whether the "point_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPointAmount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "point_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPointAmount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 4;
    private readonly static uint EventIdDefaultValue = 0;

    private uint eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventId {
      get { if ((_hasBits0 & 8) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "player_scores" field.</summary>
    public const int PlayerScoresFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_AllStarEvent.Types.PlayerScore> _repeated_playerScores_codec
        = pb::FieldCodec.ForMessage(42, global::Steam.Protos.Dota2.CDOTAUserMsg_AllStarEvent.Types.PlayerScore.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_AllStarEvent.Types.PlayerScore> playerScores_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_AllStarEvent.Types.PlayerScore>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_AllStarEvent.Types.PlayerScore> PlayerScores {
      get { return playerScores_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_AllStarEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_AllStarEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerId != other.SourcePlayerId) return false;
      if (TargetPlayerId != other.TargetPlayerId) return false;
      if (PointAmount != other.PointAmount) return false;
      if (EventId != other.EventId) return false;
      if(!playerScores_.Equals(other.playerScores_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSourcePlayerId) hash ^= SourcePlayerId.GetHashCode();
      if (HasTargetPlayerId) hash ^= TargetPlayerId.GetHashCode();
      if (HasPointAmount) hash ^= PointAmount.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      hash ^= playerScores_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasPointAmount) {
        output.WriteRawTag(24);
        output.WriteUInt32(PointAmount);
      }
      if (HasEventId) {
        output.WriteRawTag(32);
        output.WriteUInt32(EventId);
      }
      playerScores_.WriteTo(output, _repeated_playerScores_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasPointAmount) {
        output.WriteRawTag(24);
        output.WriteUInt32(PointAmount);
      }
      if (HasEventId) {
        output.WriteRawTag(32);
        output.WriteUInt32(EventId);
      }
      playerScores_.WriteTo(ref output, _repeated_playerScores_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSourcePlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerId);
      }
      if (HasPointAmount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PointAmount);
      }
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
      }
      size += playerScores_.CalculateSize(_repeated_playerScores_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_AllStarEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasSourcePlayerId) {
        SourcePlayerId = other.SourcePlayerId;
      }
      if (other.HasTargetPlayerId) {
        TargetPlayerId = other.TargetPlayerId;
      }
      if (other.HasPointAmount) {
        PointAmount = other.PointAmount;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      playerScores_.Add(other.playerScores_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            PointAmount = input.ReadUInt32();
            break;
          }
          case 32: {
            EventId = input.ReadUInt32();
            break;
          }
          case 42: {
            playerScores_.AddEntriesFrom(input, _repeated_playerScores_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            PointAmount = input.ReadUInt32();
            break;
          }
          case 32: {
            EventId = input.ReadUInt32();
            break;
          }
          case 42: {
            playerScores_.AddEntriesFrom(ref input, _repeated_playerScores_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_AllStarEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlayerScore : pb::IMessage<PlayerScore>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerScore> _parser = new pb::MessageParser<PlayerScore>(() => new PlayerScore());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerScore> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_AllStarEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScore() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScore(PlayerScore other) : this() {
          _hasBits0 = other._hasBits0;
          playerId_ = other.playerId_;
          scoreSansKda_ = other.scoreSansKda_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScore Clone() {
          return new PlayerScore(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static int PlayerIdDefaultValue = -1;

        private int playerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerId {
          get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            playerId_ = value;
          }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "score_sans_kda" field.</summary>
        public const int ScoreSansKdaFieldNumber = 2;
        private readonly static uint ScoreSansKdaDefaultValue = 0;

        private uint scoreSansKda_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScoreSansKda {
          get { if ((_hasBits0 & 2) != 0) { return scoreSansKda_; } else { return ScoreSansKdaDefaultValue; } }
          set {
            _hasBits0 |= 2;
            scoreSansKda_ = value;
          }
        }
        /// <summary>Gets whether the "score_sans_kda" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasScoreSansKda {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "score_sans_kda" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearScoreSansKda() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerScore);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerScore other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerId != other.PlayerId) return false;
          if (ScoreSansKda != other.ScoreSansKda) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPlayerId) hash ^= PlayerId.GetHashCode();
          if (HasScoreSansKda) hash ^= ScoreSansKda.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPlayerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerId);
          }
          if (HasScoreSansKda) {
            output.WriteRawTag(16);
            output.WriteUInt32(ScoreSansKda);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPlayerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerId);
          }
          if (HasScoreSansKda) {
            output.WriteRawTag(16);
            output.WriteUInt32(ScoreSansKda);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPlayerId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
          }
          if (HasScoreSansKda) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScoreSansKda);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerScore other) {
          if (other == null) {
            return;
          }
          if (other.HasPlayerId) {
            PlayerId = other.PlayerId;
          }
          if (other.HasScoreSansKda) {
            ScoreSansKda = other.ScoreSansKda;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerId = input.ReadInt32();
                break;
              }
              case 16: {
                ScoreSansKda = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerId = input.ReadInt32();
                break;
              }
              case 16: {
                ScoreSansKda = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_QueuedOrderRemoved : pb::IMessage<CDOTAUserMsg_QueuedOrderRemoved>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_QueuedOrderRemoved> _parser = new pb::MessageParser<CDOTAUserMsg_QueuedOrderRemoved>(() => new CDOTAUserMsg_QueuedOrderRemoved());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_QueuedOrderRemoved> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QueuedOrderRemoved() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QueuedOrderRemoved(CDOTAUserMsg_QueuedOrderRemoved other) : this() {
      unitOrderSequence_ = other.unitOrderSequence_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QueuedOrderRemoved Clone() {
      return new CDOTAUserMsg_QueuedOrderRemoved(this);
    }

    /// <summary>Field number for the "unit_order_sequence" field.</summary>
    public const int UnitOrderSequenceFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_unitOrderSequence_codec
        = pb::FieldCodec.ForUInt32(8);
    private readonly pbc::RepeatedField<uint> unitOrderSequence_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnitOrderSequence {
      get { return unitOrderSequence_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_QueuedOrderRemoved);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_QueuedOrderRemoved other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unitOrderSequence_.Equals(other.unitOrderSequence_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unitOrderSequence_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      unitOrderSequence_.WriteTo(output, _repeated_unitOrderSequence_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      unitOrderSequence_.WriteTo(ref output, _repeated_unitOrderSequence_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unitOrderSequence_.CalculateSize(_repeated_unitOrderSequence_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_QueuedOrderRemoved other) {
      if (other == null) {
        return;
      }
      unitOrderSequence_.Add(other.unitOrderSequence_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            unitOrderSequence_.AddEntriesFrom(input, _repeated_unitOrderSequence_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            unitOrderSequence_.AddEntriesFrom(ref input, _repeated_unitOrderSequence_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_DebugChallenge : pb::IMessage<CDOTAUserMsg_DebugChallenge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_DebugChallenge> _parser = new pb::MessageParser<CDOTAUserMsg_DebugChallenge>(() => new CDOTAUserMsg_DebugChallenge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DebugChallenge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DebugChallenge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DebugChallenge(CDOTAUserMsg_DebugChallenge other) : this() {
      _hasBits0 = other._hasBits0;
      challengeType_ = other.challengeType_;
      challengeQueryId_ = other.challengeQueryId_;
      eventId_ = other.eventId_;
      instanceId_ = other.instanceId_;
      challengeVar0_ = other.challengeVar0_;
      challengeVar1_ = other.challengeVar1_;
      challengeMaxRank_ = other.challengeMaxRank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DebugChallenge Clone() {
      return new CDOTAUserMsg_DebugChallenge(this);
    }

    /// <summary>Field number for the "challenge_type" field.</summary>
    public const int ChallengeTypeFieldNumber = 1;
    private readonly static uint ChallengeTypeDefaultValue = 0;

    private uint challengeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeType {
      get { if ((_hasBits0 & 1) != 0) { return challengeType_; } else { return ChallengeTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        challengeType_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "challenge_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "challenge_query_id" field.</summary>
    public const int ChallengeQueryIdFieldNumber = 2;
    private readonly static uint ChallengeQueryIdDefaultValue = 0;

    private uint challengeQueryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeQueryId {
      get { if ((_hasBits0 & 2) != 0) { return challengeQueryId_; } else { return ChallengeQueryIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        challengeQueryId_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_query_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeQueryId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "challenge_query_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeQueryId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 3;
    private readonly static uint EventIdDefaultValue = 0;

    private uint eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventId {
      get { if ((_hasBits0 & 4) != 0) { return eventId_; } else { return EventIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 4;
    private readonly static uint InstanceIdDefaultValue = 0;

    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { if ((_hasBits0 & 8) != 0) { return instanceId_; } else { return InstanceIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        instanceId_ = value;
      }
    }
    /// <summary>Gets whether the "instance_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInstanceId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "instance_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInstanceId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "challenge_var_0" field.</summary>
    public const int ChallengeVar0FieldNumber = 5;
    private readonly static uint ChallengeVar0DefaultValue = 0;

    private uint challengeVar0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeVar0 {
      get { if ((_hasBits0 & 16) != 0) { return challengeVar0_; } else { return ChallengeVar0DefaultValue; } }
      set {
        _hasBits0 |= 16;
        challengeVar0_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_var_0" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeVar0 {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "challenge_var_0" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeVar0() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "challenge_var_1" field.</summary>
    public const int ChallengeVar1FieldNumber = 6;
    private readonly static uint ChallengeVar1DefaultValue = 0;

    private uint challengeVar1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeVar1 {
      get { if ((_hasBits0 & 32) != 0) { return challengeVar1_; } else { return ChallengeVar1DefaultValue; } }
      set {
        _hasBits0 |= 32;
        challengeVar1_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_var_1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeVar1 {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "challenge_var_1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeVar1() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "challenge_max_rank" field.</summary>
    public const int ChallengeMaxRankFieldNumber = 7;
    private readonly static uint ChallengeMaxRankDefaultValue = 0;

    private uint challengeMaxRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeMaxRank {
      get { if ((_hasBits0 & 64) != 0) { return challengeMaxRank_; } else { return ChallengeMaxRankDefaultValue; } }
      set {
        _hasBits0 |= 64;
        challengeMaxRank_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_max_rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeMaxRank {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "challenge_max_rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeMaxRank() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DebugChallenge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DebugChallenge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChallengeType != other.ChallengeType) return false;
      if (ChallengeQueryId != other.ChallengeQueryId) return false;
      if (EventId != other.EventId) return false;
      if (InstanceId != other.InstanceId) return false;
      if (ChallengeVar0 != other.ChallengeVar0) return false;
      if (ChallengeVar1 != other.ChallengeVar1) return false;
      if (ChallengeMaxRank != other.ChallengeMaxRank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChallengeType) hash ^= ChallengeType.GetHashCode();
      if (HasChallengeQueryId) hash ^= ChallengeQueryId.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasInstanceId) hash ^= InstanceId.GetHashCode();
      if (HasChallengeVar0) hash ^= ChallengeVar0.GetHashCode();
      if (HasChallengeVar1) hash ^= ChallengeVar1.GetHashCode();
      if (HasChallengeMaxRank) hash ^= ChallengeMaxRank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChallengeType) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChallengeType);
      }
      if (HasChallengeQueryId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChallengeQueryId);
      }
      if (HasEventId) {
        output.WriteRawTag(24);
        output.WriteUInt32(EventId);
      }
      if (HasInstanceId) {
        output.WriteRawTag(32);
        output.WriteUInt32(InstanceId);
      }
      if (HasChallengeVar0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ChallengeVar0);
      }
      if (HasChallengeVar1) {
        output.WriteRawTag(48);
        output.WriteUInt32(ChallengeVar1);
      }
      if (HasChallengeMaxRank) {
        output.WriteRawTag(56);
        output.WriteUInt32(ChallengeMaxRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChallengeType) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChallengeType);
      }
      if (HasChallengeQueryId) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChallengeQueryId);
      }
      if (HasEventId) {
        output.WriteRawTag(24);
        output.WriteUInt32(EventId);
      }
      if (HasInstanceId) {
        output.WriteRawTag(32);
        output.WriteUInt32(InstanceId);
      }
      if (HasChallengeVar0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ChallengeVar0);
      }
      if (HasChallengeVar1) {
        output.WriteRawTag(48);
        output.WriteUInt32(ChallengeVar1);
      }
      if (HasChallengeMaxRank) {
        output.WriteRawTag(56);
        output.WriteUInt32(ChallengeMaxRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChallengeType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeType);
      }
      if (HasChallengeQueryId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeQueryId);
      }
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
      }
      if (HasInstanceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (HasChallengeVar0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeVar0);
      }
      if (HasChallengeVar1) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeVar1);
      }
      if (HasChallengeMaxRank) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeMaxRank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DebugChallenge other) {
      if (other == null) {
        return;
      }
      if (other.HasChallengeType) {
        ChallengeType = other.ChallengeType;
      }
      if (other.HasChallengeQueryId) {
        ChallengeQueryId = other.ChallengeQueryId;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasInstanceId) {
        InstanceId = other.InstanceId;
      }
      if (other.HasChallengeVar0) {
        ChallengeVar0 = other.ChallengeVar0;
      }
      if (other.HasChallengeVar1) {
        ChallengeVar1 = other.ChallengeVar1;
      }
      if (other.HasChallengeMaxRank) {
        ChallengeMaxRank = other.ChallengeMaxRank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChallengeType = input.ReadUInt32();
            break;
          }
          case 16: {
            ChallengeQueryId = input.ReadUInt32();
            break;
          }
          case 24: {
            EventId = input.ReadUInt32();
            break;
          }
          case 32: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 40: {
            ChallengeVar0 = input.ReadUInt32();
            break;
          }
          case 48: {
            ChallengeVar1 = input.ReadUInt32();
            break;
          }
          case 56: {
            ChallengeMaxRank = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChallengeType = input.ReadUInt32();
            break;
          }
          case 16: {
            ChallengeQueryId = input.ReadUInt32();
            break;
          }
          case 24: {
            EventId = input.ReadUInt32();
            break;
          }
          case 32: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 40: {
            ChallengeVar0 = input.ReadUInt32();
            break;
          }
          case 48: {
            ChallengeVar1 = input.ReadUInt32();
            break;
          }
          case 56: {
            ChallengeMaxRank = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_FoundNeutralItem : pb::IMessage<CDOTAUserMsg_FoundNeutralItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_FoundNeutralItem> _parser = new pb::MessageParser<CDOTAUserMsg_FoundNeutralItem>(() => new CDOTAUserMsg_FoundNeutralItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_FoundNeutralItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FoundNeutralItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FoundNeutralItem(CDOTAUserMsg_FoundNeutralItem other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      itemAbilityId_ = other.itemAbilityId_;
      itemTier_ = other.itemTier_;
      tierItemCount_ = other.tierItemCount_;
      enhancementAbilityId_ = other.enhancementAbilityId_;
      enhancementLevel_ = other.enhancementLevel_;
      trinketLevel_ = other.trinketLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FoundNeutralItem Clone() {
      return new CDOTAUserMsg_FoundNeutralItem(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_ability_id" field.</summary>
    public const int ItemAbilityIdFieldNumber = 2;
    private readonly static int ItemAbilityIdDefaultValue = -1;

    private int itemAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAbilityId {
      get { if ((_hasBits0 & 2) != 0) { return itemAbilityId_; } else { return ItemAbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        itemAbilityId_ = value;
      }
    }
    /// <summary>Gets whether the "item_ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemAbilityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "item_ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemAbilityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "item_tier" field.</summary>
    public const int ItemTierFieldNumber = 3;
    private readonly static uint ItemTierDefaultValue = 0;

    private uint itemTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemTier {
      get { if ((_hasBits0 & 4) != 0) { return itemTier_; } else { return ItemTierDefaultValue; } }
      set {
        _hasBits0 |= 4;
        itemTier_ = value;
      }
    }
    /// <summary>Gets whether the "item_tier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemTier {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "item_tier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemTier() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "tier_item_count" field.</summary>
    public const int TierItemCountFieldNumber = 4;
    private readonly static uint TierItemCountDefaultValue = 0;

    private uint tierItemCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TierItemCount {
      get { if ((_hasBits0 & 8) != 0) { return tierItemCount_; } else { return TierItemCountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        tierItemCount_ = value;
      }
    }
    /// <summary>Gets whether the "tier_item_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTierItemCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "tier_item_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTierItemCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "enhancement_ability_id" field.</summary>
    public const int EnhancementAbilityIdFieldNumber = 5;
    private readonly static int EnhancementAbilityIdDefaultValue = -1;

    private int enhancementAbilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnhancementAbilityId {
      get { if ((_hasBits0 & 16) != 0) { return enhancementAbilityId_; } else { return EnhancementAbilityIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        enhancementAbilityId_ = value;
      }
    }
    /// <summary>Gets whether the "enhancement_ability_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnhancementAbilityId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "enhancement_ability_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnhancementAbilityId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "enhancement_level" field.</summary>
    public const int EnhancementLevelFieldNumber = 6;
    private readonly static int EnhancementLevelDefaultValue = 0;

    private int enhancementLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnhancementLevel {
      get { if ((_hasBits0 & 32) != 0) { return enhancementLevel_; } else { return EnhancementLevelDefaultValue; } }
      set {
        _hasBits0 |= 32;
        enhancementLevel_ = value;
      }
    }
    /// <summary>Gets whether the "enhancement_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnhancementLevel {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "enhancement_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnhancementLevel() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "trinket_level" field.</summary>
    public const int TrinketLevelFieldNumber = 7;
    private readonly static int TrinketLevelDefaultValue = 0;

    private int trinketLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrinketLevel {
      get { if ((_hasBits0 & 64) != 0) { return trinketLevel_; } else { return TrinketLevelDefaultValue; } }
      set {
        _hasBits0 |= 64;
        trinketLevel_ = value;
      }
    }
    /// <summary>Gets whether the "trinket_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrinketLevel {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "trinket_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrinketLevel() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_FoundNeutralItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_FoundNeutralItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ItemAbilityId != other.ItemAbilityId) return false;
      if (ItemTier != other.ItemTier) return false;
      if (TierItemCount != other.TierItemCount) return false;
      if (EnhancementAbilityId != other.EnhancementAbilityId) return false;
      if (EnhancementLevel != other.EnhancementLevel) return false;
      if (TrinketLevel != other.TrinketLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasItemAbilityId) hash ^= ItemAbilityId.GetHashCode();
      if (HasItemTier) hash ^= ItemTier.GetHashCode();
      if (HasTierItemCount) hash ^= TierItemCount.GetHashCode();
      if (HasEnhancementAbilityId) hash ^= EnhancementAbilityId.GetHashCode();
      if (HasEnhancementLevel) hash ^= EnhancementLevel.GetHashCode();
      if (HasTrinketLevel) hash ^= TrinketLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasItemTier) {
        output.WriteRawTag(24);
        output.WriteUInt32(ItemTier);
      }
      if (HasTierItemCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(TierItemCount);
      }
      if (HasEnhancementAbilityId) {
        output.WriteRawTag(40);
        output.WriteInt32(EnhancementAbilityId);
      }
      if (HasEnhancementLevel) {
        output.WriteRawTag(48);
        output.WriteInt32(EnhancementLevel);
      }
      if (HasTrinketLevel) {
        output.WriteRawTag(56);
        output.WriteInt32(TrinketLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasItemAbilityId) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemAbilityId);
      }
      if (HasItemTier) {
        output.WriteRawTag(24);
        output.WriteUInt32(ItemTier);
      }
      if (HasTierItemCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(TierItemCount);
      }
      if (HasEnhancementAbilityId) {
        output.WriteRawTag(40);
        output.WriteInt32(EnhancementAbilityId);
      }
      if (HasEnhancementLevel) {
        output.WriteRawTag(48);
        output.WriteInt32(EnhancementLevel);
      }
      if (HasTrinketLevel) {
        output.WriteRawTag(56);
        output.WriteInt32(TrinketLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasItemAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
      }
      if (HasItemTier) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemTier);
      }
      if (HasTierItemCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TierItemCount);
      }
      if (HasEnhancementAbilityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnhancementAbilityId);
      }
      if (HasEnhancementLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnhancementLevel);
      }
      if (HasTrinketLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrinketLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_FoundNeutralItem other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasItemAbilityId) {
        ItemAbilityId = other.ItemAbilityId;
      }
      if (other.HasItemTier) {
        ItemTier = other.ItemTier;
      }
      if (other.HasTierItemCount) {
        TierItemCount = other.TierItemCount;
      }
      if (other.HasEnhancementAbilityId) {
        EnhancementAbilityId = other.EnhancementAbilityId;
      }
      if (other.HasEnhancementLevel) {
        EnhancementLevel = other.EnhancementLevel;
      }
      if (other.HasTrinketLevel) {
        TrinketLevel = other.TrinketLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemTier = input.ReadUInt32();
            break;
          }
          case 32: {
            TierItemCount = input.ReadUInt32();
            break;
          }
          case 40: {
            EnhancementAbilityId = input.ReadInt32();
            break;
          }
          case 48: {
            EnhancementLevel = input.ReadInt32();
            break;
          }
          case 56: {
            TrinketLevel = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemAbilityId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemTier = input.ReadUInt32();
            break;
          }
          case 32: {
            TierItemCount = input.ReadUInt32();
            break;
          }
          case 40: {
            EnhancementAbilityId = input.ReadInt32();
            break;
          }
          case 48: {
            EnhancementLevel = input.ReadInt32();
            break;
          }
          case 56: {
            TrinketLevel = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_OutpostCaptured : pb::IMessage<CDOTAUserMsg_OutpostCaptured>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_OutpostCaptured> _parser = new pb::MessageParser<CDOTAUserMsg_OutpostCaptured>(() => new CDOTAUserMsg_OutpostCaptured());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_OutpostCaptured> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OutpostCaptured() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OutpostCaptured(CDOTAUserMsg_OutpostCaptured other) : this() {
      _hasBits0 = other._hasBits0;
      outpostEntindex_ = other.outpostEntindex_;
      teamId_ = other.teamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OutpostCaptured Clone() {
      return new CDOTAUserMsg_OutpostCaptured(this);
    }

    /// <summary>Field number for the "outpost_entindex" field.</summary>
    public const int OutpostEntindexFieldNumber = 1;
    private readonly static int OutpostEntindexDefaultValue = -1;

    private int outpostEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutpostEntindex {
      get { if ((_hasBits0 & 1) != 0) { return outpostEntindex_; } else { return OutpostEntindexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        outpostEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "outpost_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOutpostEntindex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "outpost_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOutpostEntindex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private readonly static uint TeamIdDefaultValue = 0;

    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { if ((_hasBits0 & 2) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_OutpostCaptured);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_OutpostCaptured other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutpostEntindex != other.OutpostEntindex) return false;
      if (TeamId != other.TeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOutpostEntindex) hash ^= OutpostEntindex.GetHashCode();
      if (HasTeamId) hash ^= TeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOutpostEntindex) {
        output.WriteRawTag(8);
        output.WriteInt32(OutpostEntindex);
      }
      if (HasTeamId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOutpostEntindex) {
        output.WriteRawTag(8);
        output.WriteInt32(OutpostEntindex);
      }
      if (HasTeamId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOutpostEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutpostEntindex);
      }
      if (HasTeamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_OutpostCaptured other) {
      if (other == null) {
        return;
      }
      if (other.HasOutpostEntindex) {
        OutpostEntindex = other.OutpostEntindex;
      }
      if (other.HasTeamId) {
        TeamId = other.TeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OutpostEntindex = input.ReadInt32();
            break;
          }
          case 16: {
            TeamId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OutpostEntindex = input.ReadInt32();
            break;
          }
          case 16: {
            TeamId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_OutpostGrantedXP : pb::IMessage<CDOTAUserMsg_OutpostGrantedXP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_OutpostGrantedXP> _parser = new pb::MessageParser<CDOTAUserMsg_OutpostGrantedXP>(() => new CDOTAUserMsg_OutpostGrantedXP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_OutpostGrantedXP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OutpostGrantedXP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OutpostGrantedXP(CDOTAUserMsg_OutpostGrantedXP other) : this() {
      _hasBits0 = other._hasBits0;
      teamId_ = other.teamId_;
      xpAmount_ = other.xpAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_OutpostGrantedXP Clone() {
      return new CDOTAUserMsg_OutpostGrantedXP(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private readonly static uint TeamIdDefaultValue = 0;

    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { if ((_hasBits0 & 1) != 0) { return teamId_; } else { return TeamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "team_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "xp_amount" field.</summary>
    public const int XpAmountFieldNumber = 2;
    private readonly static uint XpAmountDefaultValue = 0;

    private uint xpAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint XpAmount {
      get { if ((_hasBits0 & 2) != 0) { return xpAmount_; } else { return XpAmountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        xpAmount_ = value;
      }
    }
    /// <summary>Gets whether the "xp_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasXpAmount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "xp_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearXpAmount() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_OutpostGrantedXP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_OutpostGrantedXP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamId != other.TeamId) return false;
      if (XpAmount != other.XpAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTeamId) hash ^= TeamId.GetHashCode();
      if (HasXpAmount) hash ^= XpAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTeamId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TeamId);
      }
      if (HasXpAmount) {
        output.WriteRawTag(16);
        output.WriteUInt32(XpAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTeamId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TeamId);
      }
      if (HasXpAmount) {
        output.WriteRawTag(16);
        output.WriteUInt32(XpAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTeamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (HasXpAmount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(XpAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_OutpostGrantedXP other) {
      if (other == null) {
        return;
      }
      if (other.HasTeamId) {
        TeamId = other.TeamId;
      }
      if (other.HasXpAmount) {
        XpAmount = other.XpAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 16: {
            XpAmount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 16: {
            XpAmount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_MoveCameraToUnit : pb::IMessage<CDOTAUserMsg_MoveCameraToUnit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_MoveCameraToUnit> _parser = new pb::MessageParser<CDOTAUserMsg_MoveCameraToUnit>(() => new CDOTAUserMsg_MoveCameraToUnit());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MoveCameraToUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MoveCameraToUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MoveCameraToUnit(CDOTAUserMsg_MoveCameraToUnit other) : this() {
      _hasBits0 = other._hasBits0;
      unitEhandle_ = other.unitEhandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MoveCameraToUnit Clone() {
      return new CDOTAUserMsg_MoveCameraToUnit(this);
    }

    /// <summary>Field number for the "unit_ehandle" field.</summary>
    public const int UnitEhandleFieldNumber = 1;
    private readonly static uint UnitEhandleDefaultValue = 16777215;

    private uint unitEhandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitEhandle {
      get { if ((_hasBits0 & 1) != 0) { return unitEhandle_; } else { return UnitEhandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        unitEhandle_ = value;
      }
    }
    /// <summary>Gets whether the "unit_ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnitEhandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "unit_ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnitEhandle() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MoveCameraToUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MoveCameraToUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitEhandle != other.UnitEhandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUnitEhandle) hash ^= UnitEhandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUnitEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitEhandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUnitEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitEhandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUnitEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitEhandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MoveCameraToUnit other) {
      if (other == null) {
        return;
      }
      if (other.HasUnitEhandle) {
        UnitEhandle = other.UnitEhandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnitEhandle = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UnitEhandle = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_PauseMinigameData : pb::IMessage<CDOTAUserMsg_PauseMinigameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_PauseMinigameData> _parser = new pb::MessageParser<CDOTAUserMsg_PauseMinigameData>(() => new CDOTAUserMsg_PauseMinigameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_PauseMinigameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PauseMinigameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PauseMinigameData(CDOTAUserMsg_PauseMinigameData other) : this() {
      dataBits_ = other.dataBits_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PauseMinigameData Clone() {
      return new CDOTAUserMsg_PauseMinigameData(this);
    }

    /// <summary>Field number for the "data_bits" field.</summary>
    public const int DataBitsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_PauseMinigameData.Types.DataBit> _repeated_dataBits_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CDOTAUserMsg_PauseMinigameData.Types.DataBit.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_PauseMinigameData.Types.DataBit> dataBits_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_PauseMinigameData.Types.DataBit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_PauseMinigameData.Types.DataBit> DataBits {
      get { return dataBits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_PauseMinigameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_PauseMinigameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataBits_.Equals(other.dataBits_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataBits_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dataBits_.WriteTo(output, _repeated_dataBits_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dataBits_.WriteTo(ref output, _repeated_dataBits_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dataBits_.CalculateSize(_repeated_dataBits_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_PauseMinigameData other) {
      if (other == null) {
        return;
      }
      dataBits_.Add(other.dataBits_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataBits_.AddEntriesFrom(input, _repeated_dataBits_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dataBits_.AddEntriesFrom(ref input, _repeated_dataBits_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_PauseMinigameData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class DataBit : pb::IMessage<DataBit>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DataBit> _parser = new pb::MessageParser<DataBit>(() => new DataBit());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DataBit> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_PauseMinigameData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataBit() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataBit(DataBit other) : this() {
          _hasBits0 = other._hasBits0;
          index_ = other.index_;
          data_ = other.data_;
          dataExtra_ = other.dataExtra_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataBit Clone() {
          return new DataBit(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private readonly static uint IndexDefaultValue = 0;

        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { if ((_hasBits0 & 1) != 0) { return index_; } else { return IndexDefaultValue; } }
          set {
            _hasBits0 |= 1;
            index_ = value;
          }
        }
        /// <summary>Gets whether the "index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIndex {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIndex() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;
        private readonly static int DataDefaultValue = 0;

        private int data_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Data {
          get { if ((_hasBits0 & 2) != 0) { return data_; } else { return DataDefaultValue; } }
          set {
            _hasBits0 |= 2;
            data_ = value;
          }
        }
        /// <summary>Gets whether the "data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasData {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "data_extra" field.</summary>
        public const int DataExtraFieldNumber = 3;
        private readonly static long DataExtraDefaultValue = 0L;

        private long dataExtra_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DataExtra {
          get { if ((_hasBits0 & 4) != 0) { return dataExtra_; } else { return DataExtraDefaultValue; } }
          set {
            _hasBits0 |= 4;
            dataExtra_ = value;
          }
        }
        /// <summary>Gets whether the "data_extra" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDataExtra {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "data_extra" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDataExtra() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DataBit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DataBit other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (Data != other.Data) return false;
          if (DataExtra != other.DataExtra) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasIndex) hash ^= Index.GetHashCode();
          if (HasData) hash ^= Data.GetHashCode();
          if (HasDataExtra) hash ^= DataExtra.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasIndex) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (HasData) {
            output.WriteRawTag(16);
            output.WriteInt32(Data);
          }
          if (HasDataExtra) {
            output.WriteRawTag(24);
            output.WriteInt64(DataExtra);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasIndex) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (HasData) {
            output.WriteRawTag(16);
            output.WriteInt32(Data);
          }
          if (HasDataExtra) {
            output.WriteRawTag(24);
            output.WriteInt64(DataExtra);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasIndex) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (HasData) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data);
          }
          if (HasDataExtra) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(DataExtra);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DataBit other) {
          if (other == null) {
            return;
          }
          if (other.HasIndex) {
            Index = other.Index;
          }
          if (other.HasData) {
            Data = other.Data;
          }
          if (other.HasDataExtra) {
            DataExtra = other.DataExtra;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                Data = input.ReadInt32();
                break;
              }
              case 24: {
                DataExtra = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                Data = input.ReadInt32();
                break;
              }
              case 24: {
                DataExtra = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_VersusScene_PlayerBehavior : pb::IMessage<CDOTAUserMsg_VersusScene_PlayerBehavior>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_VersusScene_PlayerBehavior> _parser = new pb::MessageParser<CDOTAUserMsg_VersusScene_PlayerBehavior>(() => new CDOTAUserMsg_VersusScene_PlayerBehavior());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_VersusScene_PlayerBehavior> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VersusScene_PlayerBehavior() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VersusScene_PlayerBehavior(CDOTAUserMsg_VersusScene_PlayerBehavior other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      behavior_ = other.behavior_;
      playActivity_ = other.playActivity_ != null ? other.playActivity_.Clone() : null;
      chatWheel_ = other.chatWheel_ != null ? other.chatWheel_.Clone() : null;
      playbackRate_ = other.playbackRate_ != null ? other.playbackRate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_VersusScene_PlayerBehavior Clone() {
      return new CDOTAUserMsg_VersusScene_PlayerBehavior(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "behavior" field.</summary>
    public const int BehaviorFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.EDOTAVersusScenePlayerBehavior BehaviorDefaultValue = global::Steam.Protos.Dota2.EDOTAVersusScenePlayerBehavior.VsPlayerBehaviorPlayActivity;

    private global::Steam.Protos.Dota2.EDOTAVersusScenePlayerBehavior behavior_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.EDOTAVersusScenePlayerBehavior Behavior {
      get { if ((_hasBits0 & 2) != 0) { return behavior_; } else { return BehaviorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        behavior_ = value;
      }
    }
    /// <summary>Gets whether the "behavior" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBehavior {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "behavior" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBehavior() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "play_activity" field.</summary>
    public const int PlayActivityFieldNumber = 3;
    private global::Steam.Protos.Dota2.VersusScene_PlayActivity playActivity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.VersusScene_PlayActivity PlayActivity {
      get { return playActivity_; }
      set {
        playActivity_ = value;
      }
    }

    /// <summary>Field number for the "chat_wheel" field.</summary>
    public const int ChatWheelFieldNumber = 4;
    private global::Steam.Protos.Dota2.VersusScene_ChatWheel chatWheel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.VersusScene_ChatWheel ChatWheel {
      get { return chatWheel_; }
      set {
        chatWheel_ = value;
      }
    }

    /// <summary>Field number for the "playback_rate" field.</summary>
    public const int PlaybackRateFieldNumber = 5;
    private global::Steam.Protos.Dota2.VersusScene_PlaybackRate playbackRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.VersusScene_PlaybackRate PlaybackRate {
      get { return playbackRate_; }
      set {
        playbackRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_VersusScene_PlayerBehavior);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_VersusScene_PlayerBehavior other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Behavior != other.Behavior) return false;
      if (!object.Equals(PlayActivity, other.PlayActivity)) return false;
      if (!object.Equals(ChatWheel, other.ChatWheel)) return false;
      if (!object.Equals(PlaybackRate, other.PlaybackRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasBehavior) hash ^= Behavior.GetHashCode();
      if (playActivity_ != null) hash ^= PlayActivity.GetHashCode();
      if (chatWheel_ != null) hash ^= ChatWheel.GetHashCode();
      if (playbackRate_ != null) hash ^= PlaybackRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasBehavior) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Behavior);
      }
      if (playActivity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayActivity);
      }
      if (chatWheel_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ChatWheel);
      }
      if (playbackRate_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlaybackRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasBehavior) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Behavior);
      }
      if (playActivity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayActivity);
      }
      if (chatWheel_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ChatWheel);
      }
      if (playbackRate_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlaybackRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasBehavior) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Behavior);
      }
      if (playActivity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayActivity);
      }
      if (chatWheel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatWheel);
      }
      if (playbackRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaybackRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_VersusScene_PlayerBehavior other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasBehavior) {
        Behavior = other.Behavior;
      }
      if (other.playActivity_ != null) {
        if (playActivity_ == null) {
          PlayActivity = new global::Steam.Protos.Dota2.VersusScene_PlayActivity();
        }
        PlayActivity.MergeFrom(other.PlayActivity);
      }
      if (other.chatWheel_ != null) {
        if (chatWheel_ == null) {
          ChatWheel = new global::Steam.Protos.Dota2.VersusScene_ChatWheel();
        }
        ChatWheel.MergeFrom(other.ChatWheel);
      }
      if (other.playbackRate_ != null) {
        if (playbackRate_ == null) {
          PlaybackRate = new global::Steam.Protos.Dota2.VersusScene_PlaybackRate();
        }
        PlaybackRate.MergeFrom(other.PlaybackRate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Behavior = (global::Steam.Protos.Dota2.EDOTAVersusScenePlayerBehavior) input.ReadEnum();
            break;
          }
          case 26: {
            if (playActivity_ == null) {
              PlayActivity = new global::Steam.Protos.Dota2.VersusScene_PlayActivity();
            }
            input.ReadMessage(PlayActivity);
            break;
          }
          case 34: {
            if (chatWheel_ == null) {
              ChatWheel = new global::Steam.Protos.Dota2.VersusScene_ChatWheel();
            }
            input.ReadMessage(ChatWheel);
            break;
          }
          case 42: {
            if (playbackRate_ == null) {
              PlaybackRate = new global::Steam.Protos.Dota2.VersusScene_PlaybackRate();
            }
            input.ReadMessage(PlaybackRate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Behavior = (global::Steam.Protos.Dota2.EDOTAVersusScenePlayerBehavior) input.ReadEnum();
            break;
          }
          case 26: {
            if (playActivity_ == null) {
              PlayActivity = new global::Steam.Protos.Dota2.VersusScene_PlayActivity();
            }
            input.ReadMessage(PlayActivity);
            break;
          }
          case 34: {
            if (chatWheel_ == null) {
              ChatWheel = new global::Steam.Protos.Dota2.VersusScene_ChatWheel();
            }
            input.ReadMessage(ChatWheel);
            break;
          }
          case 42: {
            if (playbackRate_ == null) {
              PlaybackRate = new global::Steam.Protos.Dota2.VersusScene_PlaybackRate();
            }
            input.ReadMessage(PlaybackRate);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_QoP_ArcanaSummary : pb::IMessage<CDOTAUserMsg_QoP_ArcanaSummary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_QoP_ArcanaSummary> _parser = new pb::MessageParser<CDOTAUserMsg_QoP_ArcanaSummary>(() => new CDOTAUserMsg_QoP_ArcanaSummary());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_QoP_ArcanaSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QoP_ArcanaSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QoP_ArcanaSummary(CDOTAUserMsg_QoP_ArcanaSummary other) : this() {
      _hasBits0 = other._hasBits0;
      ehandle_ = other.ehandle_;
      arcanaLevel_ = other.arcanaLevel_;
      playersHit_ = other.playersHit_;
      playersKilled_ = other.playersKilled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_QoP_ArcanaSummary Clone() {
      return new CDOTAUserMsg_QoP_ArcanaSummary(this);
    }

    /// <summary>Field number for the "ehandle" field.</summary>
    public const int EhandleFieldNumber = 1;
    private readonly static uint EhandleDefaultValue = 16777215;

    private uint ehandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ehandle {
      get { if ((_hasBits0 & 1) != 0) { return ehandle_; } else { return EhandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ehandle_ = value;
      }
    }
    /// <summary>Gets whether the "ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEhandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEhandle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "arcana_level" field.</summary>
    public const int ArcanaLevelFieldNumber = 2;
    private readonly static uint ArcanaLevelDefaultValue = 0;

    private uint arcanaLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArcanaLevel {
      get { if ((_hasBits0 & 2) != 0) { return arcanaLevel_; } else { return ArcanaLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        arcanaLevel_ = value;
      }
    }
    /// <summary>Gets whether the "arcana_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArcanaLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "arcana_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArcanaLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "players_hit" field.</summary>
    public const int PlayersHitFieldNumber = 3;
    private readonly static uint PlayersHitDefaultValue = 0;

    private uint playersHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayersHit {
      get { if ((_hasBits0 & 4) != 0) { return playersHit_; } else { return PlayersHitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        playersHit_ = value;
      }
    }
    /// <summary>Gets whether the "players_hit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayersHit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "players_hit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayersHit() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "players_killed" field.</summary>
    public const int PlayersKilledFieldNumber = 4;
    private readonly static uint PlayersKilledDefaultValue = 0;

    private uint playersKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayersKilled {
      get { if ((_hasBits0 & 8) != 0) { return playersKilled_; } else { return PlayersKilledDefaultValue; } }
      set {
        _hasBits0 |= 8;
        playersKilled_ = value;
      }
    }
    /// <summary>Gets whether the "players_killed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayersKilled {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "players_killed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayersKilled() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_QoP_ArcanaSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_QoP_ArcanaSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ehandle != other.Ehandle) return false;
      if (ArcanaLevel != other.ArcanaLevel) return false;
      if (PlayersHit != other.PlayersHit) return false;
      if (PlayersKilled != other.PlayersKilled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEhandle) hash ^= Ehandle.GetHashCode();
      if (HasArcanaLevel) hash ^= ArcanaLevel.GetHashCode();
      if (HasPlayersHit) hash ^= PlayersHit.GetHashCode();
      if (HasPlayersKilled) hash ^= PlayersKilled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(ArcanaLevel);
      }
      if (HasPlayersHit) {
        output.WriteRawTag(24);
        output.WriteUInt32(PlayersHit);
      }
      if (HasPlayersKilled) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlayersKilled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(ArcanaLevel);
      }
      if (HasPlayersHit) {
        output.WriteRawTag(24);
        output.WriteUInt32(PlayersHit);
      }
      if (HasPlayersKilled) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlayersKilled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ehandle);
      }
      if (HasArcanaLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArcanaLevel);
      }
      if (HasPlayersHit) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayersHit);
      }
      if (HasPlayersKilled) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayersKilled);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_QoP_ArcanaSummary other) {
      if (other == null) {
        return;
      }
      if (other.HasEhandle) {
        Ehandle = other.Ehandle;
      }
      if (other.HasArcanaLevel) {
        ArcanaLevel = other.ArcanaLevel;
      }
      if (other.HasPlayersHit) {
        PlayersHit = other.PlayersHit;
      }
      if (other.HasPlayersKilled) {
        PlayersKilled = other.PlayersKilled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            PlayersHit = input.ReadUInt32();
            break;
          }
          case 32: {
            PlayersKilled = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            PlayersHit = input.ReadUInt32();
            break;
          }
          case 32: {
            PlayersKilled = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_HotPotato_Created : pb::IMessage<CDOTAUserMsg_HotPotato_Created>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_HotPotato_Created> _parser = new pb::MessageParser<CDOTAUserMsg_HotPotato_Created>(() => new CDOTAUserMsg_HotPotato_Created());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HotPotato_Created> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HotPotato_Created() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HotPotato_Created(CDOTAUserMsg_HotPotato_Created other) : this() {
      _hasBits0 = other._hasBits0;
      playerId1_ = other.playerId1_;
      playerId2_ = other.playerId2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HotPotato_Created Clone() {
      return new CDOTAUserMsg_HotPotato_Created(this);
    }

    /// <summary>Field number for the "player_id_1" field.</summary>
    public const int PlayerId1FieldNumber = 1;
    private readonly static int PlayerId1DefaultValue = -1;

    private int playerId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId1 {
      get { if ((_hasBits0 & 1) != 0) { return playerId1_; } else { return PlayerId1DefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId1_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId1 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id_1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId1() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_id_2" field.</summary>
    public const int PlayerId2FieldNumber = 2;
    private readonly static int PlayerId2DefaultValue = -1;

    private int playerId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId2 {
      get { if ((_hasBits0 & 2) != 0) { return playerId2_; } else { return PlayerId2DefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerId2_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId2 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_id_2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId2() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HotPotato_Created);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HotPotato_Created other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId1 != other.PlayerId1) return false;
      if (PlayerId2 != other.PlayerId2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId1) hash ^= PlayerId1.GetHashCode();
      if (HasPlayerId2) hash ^= PlayerId2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId1) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId1);
      }
      if (HasPlayerId2) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId1) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId1);
      }
      if (HasPlayerId2) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId1);
      }
      if (HasPlayerId2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HotPotato_Created other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId1) {
        PlayerId1 = other.PlayerId1;
      }
      if (other.HasPlayerId2) {
        PlayerId2 = other.PlayerId2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId1 = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId2 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId1 = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId2 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_HotPotato_Exploded : pb::IMessage<CDOTAUserMsg_HotPotato_Exploded>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_HotPotato_Exploded> _parser = new pb::MessageParser<CDOTAUserMsg_HotPotato_Exploded>(() => new CDOTAUserMsg_HotPotato_Exploded());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_HotPotato_Exploded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HotPotato_Exploded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HotPotato_Exploded(CDOTAUserMsg_HotPotato_Exploded other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_HotPotato_Exploded Clone() {
      return new CDOTAUserMsg_HotPotato_Exploded(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_HotPotato_Exploded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_HotPotato_Exploded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_HotPotato_Exploded other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_WK_Arcana_Progress : pb::IMessage<CDOTAUserMsg_WK_Arcana_Progress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_WK_Arcana_Progress> _parser = new pb::MessageParser<CDOTAUserMsg_WK_Arcana_Progress>(() => new CDOTAUserMsg_WK_Arcana_Progress());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_WK_Arcana_Progress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WK_Arcana_Progress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WK_Arcana_Progress(CDOTAUserMsg_WK_Arcana_Progress other) : this() {
      _hasBits0 = other._hasBits0;
      ehandle_ = other.ehandle_;
      arcanaLevel_ = other.arcanaLevel_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WK_Arcana_Progress Clone() {
      return new CDOTAUserMsg_WK_Arcana_Progress(this);
    }

    /// <summary>Field number for the "ehandle" field.</summary>
    public const int EhandleFieldNumber = 1;
    private readonly static uint EhandleDefaultValue = 16777215;

    private uint ehandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ehandle {
      get { if ((_hasBits0 & 1) != 0) { return ehandle_; } else { return EhandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ehandle_ = value;
      }
    }
    /// <summary>Gets whether the "ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEhandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEhandle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "arcana_level" field.</summary>
    public const int ArcanaLevelFieldNumber = 2;
    private readonly static uint ArcanaLevelDefaultValue = 0;

    private uint arcanaLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArcanaLevel {
      get { if ((_hasBits0 & 2) != 0) { return arcanaLevel_; } else { return ArcanaLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        arcanaLevel_ = value;
      }
    }
    /// <summary>Gets whether the "arcana_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArcanaLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "arcana_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArcanaLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private readonly static int HeroIdDefaultValue = 0;

    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return HeroIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_WK_Arcana_Progress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_WK_Arcana_Progress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ehandle != other.Ehandle) return false;
      if (ArcanaLevel != other.ArcanaLevel) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEhandle) hash ^= Ehandle.GetHashCode();
      if (HasArcanaLevel) hash ^= ArcanaLevel.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(ArcanaLevel);
      }
      if (HasHeroId) {
        output.WriteRawTag(24);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(ArcanaLevel);
      }
      if (HasHeroId) {
        output.WriteRawTag(24);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ehandle);
      }
      if (HasArcanaLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArcanaLevel);
      }
      if (HasHeroId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_WK_Arcana_Progress other) {
      if (other == null) {
        return;
      }
      if (other.HasEhandle) {
        Ehandle = other.Ehandle;
      }
      if (other.HasArcanaLevel) {
        ArcanaLevel = other.ArcanaLevel;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_GuildChallenge_Progress : pb::IMessage<CDOTAUserMsg_GuildChallenge_Progress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_GuildChallenge_Progress> _parser = new pb::MessageParser<CDOTAUserMsg_GuildChallenge_Progress>(() => new CDOTAUserMsg_GuildChallenge_Progress());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_GuildChallenge_Progress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[146]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GuildChallenge_Progress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GuildChallenge_Progress(CDOTAUserMsg_GuildChallenge_Progress other) : this() {
      _hasBits0 = other._hasBits0;
      playerProgress_ = other.playerProgress_.Clone();
      guildId_ = other.guildId_;
      challengeInstanceId_ = other.challengeInstanceId_;
      challengeParameter_ = other.challengeParameter_;
      challengeType_ = other.challengeType_;
      challengeProgressAtStart_ = other.challengeProgressAtStart_;
      complete_ = other.complete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_GuildChallenge_Progress Clone() {
      return new CDOTAUserMsg_GuildChallenge_Progress(this);
    }

    /// <summary>Field number for the "player_progress" field.</summary>
    public const int PlayerProgressFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.PlayerProgress> _repeated_playerProgress_codec
        = pb::FieldCodec.ForMessage(10, global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.PlayerProgress.Parser);
    private readonly pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.PlayerProgress> playerProgress_ = new pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.PlayerProgress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.PlayerProgress> PlayerProgress {
      get { return playerProgress_; }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private readonly static uint GuildIdDefaultValue = 0;

    private uint guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildId {
      get { if ((_hasBits0 & 1) != 0) { return guildId_; } else { return GuildIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        guildId_ = value;
      }
    }
    /// <summary>Gets whether the "guild_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuildId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "guild_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuildId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "challenge_instance_id" field.</summary>
    public const int ChallengeInstanceIdFieldNumber = 3;
    private readonly static uint ChallengeInstanceIdDefaultValue = 0;

    private uint challengeInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeInstanceId {
      get { if ((_hasBits0 & 2) != 0) { return challengeInstanceId_; } else { return ChallengeInstanceIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        challengeInstanceId_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_instance_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeInstanceId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "challenge_instance_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeInstanceId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "challenge_parameter" field.</summary>
    public const int ChallengeParameterFieldNumber = 4;
    private readonly static uint ChallengeParameterDefaultValue = 0;

    private uint challengeParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeParameter {
      get { if ((_hasBits0 & 4) != 0) { return challengeParameter_; } else { return ChallengeParameterDefaultValue; } }
      set {
        _hasBits0 |= 4;
        challengeParameter_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_parameter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeParameter {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "challenge_parameter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeParameter() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "challenge_type" field.</summary>
    public const int ChallengeTypeFieldNumber = 5;
    private readonly static global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.EChallengeType ChallengeTypeDefaultValue = global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.EChallengeType.KEchallengeTypeInvalid;

    private global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.EChallengeType challengeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.EChallengeType ChallengeType {
      get { if ((_hasBits0 & 8) != 0) { return challengeType_; } else { return ChallengeTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        challengeType_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "challenge_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "challenge_progress_at_start" field.</summary>
    public const int ChallengeProgressAtStartFieldNumber = 7;
    private readonly static uint ChallengeProgressAtStartDefaultValue = 0;

    private uint challengeProgressAtStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeProgressAtStart {
      get { if ((_hasBits0 & 16) != 0) { return challengeProgressAtStart_; } else { return ChallengeProgressAtStartDefaultValue; } }
      set {
        _hasBits0 |= 16;
        challengeProgressAtStart_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_progress_at_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallengeProgressAtStart {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "challenge_progress_at_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallengeProgressAtStart() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 8;
    private readonly static bool CompleteDefaultValue = false;

    private bool complete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { if ((_hasBits0 & 32) != 0) { return complete_; } else { return CompleteDefaultValue; } }
      set {
        _hasBits0 |= 32;
        complete_ = value;
      }
    }
    /// <summary>Gets whether the "complete" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComplete {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "complete" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComplete() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_GuildChallenge_Progress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_GuildChallenge_Progress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerProgress_.Equals(other.playerProgress_)) return false;
      if (GuildId != other.GuildId) return false;
      if (ChallengeInstanceId != other.ChallengeInstanceId) return false;
      if (ChallengeParameter != other.ChallengeParameter) return false;
      if (ChallengeType != other.ChallengeType) return false;
      if (ChallengeProgressAtStart != other.ChallengeProgressAtStart) return false;
      if (Complete != other.Complete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerProgress_.GetHashCode();
      if (HasGuildId) hash ^= GuildId.GetHashCode();
      if (HasChallengeInstanceId) hash ^= ChallengeInstanceId.GetHashCode();
      if (HasChallengeParameter) hash ^= ChallengeParameter.GetHashCode();
      if (HasChallengeType) hash ^= ChallengeType.GetHashCode();
      if (HasChallengeProgressAtStart) hash ^= ChallengeProgressAtStart.GetHashCode();
      if (HasComplete) hash ^= Complete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      playerProgress_.WriteTo(output, _repeated_playerProgress_codec);
      if (HasGuildId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GuildId);
      }
      if (HasChallengeInstanceId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChallengeInstanceId);
      }
      if (HasChallengeParameter) {
        output.WriteRawTag(32);
        output.WriteUInt32(ChallengeParameter);
      }
      if (HasChallengeType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ChallengeType);
      }
      if (HasChallengeProgressAtStart) {
        output.WriteRawTag(56);
        output.WriteUInt32(ChallengeProgressAtStart);
      }
      if (HasComplete) {
        output.WriteRawTag(64);
        output.WriteBool(Complete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      playerProgress_.WriteTo(ref output, _repeated_playerProgress_codec);
      if (HasGuildId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GuildId);
      }
      if (HasChallengeInstanceId) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChallengeInstanceId);
      }
      if (HasChallengeParameter) {
        output.WriteRawTag(32);
        output.WriteUInt32(ChallengeParameter);
      }
      if (HasChallengeType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ChallengeType);
      }
      if (HasChallengeProgressAtStart) {
        output.WriteRawTag(56);
        output.WriteUInt32(ChallengeProgressAtStart);
      }
      if (HasComplete) {
        output.WriteRawTag(64);
        output.WriteBool(Complete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerProgress_.CalculateSize(_repeated_playerProgress_codec);
      if (HasGuildId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildId);
      }
      if (HasChallengeInstanceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeInstanceId);
      }
      if (HasChallengeParameter) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeParameter);
      }
      if (HasChallengeType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChallengeType);
      }
      if (HasChallengeProgressAtStart) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeProgressAtStart);
      }
      if (HasComplete) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_GuildChallenge_Progress other) {
      if (other == null) {
        return;
      }
      playerProgress_.Add(other.playerProgress_);
      if (other.HasGuildId) {
        GuildId = other.GuildId;
      }
      if (other.HasChallengeInstanceId) {
        ChallengeInstanceId = other.ChallengeInstanceId;
      }
      if (other.HasChallengeParameter) {
        ChallengeParameter = other.ChallengeParameter;
      }
      if (other.HasChallengeType) {
        ChallengeType = other.ChallengeType;
      }
      if (other.HasChallengeProgressAtStart) {
        ChallengeProgressAtStart = other.ChallengeProgressAtStart;
      }
      if (other.HasComplete) {
        Complete = other.Complete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerProgress_.AddEntriesFrom(input, _repeated_playerProgress_codec);
            break;
          }
          case 16: {
            GuildId = input.ReadUInt32();
            break;
          }
          case 24: {
            ChallengeInstanceId = input.ReadUInt32();
            break;
          }
          case 32: {
            ChallengeParameter = input.ReadUInt32();
            break;
          }
          case 40: {
            ChallengeType = (global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.EChallengeType) input.ReadEnum();
            break;
          }
          case 56: {
            ChallengeProgressAtStart = input.ReadUInt32();
            break;
          }
          case 64: {
            Complete = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            playerProgress_.AddEntriesFrom(ref input, _repeated_playerProgress_codec);
            break;
          }
          case 16: {
            GuildId = input.ReadUInt32();
            break;
          }
          case 24: {
            ChallengeInstanceId = input.ReadUInt32();
            break;
          }
          case 32: {
            ChallengeParameter = input.ReadUInt32();
            break;
          }
          case 40: {
            ChallengeType = (global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Types.EChallengeType) input.ReadEnum();
            break;
          }
          case 56: {
            ChallengeProgressAtStart = input.ReadUInt32();
            break;
          }
          case 64: {
            Complete = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_GuildChallenge_Progress message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EChallengeType {
        [pbr::OriginalName("k_EChallengeType_Invalid")] KEchallengeTypeInvalid = 0,
        [pbr::OriginalName("k_EChallengeType_Cooperative")] KEchallengeTypeCooperative = 1,
        [pbr::OriginalName("k_EChallengeType_Contract")] KEchallengeTypeContract = 2,
      }

      public sealed partial class PlayerProgress : pb::IMessage<PlayerProgress>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerProgress> _parser = new pb::MessageParser<PlayerProgress>(() => new PlayerProgress());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Steam.Protos.Dota2.CDOTAUserMsg_GuildChallenge_Progress.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerProgress(PlayerProgress other) : this() {
          _hasBits0 = other._hasBits0;
          playerId_ = other.playerId_;
          progress_ = other.progress_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerProgress Clone() {
          return new PlayerProgress(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private readonly static int PlayerIdDefaultValue = -1;

        private int playerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerId {
          get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            playerId_ = value;
          }
        }
        /// <summary>Gets whether the "player_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPlayerId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "player_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPlayerId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "progress" field.</summary>
        public const int ProgressFieldNumber = 6;
        private readonly static uint ProgressDefaultValue = 0;

        private uint progress_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Progress {
          get { if ((_hasBits0 & 2) != 0) { return progress_; } else { return ProgressDefaultValue; } }
          set {
            _hasBits0 |= 2;
            progress_ = value;
          }
        }
        /// <summary>Gets whether the "progress" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProgress {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "progress" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProgress() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerId != other.PlayerId) return false;
          if (Progress != other.Progress) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPlayerId) hash ^= PlayerId.GetHashCode();
          if (HasProgress) hash ^= Progress.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPlayerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerId);
          }
          if (HasProgress) {
            output.WriteRawTag(48);
            output.WriteUInt32(Progress);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPlayerId) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerId);
          }
          if (HasProgress) {
            output.WriteRawTag(48);
            output.WriteUInt32(Progress);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPlayerId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
          }
          if (HasProgress) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Progress);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerProgress other) {
          if (other == null) {
            return;
          }
          if (other.HasPlayerId) {
            PlayerId = other.PlayerId;
          }
          if (other.HasProgress) {
            Progress = other.Progress;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerId = input.ReadInt32();
                break;
              }
              case 48: {
                Progress = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerId = input.ReadInt32();
                break;
              }
              case 48: {
                Progress = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CDOTAUserMsg_WRArcanaProgress : pb::IMessage<CDOTAUserMsg_WRArcanaProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_WRArcanaProgress> _parser = new pb::MessageParser<CDOTAUserMsg_WRArcanaProgress>(() => new CDOTAUserMsg_WRArcanaProgress());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_WRArcanaProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[147]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WRArcanaProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WRArcanaProgress(CDOTAUserMsg_WRArcanaProgress other) : this() {
      _hasBits0 = other._hasBits0;
      ehandle_ = other.ehandle_;
      targetEhandle_ = other.targetEhandle_;
      arrowsLanded_ = other.arrowsLanded_;
      damageDealt_ = other.damageDealt_;
      targetHp_ = other.targetHp_;
      targetMaxHp_ = other.targetMaxHp_;
      arcanaLevel_ = other.arcanaLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WRArcanaProgress Clone() {
      return new CDOTAUserMsg_WRArcanaProgress(this);
    }

    /// <summary>Field number for the "ehandle" field.</summary>
    public const int EhandleFieldNumber = 1;
    private readonly static uint EhandleDefaultValue = 16777215;

    private uint ehandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ehandle {
      get { if ((_hasBits0 & 1) != 0) { return ehandle_; } else { return EhandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ehandle_ = value;
      }
    }
    /// <summary>Gets whether the "ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEhandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEhandle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_ehandle" field.</summary>
    public const int TargetEhandleFieldNumber = 2;
    private readonly static uint TargetEhandleDefaultValue = 16777215;

    private uint targetEhandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetEhandle {
      get { if ((_hasBits0 & 2) != 0) { return targetEhandle_; } else { return TargetEhandleDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetEhandle_ = value;
      }
    }
    /// <summary>Gets whether the "target_ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEhandle {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEhandle() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "arrows_landed" field.</summary>
    public const int ArrowsLandedFieldNumber = 3;
    private readonly static uint ArrowsLandedDefaultValue = 0;

    private uint arrowsLanded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArrowsLanded {
      get { if ((_hasBits0 & 4) != 0) { return arrowsLanded_; } else { return ArrowsLandedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        arrowsLanded_ = value;
      }
    }
    /// <summary>Gets whether the "arrows_landed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArrowsLanded {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "arrows_landed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArrowsLanded() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "damage_dealt" field.</summary>
    public const int DamageDealtFieldNumber = 4;
    private readonly static uint DamageDealtDefaultValue = 0;

    private uint damageDealt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageDealt {
      get { if ((_hasBits0 & 8) != 0) { return damageDealt_; } else { return DamageDealtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        damageDealt_ = value;
      }
    }
    /// <summary>Gets whether the "damage_dealt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageDealt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "damage_dealt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageDealt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "target_hp" field.</summary>
    public const int TargetHpFieldNumber = 5;
    private readonly static uint TargetHpDefaultValue = 0;

    private uint targetHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetHp {
      get { if ((_hasBits0 & 16) != 0) { return targetHp_; } else { return TargetHpDefaultValue; } }
      set {
        _hasBits0 |= 16;
        targetHp_ = value;
      }
    }
    /// <summary>Gets whether the "target_hp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetHp {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "target_hp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetHp() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "target_max_hp" field.</summary>
    public const int TargetMaxHpFieldNumber = 6;
    private readonly static uint TargetMaxHpDefaultValue = 0;

    private uint targetMaxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetMaxHp {
      get { if ((_hasBits0 & 32) != 0) { return targetMaxHp_; } else { return TargetMaxHpDefaultValue; } }
      set {
        _hasBits0 |= 32;
        targetMaxHp_ = value;
      }
    }
    /// <summary>Gets whether the "target_max_hp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetMaxHp {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "target_max_hp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetMaxHp() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "arcana_level" field.</summary>
    public const int ArcanaLevelFieldNumber = 7;
    private readonly static uint ArcanaLevelDefaultValue = 0;

    private uint arcanaLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArcanaLevel {
      get { if ((_hasBits0 & 64) != 0) { return arcanaLevel_; } else { return ArcanaLevelDefaultValue; } }
      set {
        _hasBits0 |= 64;
        arcanaLevel_ = value;
      }
    }
    /// <summary>Gets whether the "arcana_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArcanaLevel {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "arcana_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArcanaLevel() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_WRArcanaProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_WRArcanaProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ehandle != other.Ehandle) return false;
      if (TargetEhandle != other.TargetEhandle) return false;
      if (ArrowsLanded != other.ArrowsLanded) return false;
      if (DamageDealt != other.DamageDealt) return false;
      if (TargetHp != other.TargetHp) return false;
      if (TargetMaxHp != other.TargetMaxHp) return false;
      if (ArcanaLevel != other.ArcanaLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEhandle) hash ^= Ehandle.GetHashCode();
      if (HasTargetEhandle) hash ^= TargetEhandle.GetHashCode();
      if (HasArrowsLanded) hash ^= ArrowsLanded.GetHashCode();
      if (HasDamageDealt) hash ^= DamageDealt.GetHashCode();
      if (HasTargetHp) hash ^= TargetHp.GetHashCode();
      if (HasTargetMaxHp) hash ^= TargetMaxHp.GetHashCode();
      if (HasArcanaLevel) hash ^= ArcanaLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasTargetEhandle) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetEhandle);
      }
      if (HasArrowsLanded) {
        output.WriteRawTag(24);
        output.WriteUInt32(ArrowsLanded);
      }
      if (HasDamageDealt) {
        output.WriteRawTag(32);
        output.WriteUInt32(DamageDealt);
      }
      if (HasTargetHp) {
        output.WriteRawTag(40);
        output.WriteUInt32(TargetHp);
      }
      if (HasTargetMaxHp) {
        output.WriteRawTag(48);
        output.WriteUInt32(TargetMaxHp);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(56);
        output.WriteUInt32(ArcanaLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasTargetEhandle) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetEhandle);
      }
      if (HasArrowsLanded) {
        output.WriteRawTag(24);
        output.WriteUInt32(ArrowsLanded);
      }
      if (HasDamageDealt) {
        output.WriteRawTag(32);
        output.WriteUInt32(DamageDealt);
      }
      if (HasTargetHp) {
        output.WriteRawTag(40);
        output.WriteUInt32(TargetHp);
      }
      if (HasTargetMaxHp) {
        output.WriteRawTag(48);
        output.WriteUInt32(TargetMaxHp);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(56);
        output.WriteUInt32(ArcanaLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ehandle);
      }
      if (HasTargetEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEhandle);
      }
      if (HasArrowsLanded) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArrowsLanded);
      }
      if (HasDamageDealt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageDealt);
      }
      if (HasTargetHp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetHp);
      }
      if (HasTargetMaxHp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetMaxHp);
      }
      if (HasArcanaLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArcanaLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_WRArcanaProgress other) {
      if (other == null) {
        return;
      }
      if (other.HasEhandle) {
        Ehandle = other.Ehandle;
      }
      if (other.HasTargetEhandle) {
        TargetEhandle = other.TargetEhandle;
      }
      if (other.HasArrowsLanded) {
        ArrowsLanded = other.ArrowsLanded;
      }
      if (other.HasDamageDealt) {
        DamageDealt = other.DamageDealt;
      }
      if (other.HasTargetHp) {
        TargetHp = other.TargetHp;
      }
      if (other.HasTargetMaxHp) {
        TargetMaxHp = other.TargetMaxHp;
      }
      if (other.HasArcanaLevel) {
        ArcanaLevel = other.ArcanaLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetEhandle = input.ReadUInt32();
            break;
          }
          case 24: {
            ArrowsLanded = input.ReadUInt32();
            break;
          }
          case 32: {
            DamageDealt = input.ReadUInt32();
            break;
          }
          case 40: {
            TargetHp = input.ReadUInt32();
            break;
          }
          case 48: {
            TargetMaxHp = input.ReadUInt32();
            break;
          }
          case 56: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetEhandle = input.ReadUInt32();
            break;
          }
          case 24: {
            ArrowsLanded = input.ReadUInt32();
            break;
          }
          case 32: {
            DamageDealt = input.ReadUInt32();
            break;
          }
          case 40: {
            TargetHp = input.ReadUInt32();
            break;
          }
          case 48: {
            TargetMaxHp = input.ReadUInt32();
            break;
          }
          case 56: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_WRArcanaSummary : pb::IMessage<CDOTAUserMsg_WRArcanaSummary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_WRArcanaSummary> _parser = new pb::MessageParser<CDOTAUserMsg_WRArcanaSummary>(() => new CDOTAUserMsg_WRArcanaSummary());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_WRArcanaSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[148]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WRArcanaSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WRArcanaSummary(CDOTAUserMsg_WRArcanaSummary other) : this() {
      _hasBits0 = other._hasBits0;
      ehandle_ = other.ehandle_;
      targetEhandle_ = other.targetEhandle_;
      arrowsLanded_ = other.arrowsLanded_;
      damageDealt_ = other.damageDealt_;
      targetHp_ = other.targetHp_;
      targetMaxHp_ = other.targetMaxHp_;
      arcanaLevel_ = other.arcanaLevel_;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_WRArcanaSummary Clone() {
      return new CDOTAUserMsg_WRArcanaSummary(this);
    }

    /// <summary>Field number for the "ehandle" field.</summary>
    public const int EhandleFieldNumber = 1;
    private readonly static uint EhandleDefaultValue = 16777215;

    private uint ehandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ehandle {
      get { if ((_hasBits0 & 1) != 0) { return ehandle_; } else { return EhandleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ehandle_ = value;
      }
    }
    /// <summary>Gets whether the "ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEhandle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEhandle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_ehandle" field.</summary>
    public const int TargetEhandleFieldNumber = 2;
    private readonly static uint TargetEhandleDefaultValue = 16777215;

    private uint targetEhandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetEhandle {
      get { if ((_hasBits0 & 2) != 0) { return targetEhandle_; } else { return TargetEhandleDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetEhandle_ = value;
      }
    }
    /// <summary>Gets whether the "target_ehandle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEhandle {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_ehandle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEhandle() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "arrows_landed" field.</summary>
    public const int ArrowsLandedFieldNumber = 3;
    private readonly static uint ArrowsLandedDefaultValue = 0;

    private uint arrowsLanded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArrowsLanded {
      get { if ((_hasBits0 & 4) != 0) { return arrowsLanded_; } else { return ArrowsLandedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        arrowsLanded_ = value;
      }
    }
    /// <summary>Gets whether the "arrows_landed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArrowsLanded {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "arrows_landed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArrowsLanded() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "damage_dealt" field.</summary>
    public const int DamageDealtFieldNumber = 4;
    private readonly static uint DamageDealtDefaultValue = 0;

    private uint damageDealt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageDealt {
      get { if ((_hasBits0 & 8) != 0) { return damageDealt_; } else { return DamageDealtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        damageDealt_ = value;
      }
    }
    /// <summary>Gets whether the "damage_dealt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageDealt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "damage_dealt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageDealt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "target_hp" field.</summary>
    public const int TargetHpFieldNumber = 5;
    private readonly static uint TargetHpDefaultValue = 0;

    private uint targetHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetHp {
      get { if ((_hasBits0 & 16) != 0) { return targetHp_; } else { return TargetHpDefaultValue; } }
      set {
        _hasBits0 |= 16;
        targetHp_ = value;
      }
    }
    /// <summary>Gets whether the "target_hp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetHp {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "target_hp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetHp() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "target_max_hp" field.</summary>
    public const int TargetMaxHpFieldNumber = 6;
    private readonly static uint TargetMaxHpDefaultValue = 0;

    private uint targetMaxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetMaxHp {
      get { if ((_hasBits0 & 32) != 0) { return targetMaxHp_; } else { return TargetMaxHpDefaultValue; } }
      set {
        _hasBits0 |= 32;
        targetMaxHp_ = value;
      }
    }
    /// <summary>Gets whether the "target_max_hp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetMaxHp {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "target_max_hp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetMaxHp() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "arcana_level" field.</summary>
    public const int ArcanaLevelFieldNumber = 7;
    private readonly static uint ArcanaLevelDefaultValue = 0;

    private uint arcanaLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArcanaLevel {
      get { if ((_hasBits0 & 64) != 0) { return arcanaLevel_; } else { return ArcanaLevelDefaultValue; } }
      set {
        _hasBits0 |= 64;
        arcanaLevel_ = value;
      }
    }
    /// <summary>Gets whether the "arcana_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArcanaLevel {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "arcana_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArcanaLevel() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 8;
    private readonly static bool SuccessDefaultValue = false;

    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { if ((_hasBits0 & 128) != 0) { return success_; } else { return SuccessDefaultValue; } }
      set {
        _hasBits0 |= 128;
        success_ = value;
      }
    }
    /// <summary>Gets whether the "success" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuccess {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "success" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuccess() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_WRArcanaSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_WRArcanaSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ehandle != other.Ehandle) return false;
      if (TargetEhandle != other.TargetEhandle) return false;
      if (ArrowsLanded != other.ArrowsLanded) return false;
      if (DamageDealt != other.DamageDealt) return false;
      if (TargetHp != other.TargetHp) return false;
      if (TargetMaxHp != other.TargetMaxHp) return false;
      if (ArcanaLevel != other.ArcanaLevel) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEhandle) hash ^= Ehandle.GetHashCode();
      if (HasTargetEhandle) hash ^= TargetEhandle.GetHashCode();
      if (HasArrowsLanded) hash ^= ArrowsLanded.GetHashCode();
      if (HasDamageDealt) hash ^= DamageDealt.GetHashCode();
      if (HasTargetHp) hash ^= TargetHp.GetHashCode();
      if (HasTargetMaxHp) hash ^= TargetMaxHp.GetHashCode();
      if (HasArcanaLevel) hash ^= ArcanaLevel.GetHashCode();
      if (HasSuccess) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasTargetEhandle) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetEhandle);
      }
      if (HasArrowsLanded) {
        output.WriteRawTag(24);
        output.WriteUInt32(ArrowsLanded);
      }
      if (HasDamageDealt) {
        output.WriteRawTag(32);
        output.WriteUInt32(DamageDealt);
      }
      if (HasTargetHp) {
        output.WriteRawTag(40);
        output.WriteUInt32(TargetHp);
      }
      if (HasTargetMaxHp) {
        output.WriteRawTag(48);
        output.WriteUInt32(TargetMaxHp);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(56);
        output.WriteUInt32(ArcanaLevel);
      }
      if (HasSuccess) {
        output.WriteRawTag(64);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEhandle) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ehandle);
      }
      if (HasTargetEhandle) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetEhandle);
      }
      if (HasArrowsLanded) {
        output.WriteRawTag(24);
        output.WriteUInt32(ArrowsLanded);
      }
      if (HasDamageDealt) {
        output.WriteRawTag(32);
        output.WriteUInt32(DamageDealt);
      }
      if (HasTargetHp) {
        output.WriteRawTag(40);
        output.WriteUInt32(TargetHp);
      }
      if (HasTargetMaxHp) {
        output.WriteRawTag(48);
        output.WriteUInt32(TargetMaxHp);
      }
      if (HasArcanaLevel) {
        output.WriteRawTag(56);
        output.WriteUInt32(ArcanaLevel);
      }
      if (HasSuccess) {
        output.WriteRawTag(64);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ehandle);
      }
      if (HasTargetEhandle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEhandle);
      }
      if (HasArrowsLanded) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArrowsLanded);
      }
      if (HasDamageDealt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageDealt);
      }
      if (HasTargetHp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetHp);
      }
      if (HasTargetMaxHp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetMaxHp);
      }
      if (HasArcanaLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArcanaLevel);
      }
      if (HasSuccess) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_WRArcanaSummary other) {
      if (other == null) {
        return;
      }
      if (other.HasEhandle) {
        Ehandle = other.Ehandle;
      }
      if (other.HasTargetEhandle) {
        TargetEhandle = other.TargetEhandle;
      }
      if (other.HasArrowsLanded) {
        ArrowsLanded = other.ArrowsLanded;
      }
      if (other.HasDamageDealt) {
        DamageDealt = other.DamageDealt;
      }
      if (other.HasTargetHp) {
        TargetHp = other.TargetHp;
      }
      if (other.HasTargetMaxHp) {
        TargetMaxHp = other.TargetMaxHp;
      }
      if (other.HasArcanaLevel) {
        ArcanaLevel = other.ArcanaLevel;
      }
      if (other.HasSuccess) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetEhandle = input.ReadUInt32();
            break;
          }
          case 24: {
            ArrowsLanded = input.ReadUInt32();
            break;
          }
          case 32: {
            DamageDealt = input.ReadUInt32();
            break;
          }
          case 40: {
            TargetHp = input.ReadUInt32();
            break;
          }
          case 48: {
            TargetMaxHp = input.ReadUInt32();
            break;
          }
          case 56: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
          case 64: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ehandle = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetEhandle = input.ReadUInt32();
            break;
          }
          case 24: {
            ArrowsLanded = input.ReadUInt32();
            break;
          }
          case 32: {
            DamageDealt = input.ReadUInt32();
            break;
          }
          case 40: {
            TargetHp = input.ReadUInt32();
            break;
          }
          case 48: {
            TargetMaxHp = input.ReadUInt32();
            break;
          }
          case 56: {
            ArcanaLevel = input.ReadUInt32();
            break;
          }
          case 64: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_EmptyItemSlotAlert : pb::IMessage<CDOTAUserMsg_EmptyItemSlotAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_EmptyItemSlotAlert> _parser = new pb::MessageParser<CDOTAUserMsg_EmptyItemSlotAlert>(() => new CDOTAUserMsg_EmptyItemSlotAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_EmptyItemSlotAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[149]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EmptyItemSlotAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EmptyItemSlotAlert(CDOTAUserMsg_EmptyItemSlotAlert other) : this() {
      _hasBits0 = other._hasBits0;
      sourcePlayerId_ = other.sourcePlayerId_;
      targetPlayerId_ = other.targetPlayerId_;
      slotIndex_ = other.slotIndex_;
      cooldownSeconds_ = other.cooldownSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_EmptyItemSlotAlert Clone() {
      return new CDOTAUserMsg_EmptyItemSlotAlert(this);
    }

    /// <summary>Field number for the "source_player_id" field.</summary>
    public const int SourcePlayerIdFieldNumber = 1;
    private readonly static int SourcePlayerIdDefaultValue = -1;

    private int sourcePlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerId {
      get { if ((_hasBits0 & 1) != 0) { return sourcePlayerId_; } else { return SourcePlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sourcePlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "source_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourcePlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourcePlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_player_id" field.</summary>
    public const int TargetPlayerIdFieldNumber = 2;
    private readonly static int TargetPlayerIdDefaultValue = -1;

    private int targetPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerId {
      get { if ((_hasBits0 & 2) != 0) { return targetPlayerId_; } else { return TargetPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "target_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetPlayerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "slot_index" field.</summary>
    public const int SlotIndexFieldNumber = 3;
    private readonly static int SlotIndexDefaultValue = 0;

    private int slotIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotIndex {
      get { if ((_hasBits0 & 4) != 0) { return slotIndex_; } else { return SlotIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        slotIndex_ = value;
      }
    }
    /// <summary>Gets whether the "slot_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlotIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "slot_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlotIndex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cooldown_seconds" field.</summary>
    public const int CooldownSecondsFieldNumber = 4;
    private readonly static int CooldownSecondsDefaultValue = 0;

    private int cooldownSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CooldownSeconds {
      get { if ((_hasBits0 & 8) != 0) { return cooldownSeconds_; } else { return CooldownSecondsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cooldownSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "cooldown_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCooldownSeconds {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cooldown_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCooldownSeconds() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_EmptyItemSlotAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_EmptyItemSlotAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerId != other.SourcePlayerId) return false;
      if (TargetPlayerId != other.TargetPlayerId) return false;
      if (SlotIndex != other.SlotIndex) return false;
      if (CooldownSeconds != other.CooldownSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSourcePlayerId) hash ^= SourcePlayerId.GetHashCode();
      if (HasTargetPlayerId) hash ^= TargetPlayerId.GetHashCode();
      if (HasSlotIndex) hash ^= SlotIndex.GetHashCode();
      if (HasCooldownSeconds) hash ^= CooldownSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasSlotIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(SlotIndex);
      }
      if (HasCooldownSeconds) {
        output.WriteRawTag(32);
        output.WriteInt32(CooldownSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasSlotIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(SlotIndex);
      }
      if (HasCooldownSeconds) {
        output.WriteRawTag(32);
        output.WriteInt32(CooldownSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSourcePlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerId);
      }
      if (HasSlotIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotIndex);
      }
      if (HasCooldownSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CooldownSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_EmptyItemSlotAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasSourcePlayerId) {
        SourcePlayerId = other.SourcePlayerId;
      }
      if (other.HasTargetPlayerId) {
        TargetPlayerId = other.TargetPlayerId;
      }
      if (other.HasSlotIndex) {
        SlotIndex = other.SlotIndex;
      }
      if (other.HasCooldownSeconds) {
        CooldownSeconds = other.CooldownSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            SlotIndex = input.ReadInt32();
            break;
          }
          case 32: {
            CooldownSeconds = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            SlotIndex = input.ReadInt32();
            break;
          }
          case 32: {
            CooldownSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_AghsStatusAlert : pb::IMessage<CDOTAUserMsg_AghsStatusAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_AghsStatusAlert> _parser = new pb::MessageParser<CDOTAUserMsg_AghsStatusAlert>(() => new CDOTAUserMsg_AghsStatusAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_AghsStatusAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[150]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AghsStatusAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AghsStatusAlert(CDOTAUserMsg_AghsStatusAlert other) : this() {
      _hasBits0 = other._hasBits0;
      sourcePlayerId_ = other.sourcePlayerId_;
      targetPlayerId_ = other.targetPlayerId_;
      targetEntindex_ = other.targetEntindex_;
      alertType_ = other.alertType_;
      hasScepter_ = other.hasScepter_;
      hasShard_ = other.hasShard_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_AghsStatusAlert Clone() {
      return new CDOTAUserMsg_AghsStatusAlert(this);
    }

    /// <summary>Field number for the "source_player_id" field.</summary>
    public const int SourcePlayerIdFieldNumber = 1;
    private readonly static int SourcePlayerIdDefaultValue = -1;

    private int sourcePlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerId {
      get { if ((_hasBits0 & 1) != 0) { return sourcePlayerId_; } else { return SourcePlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sourcePlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "source_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourcePlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourcePlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_player_id" field.</summary>
    public const int TargetPlayerIdFieldNumber = 2;
    private readonly static int TargetPlayerIdDefaultValue = -1;

    private int targetPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayerId {
      get { if ((_hasBits0 & 2) != 0) { return targetPlayerId_; } else { return TargetPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "target_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetPlayerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 3;
    private readonly static int TargetEntindexDefaultValue = -1;

    private int targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetEntindex {
      get { if ((_hasBits0 & 4) != 0) { return targetEntindex_; } else { return TargetEntindexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        targetEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "target_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEntindex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "target_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEntindex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "alert_type" field.</summary>
    public const int AlertTypeFieldNumber = 4;
    private readonly static uint AlertTypeDefaultValue = 0;

    private uint alertType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AlertType {
      get { if ((_hasBits0 & 8) != 0) { return alertType_; } else { return AlertTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        alertType_ = value;
      }
    }
    /// <summary>Gets whether the "alert_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAlertType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "alert_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlertType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "has_scepter" field.</summary>
    public const int HasScepterFieldNumber = 5;
    private readonly static bool HasScepterDefaultValue = false;

    private bool hasScepter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScepter {
      get { if ((_hasBits0 & 16) != 0) { return hasScepter_; } else { return HasScepterDefaultValue; } }
      set {
        _hasBits0 |= 16;
        hasScepter_ = value;
      }
    }
    /// <summary>Gets whether the "has_scepter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasScepter {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "has_scepter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasScepter() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "has_shard" field.</summary>
    public const int HasShardFieldNumber = 6;
    private readonly static bool HasShardDefaultValue = false;

    private bool hasShard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShard {
      get { if ((_hasBits0 & 32) != 0) { return hasShard_; } else { return HasShardDefaultValue; } }
      set {
        _hasBits0 |= 32;
        hasShard_ = value;
      }
    }
    /// <summary>Gets whether the "has_shard" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasShard {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "has_shard" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasShard() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_AghsStatusAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_AghsStatusAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerId != other.SourcePlayerId) return false;
      if (TargetPlayerId != other.TargetPlayerId) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      if (AlertType != other.AlertType) return false;
      if (HasScepter != other.HasScepter) return false;
      if (HasShard != other.HasShard) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSourcePlayerId) hash ^= SourcePlayerId.GetHashCode();
      if (HasTargetPlayerId) hash ^= TargetPlayerId.GetHashCode();
      if (HasTargetEntindex) hash ^= TargetEntindex.GetHashCode();
      if (HasAlertType) hash ^= AlertType.GetHashCode();
      if (HasHasScepter) hash ^= HasScepter.GetHashCode();
      if (HasHasShard) hash ^= HasShard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetEntindex);
      }
      if (HasAlertType) {
        output.WriteRawTag(32);
        output.WriteUInt32(AlertType);
      }
      if (HasHasScepter) {
        output.WriteRawTag(40);
        output.WriteBool(HasScepter);
      }
      if (HasHasShard) {
        output.WriteRawTag(48);
        output.WriteBool(HasShard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPlayerId);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetEntindex);
      }
      if (HasAlertType) {
        output.WriteRawTag(32);
        output.WriteUInt32(AlertType);
      }
      if (HasHasScepter) {
        output.WriteRawTag(40);
        output.WriteBool(HasScepter);
      }
      if (HasHasShard) {
        output.WriteRawTag(48);
        output.WriteBool(HasShard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSourcePlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerId);
      }
      if (HasTargetPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerId);
      }
      if (HasTargetEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntindex);
      }
      if (HasAlertType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AlertType);
      }
      if (HasHasScepter) {
        size += 1 + 1;
      }
      if (HasHasShard) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_AghsStatusAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasSourcePlayerId) {
        SourcePlayerId = other.SourcePlayerId;
      }
      if (other.HasTargetPlayerId) {
        TargetPlayerId = other.TargetPlayerId;
      }
      if (other.HasTargetEntindex) {
        TargetEntindex = other.TargetEntindex;
      }
      if (other.HasAlertType) {
        AlertType = other.AlertType;
      }
      if (other.HasHasScepter) {
        HasScepter = other.HasScepter;
      }
      if (other.HasHasShard) {
        HasShard = other.HasShard;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 32: {
            AlertType = input.ReadUInt32();
            break;
          }
          case 40: {
            HasScepter = input.ReadBool();
            break;
          }
          case 48: {
            HasShard = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 32: {
            AlertType = input.ReadUInt32();
            break;
          }
          case 40: {
            HasScepter = input.ReadBool();
            break;
          }
          case 48: {
            HasShard = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_MutedPlayers : pb::IMessage<CDOTAUserMsg_MutedPlayers>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_MutedPlayers> _parser = new pb::MessageParser<CDOTAUserMsg_MutedPlayers>(() => new CDOTAUserMsg_MutedPlayers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MutedPlayers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[151]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MutedPlayers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MutedPlayers(CDOTAUserMsg_MutedPlayers other) : this() {
      textMutedPlayerIds_ = other.textMutedPlayerIds_.Clone();
      voiceMutedPlayerIds_ = other.voiceMutedPlayerIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MutedPlayers Clone() {
      return new CDOTAUserMsg_MutedPlayers(this);
    }

    /// <summary>Field number for the "text_muted_player_ids" field.</summary>
    public const int TextMutedPlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_textMutedPlayerIds_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> textMutedPlayerIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TextMutedPlayerIds {
      get { return textMutedPlayerIds_; }
    }

    /// <summary>Field number for the "voice_muted_player_ids" field.</summary>
    public const int VoiceMutedPlayerIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_voiceMutedPlayerIds_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> voiceMutedPlayerIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> VoiceMutedPlayerIds {
      get { return voiceMutedPlayerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MutedPlayers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MutedPlayers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!textMutedPlayerIds_.Equals(other.textMutedPlayerIds_)) return false;
      if(!voiceMutedPlayerIds_.Equals(other.voiceMutedPlayerIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= textMutedPlayerIds_.GetHashCode();
      hash ^= voiceMutedPlayerIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      textMutedPlayerIds_.WriteTo(output, _repeated_textMutedPlayerIds_codec);
      voiceMutedPlayerIds_.WriteTo(output, _repeated_voiceMutedPlayerIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      textMutedPlayerIds_.WriteTo(ref output, _repeated_textMutedPlayerIds_codec);
      voiceMutedPlayerIds_.WriteTo(ref output, _repeated_voiceMutedPlayerIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += textMutedPlayerIds_.CalculateSize(_repeated_textMutedPlayerIds_codec);
      size += voiceMutedPlayerIds_.CalculateSize(_repeated_voiceMutedPlayerIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MutedPlayers other) {
      if (other == null) {
        return;
      }
      textMutedPlayerIds_.Add(other.textMutedPlayerIds_);
      voiceMutedPlayerIds_.Add(other.voiceMutedPlayerIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            textMutedPlayerIds_.AddEntriesFrom(input, _repeated_textMutedPlayerIds_codec);
            break;
          }
          case 18:
          case 16: {
            voiceMutedPlayerIds_.AddEntriesFrom(input, _repeated_voiceMutedPlayerIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            textMutedPlayerIds_.AddEntriesFrom(ref input, _repeated_textMutedPlayerIds_codec);
            break;
          }
          case 18:
          case 16: {
            voiceMutedPlayerIds_.AddEntriesFrom(ref input, _repeated_voiceMutedPlayerIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ContextualTip : pb::IMessage<CDOTAUserMsg_ContextualTip>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ContextualTip> _parser = new pb::MessageParser<CDOTAUserMsg_ContextualTip>(() => new CDOTAUserMsg_ContextualTip());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ContextualTip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[152]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ContextualTip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ContextualTip(CDOTAUserMsg_ContextualTip other) : this() {
      _hasBits0 = other._hasBits0;
      tipId_ = other.tipId_;
      referencedAbilities_ = other.referencedAbilities_.Clone();
      referencedUnits_ = other.referencedUnits_.Clone();
      panoramaClasses_ = other.panoramaClasses_.Clone();
      forceAnnotation_ = other.forceAnnotation_;
      variant_ = other.variant_;
      intParam_ = other.intParam_;
      intParam2_ = other.intParam2_;
      floatParam_ = other.floatParam_;
      floatParam2_ = other.floatParam2_;
      stringParam_ = other.stringParam_;
      stringParam2_ = other.stringParam2_;
      tipTextOverride_ = other.tipTextOverride_;
      tipAnnotationOverride_ = other.tipAnnotationOverride_;
      panoramaSnippet_ = other.panoramaSnippet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ContextualTip Clone() {
      return new CDOTAUserMsg_ContextualTip(this);
    }

    /// <summary>Field number for the "tip_id" field.</summary>
    public const int TipIdFieldNumber = 1;
    private readonly static int TipIdDefaultValue = 0;

    private int tipId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TipId {
      get { if ((_hasBits0 & 1) != 0) { return tipId_; } else { return TipIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tipId_ = value;
      }
    }
    /// <summary>Gets whether the "tip_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTipId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tip_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTipId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "referenced_abilities" field.</summary>
    public const int ReferencedAbilitiesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_referencedAbilities_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> referencedAbilities_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReferencedAbilities {
      get { return referencedAbilities_; }
    }

    /// <summary>Field number for the "referenced_units" field.</summary>
    public const int ReferencedUnitsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_referencedUnits_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> referencedUnits_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReferencedUnits {
      get { return referencedUnits_; }
    }

    /// <summary>Field number for the "panorama_classes" field.</summary>
    public const int PanoramaClassesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_panoramaClasses_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> panoramaClasses_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PanoramaClasses {
      get { return panoramaClasses_; }
    }

    /// <summary>Field number for the "force_annotation" field.</summary>
    public const int ForceAnnotationFieldNumber = 5;
    private readonly static bool ForceAnnotationDefaultValue = false;

    private bool forceAnnotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceAnnotation {
      get { if ((_hasBits0 & 2) != 0) { return forceAnnotation_; } else { return ForceAnnotationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        forceAnnotation_ = value;
      }
    }
    /// <summary>Gets whether the "force_annotation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasForceAnnotation {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "force_annotation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearForceAnnotation() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "variant" field.</summary>
    public const int VariantFieldNumber = 6;
    private readonly static int VariantDefaultValue = 0;

    private int variant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Variant {
      get { if ((_hasBits0 & 4) != 0) { return variant_; } else { return VariantDefaultValue; } }
      set {
        _hasBits0 |= 4;
        variant_ = value;
      }
    }
    /// <summary>Gets whether the "variant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVariant {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "variant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVariant() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "int_param" field.</summary>
    public const int IntParamFieldNumber = 7;
    private readonly static int IntParamDefaultValue = 0;

    private int intParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntParam {
      get { if ((_hasBits0 & 8) != 0) { return intParam_; } else { return IntParamDefaultValue; } }
      set {
        _hasBits0 |= 8;
        intParam_ = value;
      }
    }
    /// <summary>Gets whether the "int_param" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntParam {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "int_param" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntParam() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "int_param2" field.</summary>
    public const int IntParam2FieldNumber = 8;
    private readonly static int IntParam2DefaultValue = 0;

    private int intParam2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntParam2 {
      get { if ((_hasBits0 & 16) != 0) { return intParam2_; } else { return IntParam2DefaultValue; } }
      set {
        _hasBits0 |= 16;
        intParam2_ = value;
      }
    }
    /// <summary>Gets whether the "int_param2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntParam2 {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "int_param2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntParam2() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "float_param" field.</summary>
    public const int FloatParamFieldNumber = 9;
    private readonly static float FloatParamDefaultValue = 0F;

    private float floatParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatParam {
      get { if ((_hasBits0 & 32) != 0) { return floatParam_; } else { return FloatParamDefaultValue; } }
      set {
        _hasBits0 |= 32;
        floatParam_ = value;
      }
    }
    /// <summary>Gets whether the "float_param" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloatParam {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "float_param" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloatParam() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "float_param2" field.</summary>
    public const int FloatParam2FieldNumber = 10;
    private readonly static float FloatParam2DefaultValue = 0F;

    private float floatParam2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatParam2 {
      get { if ((_hasBits0 & 64) != 0) { return floatParam2_; } else { return FloatParam2DefaultValue; } }
      set {
        _hasBits0 |= 64;
        floatParam2_ = value;
      }
    }
    /// <summary>Gets whether the "float_param2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloatParam2 {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "float_param2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloatParam2() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "string_param" field.</summary>
    public const int StringParamFieldNumber = 11;
    private readonly static string StringParamDefaultValue = "";

    private string stringParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringParam {
      get { return stringParam_ ?? StringParamDefaultValue; }
      set {
        stringParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "string_param" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStringParam {
      get { return stringParam_ != null; }
    }
    /// <summary>Clears the value of the "string_param" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStringParam() {
      stringParam_ = null;
    }

    /// <summary>Field number for the "string_param2" field.</summary>
    public const int StringParam2FieldNumber = 12;
    private readonly static string StringParam2DefaultValue = "";

    private string stringParam2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringParam2 {
      get { return stringParam2_ ?? StringParam2DefaultValue; }
      set {
        stringParam2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "string_param2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStringParam2 {
      get { return stringParam2_ != null; }
    }
    /// <summary>Clears the value of the "string_param2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStringParam2() {
      stringParam2_ = null;
    }

    /// <summary>Field number for the "tip_text_override" field.</summary>
    public const int TipTextOverrideFieldNumber = 13;
    private readonly static string TipTextOverrideDefaultValue = "";

    private string tipTextOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TipTextOverride {
      get { return tipTextOverride_ ?? TipTextOverrideDefaultValue; }
      set {
        tipTextOverride_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tip_text_override" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTipTextOverride {
      get { return tipTextOverride_ != null; }
    }
    /// <summary>Clears the value of the "tip_text_override" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTipTextOverride() {
      tipTextOverride_ = null;
    }

    /// <summary>Field number for the "tip_annotation_override" field.</summary>
    public const int TipAnnotationOverrideFieldNumber = 14;
    private readonly static string TipAnnotationOverrideDefaultValue = "";

    private string tipAnnotationOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TipAnnotationOverride {
      get { return tipAnnotationOverride_ ?? TipAnnotationOverrideDefaultValue; }
      set {
        tipAnnotationOverride_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tip_annotation_override" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTipAnnotationOverride {
      get { return tipAnnotationOverride_ != null; }
    }
    /// <summary>Clears the value of the "tip_annotation_override" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTipAnnotationOverride() {
      tipAnnotationOverride_ = null;
    }

    /// <summary>Field number for the "panorama_snippet" field.</summary>
    public const int PanoramaSnippetFieldNumber = 15;
    private readonly static string PanoramaSnippetDefaultValue = "";

    private string panoramaSnippet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PanoramaSnippet {
      get { return panoramaSnippet_ ?? PanoramaSnippetDefaultValue; }
      set {
        panoramaSnippet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "panorama_snippet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPanoramaSnippet {
      get { return panoramaSnippet_ != null; }
    }
    /// <summary>Clears the value of the "panorama_snippet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPanoramaSnippet() {
      panoramaSnippet_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ContextualTip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ContextualTip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TipId != other.TipId) return false;
      if(!referencedAbilities_.Equals(other.referencedAbilities_)) return false;
      if(!referencedUnits_.Equals(other.referencedUnits_)) return false;
      if(!panoramaClasses_.Equals(other.panoramaClasses_)) return false;
      if (ForceAnnotation != other.ForceAnnotation) return false;
      if (Variant != other.Variant) return false;
      if (IntParam != other.IntParam) return false;
      if (IntParam2 != other.IntParam2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatParam, other.FloatParam)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatParam2, other.FloatParam2)) return false;
      if (StringParam != other.StringParam) return false;
      if (StringParam2 != other.StringParam2) return false;
      if (TipTextOverride != other.TipTextOverride) return false;
      if (TipAnnotationOverride != other.TipAnnotationOverride) return false;
      if (PanoramaSnippet != other.PanoramaSnippet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTipId) hash ^= TipId.GetHashCode();
      hash ^= referencedAbilities_.GetHashCode();
      hash ^= referencedUnits_.GetHashCode();
      hash ^= panoramaClasses_.GetHashCode();
      if (HasForceAnnotation) hash ^= ForceAnnotation.GetHashCode();
      if (HasVariant) hash ^= Variant.GetHashCode();
      if (HasIntParam) hash ^= IntParam.GetHashCode();
      if (HasIntParam2) hash ^= IntParam2.GetHashCode();
      if (HasFloatParam) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatParam);
      if (HasFloatParam2) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatParam2);
      if (HasStringParam) hash ^= StringParam.GetHashCode();
      if (HasStringParam2) hash ^= StringParam2.GetHashCode();
      if (HasTipTextOverride) hash ^= TipTextOverride.GetHashCode();
      if (HasTipAnnotationOverride) hash ^= TipAnnotationOverride.GetHashCode();
      if (HasPanoramaSnippet) hash ^= PanoramaSnippet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTipId) {
        output.WriteRawTag(8);
        output.WriteInt32(TipId);
      }
      referencedAbilities_.WriteTo(output, _repeated_referencedAbilities_codec);
      referencedUnits_.WriteTo(output, _repeated_referencedUnits_codec);
      panoramaClasses_.WriteTo(output, _repeated_panoramaClasses_codec);
      if (HasForceAnnotation) {
        output.WriteRawTag(40);
        output.WriteBool(ForceAnnotation);
      }
      if (HasVariant) {
        output.WriteRawTag(48);
        output.WriteInt32(Variant);
      }
      if (HasIntParam) {
        output.WriteRawTag(56);
        output.WriteInt32(IntParam);
      }
      if (HasIntParam2) {
        output.WriteRawTag(64);
        output.WriteInt32(IntParam2);
      }
      if (HasFloatParam) {
        output.WriteRawTag(77);
        output.WriteFloat(FloatParam);
      }
      if (HasFloatParam2) {
        output.WriteRawTag(85);
        output.WriteFloat(FloatParam2);
      }
      if (HasStringParam) {
        output.WriteRawTag(90);
        output.WriteString(StringParam);
      }
      if (HasStringParam2) {
        output.WriteRawTag(98);
        output.WriteString(StringParam2);
      }
      if (HasTipTextOverride) {
        output.WriteRawTag(106);
        output.WriteString(TipTextOverride);
      }
      if (HasTipAnnotationOverride) {
        output.WriteRawTag(114);
        output.WriteString(TipAnnotationOverride);
      }
      if (HasPanoramaSnippet) {
        output.WriteRawTag(122);
        output.WriteString(PanoramaSnippet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTipId) {
        output.WriteRawTag(8);
        output.WriteInt32(TipId);
      }
      referencedAbilities_.WriteTo(ref output, _repeated_referencedAbilities_codec);
      referencedUnits_.WriteTo(ref output, _repeated_referencedUnits_codec);
      panoramaClasses_.WriteTo(ref output, _repeated_panoramaClasses_codec);
      if (HasForceAnnotation) {
        output.WriteRawTag(40);
        output.WriteBool(ForceAnnotation);
      }
      if (HasVariant) {
        output.WriteRawTag(48);
        output.WriteInt32(Variant);
      }
      if (HasIntParam) {
        output.WriteRawTag(56);
        output.WriteInt32(IntParam);
      }
      if (HasIntParam2) {
        output.WriteRawTag(64);
        output.WriteInt32(IntParam2);
      }
      if (HasFloatParam) {
        output.WriteRawTag(77);
        output.WriteFloat(FloatParam);
      }
      if (HasFloatParam2) {
        output.WriteRawTag(85);
        output.WriteFloat(FloatParam2);
      }
      if (HasStringParam) {
        output.WriteRawTag(90);
        output.WriteString(StringParam);
      }
      if (HasStringParam2) {
        output.WriteRawTag(98);
        output.WriteString(StringParam2);
      }
      if (HasTipTextOverride) {
        output.WriteRawTag(106);
        output.WriteString(TipTextOverride);
      }
      if (HasTipAnnotationOverride) {
        output.WriteRawTag(114);
        output.WriteString(TipAnnotationOverride);
      }
      if (HasPanoramaSnippet) {
        output.WriteRawTag(122);
        output.WriteString(PanoramaSnippet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTipId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TipId);
      }
      size += referencedAbilities_.CalculateSize(_repeated_referencedAbilities_codec);
      size += referencedUnits_.CalculateSize(_repeated_referencedUnits_codec);
      size += panoramaClasses_.CalculateSize(_repeated_panoramaClasses_codec);
      if (HasForceAnnotation) {
        size += 1 + 1;
      }
      if (HasVariant) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Variant);
      }
      if (HasIntParam) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntParam);
      }
      if (HasIntParam2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntParam2);
      }
      if (HasFloatParam) {
        size += 1 + 4;
      }
      if (HasFloatParam2) {
        size += 1 + 4;
      }
      if (HasStringParam) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringParam);
      }
      if (HasStringParam2) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringParam2);
      }
      if (HasTipTextOverride) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TipTextOverride);
      }
      if (HasTipAnnotationOverride) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TipAnnotationOverride);
      }
      if (HasPanoramaSnippet) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PanoramaSnippet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ContextualTip other) {
      if (other == null) {
        return;
      }
      if (other.HasTipId) {
        TipId = other.TipId;
      }
      referencedAbilities_.Add(other.referencedAbilities_);
      referencedUnits_.Add(other.referencedUnits_);
      panoramaClasses_.Add(other.panoramaClasses_);
      if (other.HasForceAnnotation) {
        ForceAnnotation = other.ForceAnnotation;
      }
      if (other.HasVariant) {
        Variant = other.Variant;
      }
      if (other.HasIntParam) {
        IntParam = other.IntParam;
      }
      if (other.HasIntParam2) {
        IntParam2 = other.IntParam2;
      }
      if (other.HasFloatParam) {
        FloatParam = other.FloatParam;
      }
      if (other.HasFloatParam2) {
        FloatParam2 = other.FloatParam2;
      }
      if (other.HasStringParam) {
        StringParam = other.StringParam;
      }
      if (other.HasStringParam2) {
        StringParam2 = other.StringParam2;
      }
      if (other.HasTipTextOverride) {
        TipTextOverride = other.TipTextOverride;
      }
      if (other.HasTipAnnotationOverride) {
        TipAnnotationOverride = other.TipAnnotationOverride;
      }
      if (other.HasPanoramaSnippet) {
        PanoramaSnippet = other.PanoramaSnippet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TipId = input.ReadInt32();
            break;
          }
          case 18: {
            referencedAbilities_.AddEntriesFrom(input, _repeated_referencedAbilities_codec);
            break;
          }
          case 26: {
            referencedUnits_.AddEntriesFrom(input, _repeated_referencedUnits_codec);
            break;
          }
          case 34: {
            panoramaClasses_.AddEntriesFrom(input, _repeated_panoramaClasses_codec);
            break;
          }
          case 40: {
            ForceAnnotation = input.ReadBool();
            break;
          }
          case 48: {
            Variant = input.ReadInt32();
            break;
          }
          case 56: {
            IntParam = input.ReadInt32();
            break;
          }
          case 64: {
            IntParam2 = input.ReadInt32();
            break;
          }
          case 77: {
            FloatParam = input.ReadFloat();
            break;
          }
          case 85: {
            FloatParam2 = input.ReadFloat();
            break;
          }
          case 90: {
            StringParam = input.ReadString();
            break;
          }
          case 98: {
            StringParam2 = input.ReadString();
            break;
          }
          case 106: {
            TipTextOverride = input.ReadString();
            break;
          }
          case 114: {
            TipAnnotationOverride = input.ReadString();
            break;
          }
          case 122: {
            PanoramaSnippet = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TipId = input.ReadInt32();
            break;
          }
          case 18: {
            referencedAbilities_.AddEntriesFrom(ref input, _repeated_referencedAbilities_codec);
            break;
          }
          case 26: {
            referencedUnits_.AddEntriesFrom(ref input, _repeated_referencedUnits_codec);
            break;
          }
          case 34: {
            panoramaClasses_.AddEntriesFrom(ref input, _repeated_panoramaClasses_codec);
            break;
          }
          case 40: {
            ForceAnnotation = input.ReadBool();
            break;
          }
          case 48: {
            Variant = input.ReadInt32();
            break;
          }
          case 56: {
            IntParam = input.ReadInt32();
            break;
          }
          case 64: {
            IntParam2 = input.ReadInt32();
            break;
          }
          case 77: {
            FloatParam = input.ReadFloat();
            break;
          }
          case 85: {
            FloatParam2 = input.ReadFloat();
            break;
          }
          case 90: {
            StringParam = input.ReadString();
            break;
          }
          case 98: {
            StringParam2 = input.ReadString();
            break;
          }
          case 106: {
            TipTextOverride = input.ReadString();
            break;
          }
          case 114: {
            TipAnnotationOverride = input.ReadString();
            break;
          }
          case 122: {
            PanoramaSnippet = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_ChatMessage : pb::IMessage<CDOTAUserMsg_ChatMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_ChatMessage> _parser = new pb::MessageParser<CDOTAUserMsg_ChatMessage>(() => new CDOTAUserMsg_ChatMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_ChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[153]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatMessage(CDOTAUserMsg_ChatMessage other) : this() {
      _hasBits0 = other._hasBits0;
      sourcePlayerId_ = other.sourcePlayerId_;
      channelType_ = other.channelType_;
      messageText_ = other.messageText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_ChatMessage Clone() {
      return new CDOTAUserMsg_ChatMessage(this);
    }

    /// <summary>Field number for the "source_player_id" field.</summary>
    public const int SourcePlayerIdFieldNumber = 1;
    private readonly static int SourcePlayerIdDefaultValue = -1;

    private int sourcePlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerId {
      get { if ((_hasBits0 & 1) != 0) { return sourcePlayerId_; } else { return SourcePlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sourcePlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "source_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourcePlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourcePlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 2;
    private readonly static uint ChannelTypeDefaultValue = 0;

    private uint channelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelType {
      get { if ((_hasBits0 & 2) != 0) { return channelType_; } else { return ChannelTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        channelType_ = value;
      }
    }
    /// <summary>Gets whether the "channel_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "channel_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "message_text" field.</summary>
    public const int MessageTextFieldNumber = 3;
    private readonly static string MessageTextDefaultValue = "";

    private string messageText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageText {
      get { return messageText_ ?? MessageTextDefaultValue; }
      set {
        messageText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message_text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageText {
      get { return messageText_ != null; }
    }
    /// <summary>Clears the value of the "message_text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageText() {
      messageText_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_ChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_ChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerId != other.SourcePlayerId) return false;
      if (ChannelType != other.ChannelType) return false;
      if (MessageText != other.MessageText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSourcePlayerId) hash ^= SourcePlayerId.GetHashCode();
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasMessageText) hash ^= MessageText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasChannelType) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelType);
      }
      if (HasMessageText) {
        output.WriteRawTag(26);
        output.WriteString(MessageText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSourcePlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerId);
      }
      if (HasChannelType) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelType);
      }
      if (HasMessageText) {
        output.WriteRawTag(26);
        output.WriteString(MessageText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSourcePlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerId);
      }
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelType);
      }
      if (HasMessageText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_ChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasSourcePlayerId) {
        SourcePlayerId = other.SourcePlayerId;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasMessageText) {
        MessageText = other.MessageText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelType = input.ReadUInt32();
            break;
          }
          case 26: {
            MessageText = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourcePlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelType = input.ReadUInt32();
            break;
          }
          case 26: {
            MessageText = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_RockPaperScissorsStarted : pb::IMessage<CDOTAUserMsg_RockPaperScissorsStarted>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_RockPaperScissorsStarted> _parser = new pb::MessageParser<CDOTAUserMsg_RockPaperScissorsStarted>(() => new CDOTAUserMsg_RockPaperScissorsStarted());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_RockPaperScissorsStarted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[154]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RockPaperScissorsStarted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RockPaperScissorsStarted(CDOTAUserMsg_RockPaperScissorsStarted other) : this() {
      _hasBits0 = other._hasBits0;
      playerIdSource_ = other.playerIdSource_;
      playerIdTarget_ = other.playerIdTarget_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RockPaperScissorsStarted Clone() {
      return new CDOTAUserMsg_RockPaperScissorsStarted(this);
    }

    /// <summary>Field number for the "player_id_source" field.</summary>
    public const int PlayerIdSourceFieldNumber = 1;
    private readonly static int PlayerIdSourceDefaultValue = -1;

    private int playerIdSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIdSource {
      get { if ((_hasBits0 & 1) != 0) { return playerIdSource_; } else { return PlayerIdSourceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerIdSource_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerIdSource {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id_source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerIdSource() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_id_target" field.</summary>
    public const int PlayerIdTargetFieldNumber = 2;
    private readonly static int PlayerIdTargetDefaultValue = -1;

    private int playerIdTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIdTarget {
      get { if ((_hasBits0 & 2) != 0) { return playerIdTarget_; } else { return PlayerIdTargetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerIdTarget_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_target" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerIdTarget {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_id_target" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerIdTarget() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_RockPaperScissorsStarted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_RockPaperScissorsStarted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdSource != other.PlayerIdSource) return false;
      if (PlayerIdTarget != other.PlayerIdTarget) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerIdSource) hash ^= PlayerIdSource.GetHashCode();
      if (HasPlayerIdTarget) hash ^= PlayerIdTarget.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerIdSource) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdSource);
      }
      if (HasPlayerIdTarget) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerIdTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerIdSource) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdSource);
      }
      if (HasPlayerIdTarget) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerIdTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerIdSource) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIdSource);
      }
      if (HasPlayerIdTarget) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIdTarget);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_RockPaperScissorsStarted other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerIdSource) {
        PlayerIdSource = other.PlayerIdSource;
      }
      if (other.HasPlayerIdTarget) {
        PlayerIdTarget = other.PlayerIdTarget;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIdSource = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerIdTarget = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerIdSource = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerIdTarget = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_RockPaperScissorsFinished : pb::IMessage<CDOTAUserMsg_RockPaperScissorsFinished>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_RockPaperScissorsFinished> _parser = new pb::MessageParser<CDOTAUserMsg_RockPaperScissorsFinished>(() => new CDOTAUserMsg_RockPaperScissorsFinished());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_RockPaperScissorsFinished> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[155]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RockPaperScissorsFinished() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RockPaperScissorsFinished(CDOTAUserMsg_RockPaperScissorsFinished other) : this() {
      _hasBits0 = other._hasBits0;
      playerId1_ = other.playerId1_;
      playerId2_ = other.playerId2_;
      player1Choice_ = other.player1Choice_;
      player2Choice_ = other.player2Choice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_RockPaperScissorsFinished Clone() {
      return new CDOTAUserMsg_RockPaperScissorsFinished(this);
    }

    /// <summary>Field number for the "player_id_1" field.</summary>
    public const int PlayerId1FieldNumber = 1;
    private readonly static int PlayerId1DefaultValue = -1;

    private int playerId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId1 {
      get { if ((_hasBits0 & 1) != 0) { return playerId1_; } else { return PlayerId1DefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId1_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId1 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id_1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId1() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_id_2" field.</summary>
    public const int PlayerId2FieldNumber = 2;
    private readonly static int PlayerId2DefaultValue = -1;

    private int playerId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId2 {
      get { if ((_hasBits0 & 2) != 0) { return playerId2_; } else { return PlayerId2DefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerId2_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId2 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_id_2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId2() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "player_1_choice" field.</summary>
    public const int Player1ChoiceFieldNumber = 3;
    private readonly static int Player1ChoiceDefaultValue = 0;

    private int player1Choice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1Choice {
      get { if ((_hasBits0 & 4) != 0) { return player1Choice_; } else { return Player1ChoiceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        player1Choice_ = value;
      }
    }
    /// <summary>Gets whether the "player_1_choice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayer1Choice {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "player_1_choice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayer1Choice() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "player_2_choice" field.</summary>
    public const int Player2ChoiceFieldNumber = 4;
    private readonly static int Player2ChoiceDefaultValue = 0;

    private int player2Choice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2Choice {
      get { if ((_hasBits0 & 8) != 0) { return player2Choice_; } else { return Player2ChoiceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        player2Choice_ = value;
      }
    }
    /// <summary>Gets whether the "player_2_choice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayer2Choice {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "player_2_choice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayer2Choice() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_RockPaperScissorsFinished);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_RockPaperScissorsFinished other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId1 != other.PlayerId1) return false;
      if (PlayerId2 != other.PlayerId2) return false;
      if (Player1Choice != other.Player1Choice) return false;
      if (Player2Choice != other.Player2Choice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId1) hash ^= PlayerId1.GetHashCode();
      if (HasPlayerId2) hash ^= PlayerId2.GetHashCode();
      if (HasPlayer1Choice) hash ^= Player1Choice.GetHashCode();
      if (HasPlayer2Choice) hash ^= Player2Choice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId1) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId1);
      }
      if (HasPlayerId2) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId2);
      }
      if (HasPlayer1Choice) {
        output.WriteRawTag(24);
        output.WriteInt32(Player1Choice);
      }
      if (HasPlayer2Choice) {
        output.WriteRawTag(32);
        output.WriteInt32(Player2Choice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId1) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId1);
      }
      if (HasPlayerId2) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId2);
      }
      if (HasPlayer1Choice) {
        output.WriteRawTag(24);
        output.WriteInt32(Player1Choice);
      }
      if (HasPlayer2Choice) {
        output.WriteRawTag(32);
        output.WriteInt32(Player2Choice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId1);
      }
      if (HasPlayerId2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId2);
      }
      if (HasPlayer1Choice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1Choice);
      }
      if (HasPlayer2Choice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2Choice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_RockPaperScissorsFinished other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId1) {
        PlayerId1 = other.PlayerId1;
      }
      if (other.HasPlayerId2) {
        PlayerId2 = other.PlayerId2;
      }
      if (other.HasPlayer1Choice) {
        Player1Choice = other.Player1Choice;
      }
      if (other.HasPlayer2Choice) {
        Player2Choice = other.Player2Choice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId1 = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId2 = input.ReadInt32();
            break;
          }
          case 24: {
            Player1Choice = input.ReadInt32();
            break;
          }
          case 32: {
            Player2Choice = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId1 = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId2 = input.ReadInt32();
            break;
          }
          case 24: {
            Player1Choice = input.ReadInt32();
            break;
          }
          case 32: {
            Player2Choice = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_DuelOpponentKilled : pb::IMessage<CDOTAUserMsg_DuelOpponentKilled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_DuelOpponentKilled> _parser = new pb::MessageParser<CDOTAUserMsg_DuelOpponentKilled>(() => new CDOTAUserMsg_DuelOpponentKilled());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DuelOpponentKilled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[156]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DuelOpponentKilled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DuelOpponentKilled(CDOTAUserMsg_DuelOpponentKilled other) : this() {
      _hasBits0 = other._hasBits0;
      playerIdWinner_ = other.playerIdWinner_;
      playerIdLoser_ = other.playerIdLoser_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DuelOpponentKilled Clone() {
      return new CDOTAUserMsg_DuelOpponentKilled(this);
    }

    /// <summary>Field number for the "player_id_winner" field.</summary>
    public const int PlayerIdWinnerFieldNumber = 1;
    private readonly static int PlayerIdWinnerDefaultValue = 0;

    private int playerIdWinner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIdWinner {
      get { if ((_hasBits0 & 1) != 0) { return playerIdWinner_; } else { return PlayerIdWinnerDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerIdWinner_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_winner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerIdWinner {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id_winner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerIdWinner() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_id_loser" field.</summary>
    public const int PlayerIdLoserFieldNumber = 2;
    private readonly static int PlayerIdLoserDefaultValue = 0;

    private int playerIdLoser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIdLoser {
      get { if ((_hasBits0 & 2) != 0) { return playerIdLoser_; } else { return PlayerIdLoserDefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerIdLoser_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_loser" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerIdLoser {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_id_loser" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerIdLoser() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DuelOpponentKilled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DuelOpponentKilled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdWinner != other.PlayerIdWinner) return false;
      if (PlayerIdLoser != other.PlayerIdLoser) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerIdWinner) hash ^= PlayerIdWinner.GetHashCode();
      if (HasPlayerIdLoser) hash ^= PlayerIdLoser.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerIdWinner) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdWinner);
      }
      if (HasPlayerIdLoser) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerIdLoser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerIdWinner) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdWinner);
      }
      if (HasPlayerIdLoser) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerIdLoser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerIdWinner) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIdWinner);
      }
      if (HasPlayerIdLoser) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIdLoser);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DuelOpponentKilled other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerIdWinner) {
        PlayerIdWinner = other.PlayerIdWinner;
      }
      if (other.HasPlayerIdLoser) {
        PlayerIdLoser = other.PlayerIdLoser;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIdWinner = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerIdLoser = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerIdWinner = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerIdLoser = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_DuelAccepted : pb::IMessage<CDOTAUserMsg_DuelAccepted>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_DuelAccepted> _parser = new pb::MessageParser<CDOTAUserMsg_DuelAccepted>(() => new CDOTAUserMsg_DuelAccepted());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DuelAccepted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[157]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DuelAccepted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DuelAccepted(CDOTAUserMsg_DuelAccepted other) : this() {
      _hasBits0 = other._hasBits0;
      playerId1_ = other.playerId1_;
      playerId2_ = other.playerId2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DuelAccepted Clone() {
      return new CDOTAUserMsg_DuelAccepted(this);
    }

    /// <summary>Field number for the "player_id_1" field.</summary>
    public const int PlayerId1FieldNumber = 1;
    private readonly static int PlayerId1DefaultValue = 0;

    private int playerId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId1 {
      get { if ((_hasBits0 & 1) != 0) { return playerId1_; } else { return PlayerId1DefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId1_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId1 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id_1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId1() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_id_2" field.</summary>
    public const int PlayerId2FieldNumber = 2;
    private readonly static int PlayerId2DefaultValue = 0;

    private int playerId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId2 {
      get { if ((_hasBits0 & 2) != 0) { return playerId2_; } else { return PlayerId2DefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerId2_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId2 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_id_2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId2() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DuelAccepted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DuelAccepted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId1 != other.PlayerId1) return false;
      if (PlayerId2 != other.PlayerId2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId1) hash ^= PlayerId1.GetHashCode();
      if (HasPlayerId2) hash ^= PlayerId2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId1) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId1);
      }
      if (HasPlayerId2) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId1) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId1);
      }
      if (HasPlayerId2) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId1);
      }
      if (HasPlayerId2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DuelAccepted other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId1) {
        PlayerId1 = other.PlayerId1;
      }
      if (other.HasPlayerId2) {
        PlayerId2 = other.PlayerId2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId1 = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId2 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId1 = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId2 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_DuelRequested : pb::IMessage<CDOTAUserMsg_DuelRequested>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_DuelRequested> _parser = new pb::MessageParser<CDOTAUserMsg_DuelRequested>(() => new CDOTAUserMsg_DuelRequested());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_DuelRequested> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[158]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DuelRequested() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DuelRequested(CDOTAUserMsg_DuelRequested other) : this() {
      _hasBits0 = other._hasBits0;
      playerIdRequestor_ = other.playerIdRequestor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_DuelRequested Clone() {
      return new CDOTAUserMsg_DuelRequested(this);
    }

    /// <summary>Field number for the "player_id_requestor" field.</summary>
    public const int PlayerIdRequestorFieldNumber = 1;
    private readonly static int PlayerIdRequestorDefaultValue = -1;

    private int playerIdRequestor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIdRequestor {
      get { if ((_hasBits0 & 1) != 0) { return playerIdRequestor_; } else { return PlayerIdRequestorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerIdRequestor_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_requestor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerIdRequestor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id_requestor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerIdRequestor() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_DuelRequested);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_DuelRequested other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdRequestor != other.PlayerIdRequestor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerIdRequestor) hash ^= PlayerIdRequestor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerIdRequestor) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdRequestor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerIdRequestor) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdRequestor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerIdRequestor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIdRequestor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_DuelRequested other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerIdRequestor) {
        PlayerIdRequestor = other.PlayerIdRequestor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIdRequestor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerIdRequestor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled : pb::IMessage<CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled> _parser = new pb::MessageParser<CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled>(() => new CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[159]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled(CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled other) : this() {
      _hasBits0 = other._hasBits0;
      playerIdKiller_ = other.playerIdKiller_;
      playerIdTarget_ = other.playerIdTarget_;
      points_ = other.points_;
      pointsTotal_ = other.pointsTotal_;
      lastHit_ = other.lastHit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled Clone() {
      return new CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled(this);
    }

    /// <summary>Field number for the "player_id_killer" field.</summary>
    public const int PlayerIdKillerFieldNumber = 1;
    private readonly static int PlayerIdKillerDefaultValue = -1;

    private int playerIdKiller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIdKiller {
      get { if ((_hasBits0 & 1) != 0) { return playerIdKiller_; } else { return PlayerIdKillerDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerIdKiller_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_killer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerIdKiller {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id_killer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerIdKiller() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_id_target" field.</summary>
    public const int PlayerIdTargetFieldNumber = 2;
    private readonly static int PlayerIdTargetDefaultValue = -1;

    private int playerIdTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIdTarget {
      get { if ((_hasBits0 & 2) != 0) { return playerIdTarget_; } else { return PlayerIdTargetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerIdTarget_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_target" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerIdTarget {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_id_target" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerIdTarget() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 3;
    private readonly static int PointsDefaultValue = 0;

    private int points_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Points {
      get { if ((_hasBits0 & 4) != 0) { return points_; } else { return PointsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        points_ = value;
      }
    }
    /// <summary>Gets whether the "points" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPoints {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "points" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPoints() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "points_total" field.</summary>
    public const int PointsTotalFieldNumber = 4;
    private readonly static int PointsTotalDefaultValue = 0;

    private int pointsTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointsTotal {
      get { if ((_hasBits0 & 8) != 0) { return pointsTotal_; } else { return PointsTotalDefaultValue; } }
      set {
        _hasBits0 |= 8;
        pointsTotal_ = value;
      }
    }
    /// <summary>Gets whether the "points_total" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPointsTotal {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "points_total" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPointsTotal() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "last_hit" field.</summary>
    public const int LastHitFieldNumber = 5;
    private readonly static bool LastHitDefaultValue = false;

    private bool lastHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LastHit {
      get { if ((_hasBits0 & 16) != 0) { return lastHit_; } else { return LastHitDefaultValue; } }
      set {
        _hasBits0 |= 16;
        lastHit_ = value;
      }
    }
    /// <summary>Gets whether the "last_hit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastHit {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "last_hit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastHit() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdKiller != other.PlayerIdKiller) return false;
      if (PlayerIdTarget != other.PlayerIdTarget) return false;
      if (Points != other.Points) return false;
      if (PointsTotal != other.PointsTotal) return false;
      if (LastHit != other.LastHit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerIdKiller) hash ^= PlayerIdKiller.GetHashCode();
      if (HasPlayerIdTarget) hash ^= PlayerIdTarget.GetHashCode();
      if (HasPoints) hash ^= Points.GetHashCode();
      if (HasPointsTotal) hash ^= PointsTotal.GetHashCode();
      if (HasLastHit) hash ^= LastHit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerIdKiller) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdKiller);
      }
      if (HasPlayerIdTarget) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerIdTarget);
      }
      if (HasPoints) {
        output.WriteRawTag(24);
        output.WriteInt32(Points);
      }
      if (HasPointsTotal) {
        output.WriteRawTag(32);
        output.WriteInt32(PointsTotal);
      }
      if (HasLastHit) {
        output.WriteRawTag(40);
        output.WriteBool(LastHit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerIdKiller) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdKiller);
      }
      if (HasPlayerIdTarget) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerIdTarget);
      }
      if (HasPoints) {
        output.WriteRawTag(24);
        output.WriteInt32(Points);
      }
      if (HasPointsTotal) {
        output.WriteRawTag(32);
        output.WriteInt32(PointsTotal);
      }
      if (HasLastHit) {
        output.WriteRawTag(40);
        output.WriteBool(LastHit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerIdKiller) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIdKiller);
      }
      if (HasPlayerIdTarget) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIdTarget);
      }
      if (HasPoints) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Points);
      }
      if (HasPointsTotal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointsTotal);
      }
      if (HasLastHit) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerIdKiller) {
        PlayerIdKiller = other.PlayerIdKiller;
      }
      if (other.HasPlayerIdTarget) {
        PlayerIdTarget = other.PlayerIdTarget;
      }
      if (other.HasPoints) {
        Points = other.Points;
      }
      if (other.HasPointsTotal) {
        PointsTotal = other.PointsTotal;
      }
      if (other.HasLastHit) {
        LastHit = other.LastHit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIdKiller = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerIdTarget = input.ReadInt32();
            break;
          }
          case 24: {
            Points = input.ReadInt32();
            break;
          }
          case 32: {
            PointsTotal = input.ReadInt32();
            break;
          }
          case 40: {
            LastHit = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerIdKiller = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerIdTarget = input.ReadInt32();
            break;
          }
          case 24: {
            Points = input.ReadInt32();
            break;
          }
          case 32: {
            PointsTotal = input.ReadInt32();
            break;
          }
          case 40: {
            LastHit = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_PlayerDraftSuggestPick : pb::IMessage<CDOTAUserMsg_PlayerDraftSuggestPick>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_PlayerDraftSuggestPick> _parser = new pb::MessageParser<CDOTAUserMsg_PlayerDraftSuggestPick>(() => new CDOTAUserMsg_PlayerDraftSuggestPick());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_PlayerDraftSuggestPick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[160]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PlayerDraftSuggestPick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PlayerDraftSuggestPick(CDOTAUserMsg_PlayerDraftSuggestPick other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      suggestionPlayerId_ = other.suggestionPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PlayerDraftSuggestPick Clone() {
      return new CDOTAUserMsg_PlayerDraftSuggestPick(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "suggestion_player_id" field.</summary>
    public const int SuggestionPlayerIdFieldNumber = 2;
    private readonly static int SuggestionPlayerIdDefaultValue = -1;

    private int suggestionPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuggestionPlayerId {
      get { if ((_hasBits0 & 2) != 0) { return suggestionPlayerId_; } else { return SuggestionPlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        suggestionPlayerId_ = value;
      }
    }
    /// <summary>Gets whether the "suggestion_player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuggestionPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "suggestion_player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuggestionPlayerId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_PlayerDraftSuggestPick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_PlayerDraftSuggestPick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (SuggestionPlayerId != other.SuggestionPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasSuggestionPlayerId) hash ^= SuggestionPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasSuggestionPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(SuggestionPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasSuggestionPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(SuggestionPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasSuggestionPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuggestionPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_PlayerDraftSuggestPick other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasSuggestionPlayerId) {
        SuggestionPlayerId = other.SuggestionPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            SuggestionPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            SuggestionPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_PlayerDraftPick : pb::IMessage<CDOTAUserMsg_PlayerDraftPick>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_PlayerDraftPick> _parser = new pb::MessageParser<CDOTAUserMsg_PlayerDraftPick>(() => new CDOTAUserMsg_PlayerDraftPick());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_PlayerDraftPick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[161]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PlayerDraftPick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PlayerDraftPick(CDOTAUserMsg_PlayerDraftPick other) : this() {
      _hasBits0 = other._hasBits0;
      playerIdCaptain_ = other.playerIdCaptain_;
      playerIdTarget_ = other.playerIdTarget_;
      team_ = other.team_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_PlayerDraftPick Clone() {
      return new CDOTAUserMsg_PlayerDraftPick(this);
    }

    /// <summary>Field number for the "player_id_captain" field.</summary>
    public const int PlayerIdCaptainFieldNumber = 1;
    private readonly static int PlayerIdCaptainDefaultValue = -1;

    private int playerIdCaptain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIdCaptain {
      get { if ((_hasBits0 & 1) != 0) { return playerIdCaptain_; } else { return PlayerIdCaptainDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerIdCaptain_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_captain" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerIdCaptain {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id_captain" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerIdCaptain() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_id_target" field.</summary>
    public const int PlayerIdTargetFieldNumber = 2;
    private readonly static int PlayerIdTargetDefaultValue = -1;

    private int playerIdTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIdTarget {
      get { if ((_hasBits0 & 2) != 0) { return playerIdTarget_; } else { return PlayerIdTargetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerIdTarget_ = value;
      }
    }
    /// <summary>Gets whether the "player_id_target" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerIdTarget {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_id_target" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerIdTarget() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 3;
    private readonly static int TeamDefaultValue = 0;

    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { if ((_hasBits0 & 4) != 0) { return team_; } else { return TeamDefaultValue; } }
      set {
        _hasBits0 |= 4;
        team_ = value;
      }
    }
    /// <summary>Gets whether the "team" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeam {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "team" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeam() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_PlayerDraftPick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_PlayerDraftPick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdCaptain != other.PlayerIdCaptain) return false;
      if (PlayerIdTarget != other.PlayerIdTarget) return false;
      if (Team != other.Team) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerIdCaptain) hash ^= PlayerIdCaptain.GetHashCode();
      if (HasPlayerIdTarget) hash ^= PlayerIdTarget.GetHashCode();
      if (HasTeam) hash ^= Team.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerIdCaptain) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdCaptain);
      }
      if (HasPlayerIdTarget) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerIdTarget);
      }
      if (HasTeam) {
        output.WriteRawTag(24);
        output.WriteInt32(Team);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerIdCaptain) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIdCaptain);
      }
      if (HasPlayerIdTarget) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerIdTarget);
      }
      if (HasTeam) {
        output.WriteRawTag(24);
        output.WriteInt32(Team);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerIdCaptain) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIdCaptain);
      }
      if (HasPlayerIdTarget) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIdTarget);
      }
      if (HasTeam) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_PlayerDraftPick other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerIdCaptain) {
        PlayerIdCaptain = other.PlayerIdCaptain;
      }
      if (other.HasPlayerIdTarget) {
        PlayerIdTarget = other.PlayerIdTarget;
      }
      if (other.HasTeam) {
        Team = other.Team;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIdCaptain = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerIdTarget = input.ReadInt32();
            break;
          }
          case 24: {
            Team = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerIdCaptain = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerIdTarget = input.ReadInt32();
            break;
          }
          case 24: {
            Team = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_FacetPing : pb::IMessage<CDOTAUserMsg_FacetPing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_FacetPing> _parser = new pb::MessageParser<CDOTAUserMsg_FacetPing>(() => new CDOTAUserMsg_FacetPing());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_FacetPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[162]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FacetPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FacetPing(CDOTAUserMsg_FacetPing other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      facetStrhash_ = other.facetStrhash_;
      entityId_ = other.entityId_;
      allChat_ = other.allChat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_FacetPing Clone() {
      return new CDOTAUserMsg_FacetPing(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "facet_strhash" field.</summary>
    public const int FacetStrhashFieldNumber = 2;
    private readonly static uint FacetStrhashDefaultValue = 0;

    private uint facetStrhash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FacetStrhash {
      get { if ((_hasBits0 & 2) != 0) { return facetStrhash_; } else { return FacetStrhashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        facetStrhash_ = value;
      }
    }
    /// <summary>Gets whether the "facet_strhash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFacetStrhash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "facet_strhash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFacetStrhash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 3;
    private readonly static uint EntityIdDefaultValue = 0;

    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 4) != 0) { return entityId_; } else { return EntityIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "all_chat" field.</summary>
    public const int AllChatFieldNumber = 4;
    private readonly static bool AllChatDefaultValue = false;

    private bool allChat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllChat {
      get { if ((_hasBits0 & 8) != 0) { return allChat_; } else { return AllChatDefaultValue; } }
      set {
        _hasBits0 |= 8;
        allChat_ = value;
      }
    }
    /// <summary>Gets whether the "all_chat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllChat {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "all_chat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllChat() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_FacetPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_FacetPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (FacetStrhash != other.FacetStrhash) return false;
      if (EntityId != other.EntityId) return false;
      if (AllChat != other.AllChat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasFacetStrhash) hash ^= FacetStrhash.GetHashCode();
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasAllChat) hash ^= AllChat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasFacetStrhash) {
        output.WriteRawTag(16);
        output.WriteUInt32(FacetStrhash);
      }
      if (HasEntityId) {
        output.WriteRawTag(24);
        output.WriteUInt32(EntityId);
      }
      if (HasAllChat) {
        output.WriteRawTag(32);
        output.WriteBool(AllChat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasFacetStrhash) {
        output.WriteRawTag(16);
        output.WriteUInt32(FacetStrhash);
      }
      if (HasEntityId) {
        output.WriteRawTag(24);
        output.WriteUInt32(EntityId);
      }
      if (HasAllChat) {
        output.WriteRawTag(32);
        output.WriteBool(AllChat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasFacetStrhash) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FacetStrhash);
      }
      if (HasEntityId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (HasAllChat) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_FacetPing other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasFacetStrhash) {
        FacetStrhash = other.FacetStrhash;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasAllChat) {
        AllChat = other.AllChat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            FacetStrhash = input.ReadUInt32();
            break;
          }
          case 24: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 32: {
            AllChat = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            FacetStrhash = input.ReadUInt32();
            break;
          }
          case 24: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 32: {
            AllChat = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_InnatePing : pb::IMessage<CDOTAUserMsg_InnatePing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_InnatePing> _parser = new pb::MessageParser<CDOTAUserMsg_InnatePing>(() => new CDOTAUserMsg_InnatePing());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_InnatePing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[163]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_InnatePing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_InnatePing(CDOTAUserMsg_InnatePing other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      entityId_ = other.entityId_;
      allChat_ = other.allChat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_InnatePing Clone() {
      return new CDOTAUserMsg_InnatePing(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 2;
    private readonly static uint EntityIdDefaultValue = 0;

    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 2) != 0) { return entityId_; } else { return EntityIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "all_chat" field.</summary>
    public const int AllChatFieldNumber = 3;
    private readonly static bool AllChatDefaultValue = false;

    private bool allChat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllChat {
      get { if ((_hasBits0 & 4) != 0) { return allChat_; } else { return AllChatDefaultValue; } }
      set {
        _hasBits0 |= 4;
        allChat_ = value;
      }
    }
    /// <summary>Gets whether the "all_chat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllChat {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "all_chat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllChat() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_InnatePing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_InnatePing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (EntityId != other.EntityId) return false;
      if (AllChat != other.AllChat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasAllChat) hash ^= AllChat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasEntityId) {
        output.WriteRawTag(16);
        output.WriteUInt32(EntityId);
      }
      if (HasAllChat) {
        output.WriteRawTag(24);
        output.WriteBool(AllChat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasEntityId) {
        output.WriteRawTag(16);
        output.WriteUInt32(EntityId);
      }
      if (HasAllChat) {
        output.WriteRawTag(24);
        output.WriteBool(AllChat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasEntityId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (HasAllChat) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_InnatePing other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasAllChat) {
        AllChat = other.AllChat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 24: {
            AllChat = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 24: {
            AllChat = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_NeutralCraftAvailable : pb::IMessage<CDOTAUserMsg_NeutralCraftAvailable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_NeutralCraftAvailable> _parser = new pb::MessageParser<CDOTAUserMsg_NeutralCraftAvailable>(() => new CDOTAUserMsg_NeutralCraftAvailable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_NeutralCraftAvailable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[164]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NeutralCraftAvailable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NeutralCraftAvailable(CDOTAUserMsg_NeutralCraftAvailable other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_NeutralCraftAvailable Clone() {
      return new CDOTAUserMsg_NeutralCraftAvailable(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_NeutralCraftAvailable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_NeutralCraftAvailable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_NeutralCraftAvailable other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_TimerAlert : pb::IMessage<CDOTAUserMsg_TimerAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_TimerAlert> _parser = new pb::MessageParser<CDOTAUserMsg_TimerAlert>(() => new CDOTAUserMsg_TimerAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_TimerAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[165]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TimerAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TimerAlert(CDOTAUserMsg_TimerAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      timerAlertType_ = other.timerAlertType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_TimerAlert Clone() {
      return new CDOTAUserMsg_TimerAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "timer_alert_type" field.</summary>
    public const int TimerAlertTypeFieldNumber = 2;
    private readonly static global::Steam.Protos.Dota2.ETimerAlertType TimerAlertTypeDefaultValue = global::Steam.Protos.Dota2.ETimerAlertType.KTimerAlertTypePowerRune;

    private global::Steam.Protos.Dota2.ETimerAlertType timerAlertType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.ETimerAlertType TimerAlertType {
      get { if ((_hasBits0 & 2) != 0) { return timerAlertType_; } else { return TimerAlertTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        timerAlertType_ = value;
      }
    }
    /// <summary>Gets whether the "timer_alert_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimerAlertType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "timer_alert_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimerAlertType() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_TimerAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_TimerAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TimerAlertType != other.TimerAlertType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasTimerAlertType) hash ^= TimerAlertType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTimerAlertType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TimerAlertType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTimerAlertType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TimerAlertType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasTimerAlertType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimerAlertType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_TimerAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasTimerAlertType) {
        TimerAlertType = other.TimerAlertType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TimerAlertType = (global::Steam.Protos.Dota2.ETimerAlertType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TimerAlertType = (global::Steam.Protos.Dota2.ETimerAlertType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDOTAUserMsg_MadstoneAlert : pb::IMessage<CDOTAUserMsg_MadstoneAlert>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDOTAUserMsg_MadstoneAlert> _parser = new pb::MessageParser<CDOTAUserMsg_MadstoneAlert>(() => new CDOTAUserMsg_MadstoneAlert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDOTAUserMsg_MadstoneAlert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Steam.Protos.Dota2.DotaUsermessagesReflection.Descriptor.MessageTypes[166]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MadstoneAlert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MadstoneAlert(CDOTAUserMsg_MadstoneAlert other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      targetEntindex_ = other.targetEntindex_;
      tier_ = other.tier_;
      madstoneAlertType_ = other.madstoneAlertType_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDOTAUserMsg_MadstoneAlert Clone() {
      return new CDOTAUserMsg_MadstoneAlert(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = -1;

    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_entindex" field.</summary>
    public const int TargetEntindexFieldNumber = 2;
    private readonly static int TargetEntindexDefaultValue = -1;

    private int targetEntindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetEntindex {
      get { if ((_hasBits0 & 2) != 0) { return targetEntindex_; } else { return TargetEntindexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetEntindex_ = value;
      }
    }
    /// <summary>Gets whether the "target_entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEntindex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEntindex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "tier" field.</summary>
    public const int TierFieldNumber = 3;
    private readonly static int TierDefaultValue = 0;

    private int tier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tier {
      get { if ((_hasBits0 & 4) != 0) { return tier_; } else { return TierDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tier_ = value;
      }
    }
    /// <summary>Gets whether the "tier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTier {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "tier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTier() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "madstone_alert_type" field.</summary>
    public const int MadstoneAlertTypeFieldNumber = 4;
    private readonly static global::Steam.Protos.Dota2.CDOTAUserMsg_MadstoneAlert.Types.EMadstoneAlertType MadstoneAlertTypeDefaultValue = global::Steam.Protos.Dota2.CDOTAUserMsg_MadstoneAlert.Types.EMadstoneAlertType.CraftAvailable;

    private global::Steam.Protos.Dota2.CDOTAUserMsg_MadstoneAlert.Types.EMadstoneAlertType madstoneAlertType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Steam.Protos.Dota2.CDOTAUserMsg_MadstoneAlert.Types.EMadstoneAlertType MadstoneAlertType {
      get { if ((_hasBits0 & 8) != 0) { return madstoneAlertType_; } else { return MadstoneAlertTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        madstoneAlertType_ = value;
      }
    }
    /// <summary>Gets whether the "madstone_alert_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMadstoneAlertType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "madstone_alert_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMadstoneAlertType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 5;
    private readonly static int ValueDefaultValue = 0;

    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { if ((_hasBits0 & 16) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 16;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDOTAUserMsg_MadstoneAlert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDOTAUserMsg_MadstoneAlert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TargetEntindex != other.TargetEntindex) return false;
      if (Tier != other.Tier) return false;
      if (MadstoneAlertType != other.MadstoneAlertType) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasTargetEntindex) hash ^= TargetEntindex.GetHashCode();
      if (HasTier) hash ^= Tier.GetHashCode();
      if (HasMadstoneAlertType) hash ^= MadstoneAlertType.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetEntindex);
      }
      if (HasTier) {
        output.WriteRawTag(24);
        output.WriteInt32(Tier);
      }
      if (HasMadstoneAlertType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MadstoneAlertType);
      }
      if (HasValue) {
        output.WriteRawTag(40);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasTargetEntindex) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetEntindex);
      }
      if (HasTier) {
        output.WriteRawTag(24);
        output.WriteInt32(Tier);
      }
      if (HasMadstoneAlertType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MadstoneAlertType);
      }
      if (HasValue) {
        output.WriteRawTag(40);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasTargetEntindex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntindex);
      }
      if (HasTier) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tier);
      }
      if (HasMadstoneAlertType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MadstoneAlertType);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDOTAUserMsg_MadstoneAlert other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasTargetEntindex) {
        TargetEntindex = other.TargetEntindex;
      }
      if (other.HasTier) {
        Tier = other.Tier;
      }
      if (other.HasMadstoneAlertType) {
        MadstoneAlertType = other.MadstoneAlertType;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 24: {
            Tier = input.ReadInt32();
            break;
          }
          case 32: {
            MadstoneAlertType = (global::Steam.Protos.Dota2.CDOTAUserMsg_MadstoneAlert.Types.EMadstoneAlertType) input.ReadEnum();
            break;
          }
          case 40: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetEntindex = input.ReadInt32();
            break;
          }
          case 24: {
            Tier = input.ReadInt32();
            break;
          }
          case 32: {
            MadstoneAlertType = (global::Steam.Protos.Dota2.CDOTAUserMsg_MadstoneAlert.Types.EMadstoneAlertType) input.ReadEnum();
            break;
          }
          case 40: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CDOTAUserMsg_MadstoneAlert message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EMadstoneAlertType {
        [pbr::OriginalName("CraftAvailable")] CraftAvailable = 0,
        [pbr::OriginalName("NeedMadstone")] NeedMadstone = 1,
        [pbr::OriginalName("WaitingForNextTier")] WaitingForNextTier = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
